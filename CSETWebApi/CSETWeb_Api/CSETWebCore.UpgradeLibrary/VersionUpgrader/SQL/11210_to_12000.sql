/*
Run this script on:

        (localdb)\MSSQLLocalDB.CSETWeb11210    -  This database will be modified

to synchronize it with:

        (localdb)\MSSQLLocalDB.CSETWeb12000

You are recommended to back up your database before running this script

Script created by SQL Compare version 14.6.10.20102 from Red Gate Software Ltd at 9/26/2022 8:10:00 AM

*/
SET NUMERIC_ROUNDABORT OFF
GO
SET ANSI_PADDING, ANSI_WARNINGS, CONCAT_NULL_YIELDS_NULL, ARITHABORT, QUOTED_IDENTIFIER, ANSI_NULLS ON
GO
SET XACT_ABORT ON
GO
SET TRANSACTION ISOLATION LEVEL Serializable
GO
BEGIN TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping extended properties'
GO
BEGIN TRY
	EXEC sp_dropextendedproperty N'MS_Description', 'SCHEMA', N'dbo', 'TABLE', N'MATURITY_QUESTIONS', NULL, NULL
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_dropextendedproperty N'BELONGS_IN_EA', 'SCHEMA', N'dbo', 'TABLE', N'NEW_QUESTION', NULL, NULL
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_dropextendedproperty N'MS_Description', 'SCHEMA', N'dbo', 'TABLE', N'NEW_QUESTION', NULL, NULL
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_dropextendedproperty N'MS_Description', 'SCHEMA', N'dbo', 'TABLE', N'NEW_REQUIREMENT', NULL, NULL
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
PRINT N'Dropping foreign keys from [dbo].[MATURITY_QUESTIONS]'
GO
ALTER TABLE [dbo].[MATURITY_QUESTIONS] DROP CONSTRAINT [FK__MATURITY___Matur__5B638405]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_QUESTIONS] DROP CONSTRAINT [FK_MATURITY_QUESTIONS_MATURITY_GROUPINGS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_QUESTIONS] DROP CONSTRAINT [FK_MATURITY_QUESTIONS_MATURITY_MODELS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_QUESTIONS] DROP CONSTRAINT [FK_MATURITY_QUESTIONS_MATURITY_OPTIONS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_QUESTIONS] DROP CONSTRAINT [FK_MATURITY_QUESTIONS_MATURITY_QUESTION_TYPES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_QUESTIONS] DROP CONSTRAINT [FK_MATURITY_QUESTIONS_MATURITY_QUESTIONS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[NEW_QUESTION]'
GO
ALTER TABLE [dbo].[NEW_QUESTION] DROP CONSTRAINT [FK_NEW_QUESTION_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NEW_QUESTION] DROP CONSTRAINT [FK_NEW_QUESTION_UNIVERSAL_SAL_LEVEL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NEW_QUESTION] DROP CONSTRAINT [FK_NEW_QUESTION_UNIVERSAL_SUB_CATEGORY_HEADINGS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[NEW_REQUIREMENT]'
GO
ALTER TABLE [dbo].[NEW_REQUIREMENT] DROP CONSTRAINT [FK_NEW_REQUIREMENT_NCSF_Category]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NEW_REQUIREMENT] DROP CONSTRAINT [FK_NEW_REQUIREMENT_QUESTION_GROUP_HEADING]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NEW_REQUIREMENT] DROP CONSTRAINT [FK_NEW_REQUIREMENT_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NEW_REQUIREMENT] DROP CONSTRAINT [FK_NEW_REQUIREMENT_STANDARD_CATEGORY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[ADDRESS]'
GO
ALTER TABLE [dbo].[ADDRESS] DROP CONSTRAINT [FK_ADDRESS_USER_DETAIL_INFORMATION1]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[AGGREGATION_INFORMATION]'
GO
ALTER TABLE [dbo].[AGGREGATION_INFORMATION] DROP CONSTRAINT [FK_AGGREGATION_INFORMATION_AGGREGATION_TYPES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[ANALYTICS_MATURITY_GROUPINGS]'
GO
ALTER TABLE [dbo].[ANALYTICS_MATURITY_GROUPINGS] DROP CONSTRAINT [FK_ANALYTICS_MATURITY_GROUPINGS_MATURITY_MODELS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[ANSWER]'
GO
ALTER TABLE [dbo].[ANSWER] DROP CONSTRAINT [FK_ANSWER_Answer_Lookup]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[SUB_CATEGORY_ANSWERS]'
GO
ALTER TABLE [dbo].[SUB_CATEGORY_ANSWERS] DROP CONSTRAINT [FK_SUB_CATEGORY_ANSWERS_Answer_Lookup]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SUB_CATEGORY_ANSWERS] DROP CONSTRAINT [FK_SUB_CATEGORY_ANSWERS_ASSESSMENTS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SUB_CATEGORY_ANSWERS] DROP CONSTRAINT [FK_SUB_CATEGORY_ANSWERS_UNIVERSAL_SUB_CATEGORY_HEADINGS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[DEMOGRAPHICS_ASSET_VALUES]'
GO
ALTER TABLE [dbo].[DEMOGRAPHICS_ASSET_VALUES] DROP CONSTRAINT [FK_DEMOGRAPHICS_ASSET_VALUES_APP_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[MODES_SETS_MATURITY_MODELS]'
GO
ALTER TABLE [dbo].[MODES_SETS_MATURITY_MODELS] DROP CONSTRAINT [FK_MODES_MATURITY_MODELS_APP_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MODES_SETS_MATURITY_MODELS] DROP CONSTRAINT [FK_MODES_SETS_MATURITY_MODELS_MATURITY_MODELS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MODES_SETS_MATURITY_MODELS] DROP CONSTRAINT [FK_MODES_MATURITY_MODELS_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[ASSESSMENT_SELECTED_LEVELS]'
GO
ALTER TABLE [dbo].[ASSESSMENT_SELECTED_LEVELS] DROP CONSTRAINT [FK_ASSESSMENT_SELECTED_LEVELS_STANDARD_SELECTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_SELECTED_LEVELS] DROP CONSTRAINT [FK_ASSESSMENT_SELECTED_LEVELS_LEVEL_NAMES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[AVAILABLE_STANDARDS]'
GO
ALTER TABLE [dbo].[AVAILABLE_STANDARDS] DROP CONSTRAINT [FK_AVAILABLE_STANDARDS_ASSESSMENTS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[AVAILABLE_STANDARDS] DROP CONSTRAINT [FK_AVAILABLE_STANDARDS_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS]'
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] DROP CONSTRAINT [FK_CIS_CSI_SERVICE_DEMOGRAPHICS_CIS_CSI_BUDGET_BASES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] DROP CONSTRAINT [FK_CIS_CSI_SERVICE_DEMOGRAPHICS_CIS_CSI_CUSTOMER_COUNTS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] DROP CONSTRAINT [FK_CIS_CSI_SERVICE_DEMOGRAPHICS_CIS_CSI_STAFF_COUNTS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] DROP CONSTRAINT [FK_CIS_CSI_SERVICE_DEMOGRAPHICS_CIS_CSI_STAFF_COUNTS_2]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] DROP CONSTRAINT [FK_CIS_CSI_SERVICE_DEMOGRAPHICS_CIS_CSI_USER_COUNTS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS]'
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] DROP CONSTRAINT [FK_CIS_CSI_ORGANIZATION_DEMOGRAPHICS_CIS_CSI_STAFF_COUNTS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] DROP CONSTRAINT [FK_CIS_CSI_ORGANIZATION_DEMOGRAPHICS_CIS_CSI_STAFF_COUNTS_2]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[CNSS_CIA_JUSTIFICATIONS]'
GO
ALTER TABLE [dbo].[CNSS_CIA_JUSTIFICATIONS] DROP CONSTRAINT [FK_CNSS_CIA_JUSTIFICATIONS_ASSESSMENTS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CNSS_CIA_JUSTIFICATIONS] DROP CONSTRAINT [FK_CNSS_CIA_JUSTIFICATIONS_CNSS_CIA_TYPES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[COMPONENT_SYMBOLS]'
GO
ALTER TABLE [dbo].[COMPONENT_SYMBOLS] DROP CONSTRAINT [FK_COMPONENT_SYMBOLS_COMPONENT_FAMILY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[CUSTOM_BASE_STANDARDS]'
GO
ALTER TABLE [dbo].[CUSTOM_BASE_STANDARDS] DROP CONSTRAINT [FK_CUSTOM_BASE_STANDARD_CUSTOM_QUESTIONAIRES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[CUSTOM_QUESTIONAIRE_QUESTIONS]'
GO
ALTER TABLE [dbo].[CUSTOM_QUESTIONAIRE_QUESTIONS] DROP CONSTRAINT [FK_CUSTON_QUESTIONAIRE_QUESTIONS_CUSTOM_QUESTIONAIRES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[DEMOGRAPHICS]'
GO
ALTER TABLE [dbo].[DEMOGRAPHICS] DROP CONSTRAINT [FK_DEMOGRAPHICS_DEMOGRAPHICS_ASSET_VALUES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DEMOGRAPHICS] DROP CONSTRAINT [FK_DEMOGRAPHICS_DEMOGRAPHICS_SIZE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[DIAGRAM_CONTAINER]'
GO
ALTER TABLE [dbo].[DIAGRAM_CONTAINER] DROP CONSTRAINT [FK_DIAGRAM_CONTAINER_DIAGRAM_CONTAINER_TYPES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[DIAGRAM_TYPES]'
GO
ALTER TABLE [dbo].[DIAGRAM_TYPES] DROP CONSTRAINT [FK_DIAGRAM_TYPES_DIAGRAM_OBJECT_TYPES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[VISIO_MAPPING]'
GO
ALTER TABLE [dbo].[VISIO_MAPPING] DROP CONSTRAINT [FK_VISIO_MAPPING_DIAGRAM_TYPES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[FILE_KEYWORDS]'
GO
ALTER TABLE [dbo].[FILE_KEYWORDS] DROP CONSTRAINT [FILE_KEYWORDS_GEN_FILE_FK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[GEN_FILE]'
GO
ALTER TABLE [dbo].[GEN_FILE] DROP CONSTRAINT [FK_GEN_FILE_FILE_REF_KEYS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[STANDARD_SOURCE_FILE]'
GO
ALTER TABLE [dbo].[STANDARD_SOURCE_FILE] DROP CONSTRAINT [FK_Standard_Source_File_FILE_REF_KEYS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_SOURCE_FILE] DROP CONSTRAINT [FK_Standard_Source_File_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[FINANCIAL_ASSESSMENT_VALUES]'
GO
ALTER TABLE [dbo].[FINANCIAL_ASSESSMENT_VALUES] DROP CONSTRAINT [FK_FINANCIAL_ASSESSMENT_VALUES_ASSESSMENTS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINANCIAL_ASSESSMENT_VALUES] DROP CONSTRAINT [FK_FINANCIAL_ASSESSMENT_VALUES_FINANCIAL_ATTRIBUTES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[FINANCIAL_HOURS]'
GO
ALTER TABLE [dbo].[FINANCIAL_HOURS] DROP CONSTRAINT [FK_FINANCIAL_HOURS_ASSESSMENTS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINANCIAL_HOURS] DROP CONSTRAINT [FK_FINANCIAL_HOURS_FINANCIAL_HOURS_COMPONENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINANCIAL_HOURS] DROP CONSTRAINT [FK_FINANCIAL_HOURS_FINANCIAL_REVIEWTYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[FRAMEWORK_TIER_DEFINITIONS]'
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_DEFINITIONS] DROP CONSTRAINT [FK_FRAMEWORK_TIER_DEFINITIONS_FRAMEWORK_TIERS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[FRAMEWORK_TIER_TYPE_ANSWER]'
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_TYPE_ANSWER] DROP CONSTRAINT [FK_FRAMEWORK_TIER_TYPE_ANSWER_FRAMEWORK_TIERS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_TYPE_ANSWER] DROP CONSTRAINT [FK_FRAMEWORK_TIER_TYPE_ANSWER_FRAMEWORK_TIER_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_TYPE_ANSWER] DROP CONSTRAINT [FK_FRAMEWORK_TIER_TYPE_ANSWER_ASSESSMENTS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[GENERAL_SAL]'
GO
ALTER TABLE [dbo].[GENERAL_SAL] DROP CONSTRAINT [FK_GENERAL_SAL_ASSESSMENTS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GENERAL_SAL] DROP CONSTRAINT [FK_GENERAL_SAL_GEN_SAL_NAMES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[GEN_SAL_WEIGHTS]'
GO
ALTER TABLE [dbo].[GEN_SAL_WEIGHTS] DROP CONSTRAINT [FK_GEN_SAL_WEIGHTS_GENERAL_SAL_DESCRIPTIONS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GEN_SAL_WEIGHTS] DROP CONSTRAINT [FK_GEN_SAL_WEIGHTS_GEN_SAL_NAMES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[MATURITY_ANSWER_OPTIONS]'
GO
ALTER TABLE [dbo].[MATURITY_ANSWER_OPTIONS] DROP CONSTRAINT [FK_MATURITY_ANSWER_OPTIONS_MATURITY_QUESTIONS1]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[MATURITY_REFERENCE_TEXT]'
GO
ALTER TABLE [dbo].[MATURITY_REFERENCE_TEXT] DROP CONSTRAINT [FK_MATURITY_REFERENCE_TEXT_MATURITY_QUESTIONS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[MATURITY_REFERENCES]'
GO
ALTER TABLE [dbo].[MATURITY_REFERENCES] DROP CONSTRAINT [FK_MATURITY_REFERENCES_MATURITY_QUESTIONS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_REFERENCES] DROP CONSTRAINT [FK_MATURITY_REFERENCES_GEN_FILE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[MATURITY_SOURCE_FILES]'
GO
ALTER TABLE [dbo].[MATURITY_SOURCE_FILES] DROP CONSTRAINT [FK_MATURITY_SOURCE_FILES_MATURITY_QUESTIONS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_SOURCE_FILES] DROP CONSTRAINT [FK_MATURITY_SOURCE_FILES_GEN_FILE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[NCSF_CATEGORY]'
GO
ALTER TABLE [dbo].[NCSF_CATEGORY] DROP CONSTRAINT [FK_NCSF_Category_NCSF_FUNCTIONS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[COMPONENT_QUESTIONS]'
GO
ALTER TABLE [dbo].[COMPONENT_QUESTIONS] DROP CONSTRAINT [FK_Component_Questions_NEW_QUESTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[FINANCIAL_QUESTIONS]'
GO
ALTER TABLE [dbo].[FINANCIAL_QUESTIONS] DROP CONSTRAINT [FK_FINANCIAL_QUESTIONS_NEW_QUESTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[NERC_RISK_RANKING]'
GO
ALTER TABLE [dbo].[NERC_RISK_RANKING] DROP CONSTRAINT [FK_NERC_RISK_RANKING_NEW_QUESTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NERC_RISK_RANKING] DROP CONSTRAINT [FK_NERC_RISK_RANKING_NEW_REQUIREMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[NEW_QUESTION_SETS]'
GO
ALTER TABLE [dbo].[NEW_QUESTION_SETS] DROP CONSTRAINT [FK_NEW_QUESTION_SETS_NEW_QUESTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NEW_QUESTION_SETS] DROP CONSTRAINT [FK_NEW_QUESTION_SETS_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[REQUIREMENT_QUESTIONS]'
GO
ALTER TABLE [dbo].[REQUIREMENT_QUESTIONS] DROP CONSTRAINT [FK_REQUIREMENT_QUESTIONS_NEW_QUESTION1]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_QUESTIONS] DROP CONSTRAINT [FK_REQUIREMENT_QUESTIONS_NEW_REQUIREMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[REQUIREMENT_QUESTIONS_SETS]'
GO
ALTER TABLE [dbo].[REQUIREMENT_QUESTIONS_SETS] DROP CONSTRAINT [FK_REQUIREMENT_QUESTIONS_SETS_NEW_QUESTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_QUESTIONS_SETS] DROP CONSTRAINT [FK_REQUIREMENT_QUESTIONS_SETS_NEW_REQUIREMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_QUESTIONS_SETS] DROP CONSTRAINT [FK_REQUIREMENT_QUESTIONS_SETS_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[NEW_QUESTION_LEVELS]'
GO
ALTER TABLE [dbo].[NEW_QUESTION_LEVELS] DROP CONSTRAINT [FK_NEW_QUESTION_LEVELS_UNIVERSAL_SAL_LEVEL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NEW_QUESTION_LEVELS] DROP CONSTRAINT [FK_NEW_QUESTION_LEVELS_NEW_QUESTION_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[FINANCIAL_REQUIREMENTS]'
GO
ALTER TABLE [dbo].[FINANCIAL_REQUIREMENTS] DROP CONSTRAINT [FK_FINANCIAL_REQUIREMENTS_NEW_REQUIREMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[PARAMETER_REQUIREMENTS]'
GO
ALTER TABLE [dbo].[PARAMETER_REQUIREMENTS] DROP CONSTRAINT [FK_Parameter_Requirements_NEW_REQUIREMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[REQUIREMENT_LEVELS]'
GO
ALTER TABLE [dbo].[REQUIREMENT_LEVELS] DROP CONSTRAINT [FK_REQUIREMENT_LEVELS_NEW_REQUIREMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_LEVELS] DROP CONSTRAINT [FK_REQUIREMENT_LEVELS_STANDARD_SPECIFIC_LEVEL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_LEVELS] DROP CONSTRAINT [FK_REQUIREMENT_LEVELS_REQUIREMENT_LEVEL_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[REQUIREMENT_REFERENCES]'
GO
ALTER TABLE [dbo].[REQUIREMENT_REFERENCES] DROP CONSTRAINT [FK_REQUIREMENT_REFERENCES_NEW_REQUIREMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_REFERENCES] DROP CONSTRAINT [FK_REQUIREMENT_REFERENCES_GEN_FILE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[REQUIREMENT_SETS]'
GO
ALTER TABLE [dbo].[REQUIREMENT_SETS] DROP CONSTRAINT [FK_REQUIREMENT_SETS_NEW_REQUIREMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_SETS] DROP CONSTRAINT [FK_QUESTION_SETS_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[REQUIREMENT_SOURCE_FILES]'
GO
ALTER TABLE [dbo].[REQUIREMENT_SOURCE_FILES] DROP CONSTRAINT [FK_REQUIREMENT_SOURCE_FILES_NEW_REQUIREMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_SOURCE_FILES] DROP CONSTRAINT [FK_REQUIREMENT_SOURCE_FILES_GEN_FILE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[NIST_SAL_INFO_TYPES]'
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES] DROP CONSTRAINT [FK_NIST_SAL_STANDARD_SELECTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[REPORT_STANDARDS_SELECTION]'
GO
ALTER TABLE [dbo].[REPORT_STANDARDS_SELECTION] DROP CONSTRAINT [FK_REPORT_STANDARDS_SELECTION_ASSESSMENTS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REPORT_STANDARDS_SELECTION] DROP CONSTRAINT [FK_REPORT_STANDARDS_SELECTION_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[STANDARD_SELECTION]'
GO
ALTER TABLE [dbo].[STANDARD_SELECTION] DROP CONSTRAINT [FK_STANDARD_SELECTION_SAL_DETERMINATION_TYPES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_SELECTION] DROP CONSTRAINT [FK_STANDARD_SELECTION_UNIVERSAL_SAL_LEVEL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[SECTOR_STANDARD_RECOMMENDATIONS]'
GO
ALTER TABLE [dbo].[SECTOR_STANDARD_RECOMMENDATIONS] DROP CONSTRAINT [FK_SECTOR_STANDARD_RECOMMENDATIONS_SECTOR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SECTOR_STANDARD_RECOMMENDATIONS] DROP CONSTRAINT [FK_SECTOR_STANDARD_RECOMMENDATIONS_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[CUSTOM_STANDARD_BASE_STANDARD]'
GO
ALTER TABLE [dbo].[CUSTOM_STANDARD_BASE_STANDARD] DROP CONSTRAINT [FK_CUSTOM_STANDARD_BASE_STANDARD_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CUSTOM_STANDARD_BASE_STANDARD] DROP CONSTRAINT [FK_CUSTOM_STANDARD_BASE_STANDARD_SETS1]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[SET_FILES]'
GO
ALTER TABLE [dbo].[SET_FILES] DROP CONSTRAINT [FK_SET_FILES_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SET_FILES] DROP CONSTRAINT [FK_SET_FILES_GEN_FILE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[STANDARD_CATEGORY_SEQUENCE]'
GO
ALTER TABLE [dbo].[STANDARD_CATEGORY_SEQUENCE] DROP CONSTRAINT [FK_STANDARD_CATEGORY_SEQUENCE_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_CATEGORY_SEQUENCE] DROP CONSTRAINT [FK_STANDARD_CATEGORY_SEQUENCE_STANDARD_CATEGORY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS]'
GO
ALTER TABLE [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS] DROP CONSTRAINT [FK_UNIVERSAL_SUB_CATEGORY_HEADINGS_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS] DROP CONSTRAINT [FK_UNIVERSAL_SUB_CATEGORY_HEADINGS_QUESTION_GROUP_HEADING]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS] DROP CONSTRAINT [FK_UNIVERSAL_SUB_CATEGORY_HEADINGS_UNIVERSAL_SUB_CATEGORIES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping foreign keys from [dbo].[STANDARD_TO_UNIVERSAL_MAP]'
GO
ALTER TABLE [dbo].[STANDARD_TO_UNIVERSAL_MAP] DROP CONSTRAINT [FK_STANDARD_TO_UNIVERSAL_MAP_STANDARD_SPECIFIC_LEVEL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_TO_UNIVERSAL_MAP] DROP CONSTRAINT [FK_STANDARD_TO_UNIVERSAL_MAP_UNIVERSAL_SAL_LEVEL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[ASSESSMENTS_REQUIRED_DOCUMENTATION]'
GO
ALTER TABLE [dbo].[ASSESSMENTS_REQUIRED_DOCUMENTATION] DROP CONSTRAINT [CK_ASSESSMENTS_REQUIRED_DOCUMENTATION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[NIST_SAL_QUESTION_ANSWERS]'
GO
ALTER TABLE [dbo].[NIST_SAL_QUESTION_ANSWERS] DROP CONSTRAINT [CK_NIST_SAL_QUESTION_ANSWERS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[ADDRESS]'
GO
ALTER TABLE [dbo].[ADDRESS] DROP CONSTRAINT [PK_ADDRESS_1]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[AGGREGATION_TYPES]'
GO
ALTER TABLE [dbo].[AGGREGATION_TYPES] DROP CONSTRAINT [PK_AGGREGATION_TYPES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[ANALYTICS_MATURITY_GROUPINGS]'
GO
ALTER TABLE [dbo].[ANALYTICS_MATURITY_GROUPINGS] DROP CONSTRAINT [PK_ANALYTICS_MATURITY_GROUPINGS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[ANSWER_LOOKUP]'
GO
ALTER TABLE [dbo].[ANSWER_LOOKUP] DROP CONSTRAINT [PK_Answer_Lookup]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[ANSWER_ORDER]'
GO
ALTER TABLE [dbo].[ANSWER_ORDER] DROP CONSTRAINT [PK_ANSWER_ORDER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[APP_CODE]'
GO
ALTER TABLE [dbo].[APP_CODE] DROP CONSTRAINT [PK_APP_CODE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[ASSESSMENT_SELECTED_LEVELS]'
GO
ALTER TABLE [dbo].[ASSESSMENT_SELECTED_LEVELS] DROP CONSTRAINT [PK_ASSESSMENT_SELECTED_LEVELS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[AVAILABLE_STANDARDS]'
GO
ALTER TABLE [dbo].[AVAILABLE_STANDARDS] DROP CONSTRAINT [PK_AVAILABLE_STANDARDS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[CIS_CSI_BUDGET_BASES]'
GO
ALTER TABLE [dbo].[CIS_CSI_BUDGET_BASES] DROP CONSTRAINT [PK_CIS_CSI_BUDGET_BASES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[CIS_CSI_CUSTOMER_COUNTS]'
GO
ALTER TABLE [dbo].[CIS_CSI_CUSTOMER_COUNTS] DROP CONSTRAINT [PK_CIS_CSI_CUSTOMER_AMOUNTS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[CIS_CSI_STAFF_COUNTS]'
GO
ALTER TABLE [dbo].[CIS_CSI_STAFF_COUNTS] DROP CONSTRAINT [PK_CIS_CSI_STAFF_AMOUNTS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[CIS_CSI_USER_COUNTS]'
GO
ALTER TABLE [dbo].[CIS_CSI_USER_COUNTS] DROP CONSTRAINT [PK_CIS_CSI_USER_AMOUNTS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[CNSS_CIA_JUSTIFICATIONS]'
GO
ALTER TABLE [dbo].[CNSS_CIA_JUSTIFICATIONS] DROP CONSTRAINT [PK_CNSS_CIA_JUSTIFICATIONS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[CNSS_CIA_TYPES]'
GO
ALTER TABLE [dbo].[CNSS_CIA_TYPES] DROP CONSTRAINT [PK_CNSS_CIA_TYPES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[COMPONENT_FAMILY]'
GO
ALTER TABLE [dbo].[COMPONENT_FAMILY] DROP CONSTRAINT [PK_ComponentFamily]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[COMPONENT_NAMES_LEGACY]'
GO
ALTER TABLE [dbo].[COMPONENT_NAMES_LEGACY] DROP CONSTRAINT [PK_COMPONENT_NAMES_LEGACY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[COMPONENT_SYMBOLS_GM_TO_CSET]'
GO
ALTER TABLE [dbo].[COMPONENT_SYMBOLS_GM_TO_CSET] DROP CONSTRAINT [PK_COMPONENT_SYMBOLS_GM_TO_CSET]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[CUSTOM_BASE_STANDARDS]'
GO
ALTER TABLE [dbo].[CUSTOM_BASE_STANDARDS] DROP CONSTRAINT [PK_CUSTOM_BASE_STANDARDS_1]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[CUSTOM_QUESTIONAIRES]'
GO
ALTER TABLE [dbo].[CUSTOM_QUESTIONAIRES] DROP CONSTRAINT [PK_CUSTOM_QUESTIONAIRES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[CUSTOM_QUESTIONAIRE_QUESTIONS]'
GO
ALTER TABLE [dbo].[CUSTOM_QUESTIONAIRE_QUESTIONS] DROP CONSTRAINT [PK_CUSTOM_QUESTIONAIRE_QUESTIONS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[DEMOGRAPHICS_ASSET_VALUES]'
GO
ALTER TABLE [dbo].[DEMOGRAPHICS_ASSET_VALUES] DROP CONSTRAINT [PK_DEMOGRAPHICS_ASSET_VALUES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[DEMOGRAPHICS_SIZE]'
GO
ALTER TABLE [dbo].[DEMOGRAPHICS_SIZE] DROP CONSTRAINT [PK_DemographicsSize]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[DIAGRAM_CONTAINER_TYPES]'
GO
ALTER TABLE [dbo].[DIAGRAM_CONTAINER_TYPES] DROP CONSTRAINT [PK_DIAGRAM_CONTAINER_TYPES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[DIAGRAM_OBJECT_TYPES]'
GO
ALTER TABLE [dbo].[DIAGRAM_OBJECT_TYPES] DROP CONSTRAINT [PK_DIAGRAM_OBJECT_TYPES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[DIAGRAM_TYPES]'
GO
ALTER TABLE [dbo].[DIAGRAM_TYPES] DROP CONSTRAINT [PK_DIAGRAM_TYPES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[EXTRA_ACET_MAPPING]'
GO
ALTER TABLE [dbo].[EXTRA_ACET_MAPPING] DROP CONSTRAINT [PK_EXTRA_ACET_MAPPING]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[FILE_KEYWORDS]'
GO
ALTER TABLE [dbo].[FILE_KEYWORDS] DROP CONSTRAINT [FILE_KEYWORDS_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[FILE_REF_KEYS]'
GO
ALTER TABLE [dbo].[FILE_REF_KEYS] DROP CONSTRAINT [PK_FILE_REF_KEYS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[FINANCIAL_ASSESSMENT_VALUES]'
GO
ALTER TABLE [dbo].[FINANCIAL_ASSESSMENT_VALUES] DROP CONSTRAINT [PK_FINANCIAL_ASSESSMENT_VALUES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[FINANCIAL_ATTRIBUTES]'
GO
ALTER TABLE [dbo].[FINANCIAL_ATTRIBUTES] DROP CONSTRAINT [PK_FINANCIAL_ATTRIBUTES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[FINANCIAL_HOURS]'
GO
ALTER TABLE [dbo].[FINANCIAL_HOURS] DROP CONSTRAINT [PK_FINANCIAL_ASSESSMENT_HOURS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[FINANCIAL_HOURS_COMPONENT]'
GO
ALTER TABLE [dbo].[FINANCIAL_HOURS_COMPONENT] DROP CONSTRAINT [PK_FINANCIAL_HOURS_COMPONENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[FINANCIAL_REVIEWTYPE]'
GO
ALTER TABLE [dbo].[FINANCIAL_REVIEWTYPE] DROP CONSTRAINT [PK_FINANCIAL_REVIEWTYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[FRAMEWORK_TIERS]'
GO
ALTER TABLE [dbo].[FRAMEWORK_TIERS] DROP CONSTRAINT [PK_FRAMEWORK_TIERS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[FRAMEWORK_TIER_DEFINITIONS]'
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_DEFINITIONS] DROP CONSTRAINT [PK_FRAMEWORK_TIER_DEFINITIONS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[FRAMEWORK_TIER_TYPE]'
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_TYPE] DROP CONSTRAINT [PK_FRAMEWORK_TIER_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[FRAMEWORK_TIER_TYPE_ANSWER]'
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_TYPE_ANSWER] DROP CONSTRAINT [PK_FRAMEWORK_TIER_TYPE_ANSWER]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[GENERAL_SAL]'
GO
ALTER TABLE [dbo].[GENERAL_SAL] DROP CONSTRAINT [PK_GENERAL_SAL_1]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[GENERAL_SAL_DESCRIPTIONS]'
GO
ALTER TABLE [dbo].[GENERAL_SAL_DESCRIPTIONS] DROP CONSTRAINT [PK_GENERAL_SAL_DESCRIPTIONS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[GEN_SAL_NAMES]'
GO
ALTER TABLE [dbo].[GEN_SAL_NAMES] DROP CONSTRAINT [PK_GEN_SAL_NAMES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[GEN_SAL_WEIGHTS]'
GO
ALTER TABLE [dbo].[GEN_SAL_WEIGHTS] DROP CONSTRAINT [PK_GEN_SAL_WEIGHTS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[GLOBAL_PROPERTIES]'
GO
ALTER TABLE [dbo].[GLOBAL_PROPERTIES] DROP CONSTRAINT [PK_GlobalProperties]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[GLOSSARY]'
GO
ALTER TABLE [dbo].[GLOSSARY] DROP CONSTRAINT [PK_GLOSSARY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[INSTALLATION]'
GO
ALTER TABLE [dbo].[INSTALLATION] DROP CONSTRAINT [PK_INSTALLATION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[JWT]'
GO
ALTER TABLE [dbo].[JWT] DROP CONSTRAINT [PK_JWT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[LEVEL_BACKUP_ACET]'
GO
ALTER TABLE [dbo].[LEVEL_BACKUP_ACET] DROP CONSTRAINT [PK_LEVEL_BACKUP_ACET]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[LEVEL_BACKUP_ACET_QUESTIONS]'
GO
ALTER TABLE [dbo].[LEVEL_BACKUP_ACET_QUESTIONS] DROP CONSTRAINT [PK_LEVEL_BACKUP_ACET_QUESTIONS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[LEVEL_NAMES]'
GO
ALTER TABLE [dbo].[LEVEL_NAMES] DROP CONSTRAINT [PK_Level_Names]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[MATURITY_POSSIBLE_ANSWERS]'
GO
ALTER TABLE [dbo].[MATURITY_POSSIBLE_ANSWERS] DROP CONSTRAINT [PK_MATURITY_POSSIBLE_ANSWERS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[MATURITY_QUESTIONS]'
GO
ALTER TABLE [dbo].[MATURITY_QUESTIONS] DROP CONSTRAINT [PK__MATURITY__EBDCEAE635AFA091]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[MATURITY_QUESTION_TYPES]'
GO
ALTER TABLE [dbo].[MATURITY_QUESTION_TYPES] DROP CONSTRAINT [PK_MATURITY_QUESTION_TYPES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[MATURITY_REFERENCES]'
GO
ALTER TABLE [dbo].[MATURITY_REFERENCES] DROP CONSTRAINT [PK_MATURITY_REFERENCES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[MATURITY_SOURCE_FILES]'
GO
ALTER TABLE [dbo].[MATURITY_SOURCE_FILES] DROP CONSTRAINT [PK_MATURITY_SOURCE_FILES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[NAVIGATION_STATE]'
GO
ALTER TABLE [dbo].[NAVIGATION_STATE] DROP CONSTRAINT [PK_NAVIGATION_STATE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[NCSF_FUNCTIONS]'
GO
ALTER TABLE [dbo].[NCSF_FUNCTIONS] DROP CONSTRAINT [PK_NCSF_FUNCTIONS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[NEW_QUESTION]'
GO
ALTER TABLE [dbo].[NEW_QUESTION] DROP CONSTRAINT [PK_All_Question_TEMP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[NEW_QUESTION_LEVELS]'
GO
ALTER TABLE [dbo].[NEW_QUESTION_LEVELS] DROP CONSTRAINT [PK_NEW_QUESTION_LEVELS_1]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[NEW_REQUIREMENT]'
GO
ALTER TABLE [dbo].[NEW_REQUIREMENT] DROP CONSTRAINT [PK_NEW_REQUIREMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[NIST_SAL_INFO_TYPES]'
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES] DROP CONSTRAINT [PK_NIST_SAL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[NIST_SAL_INFO_TYPES_DEFAULTS]'
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES_DEFAULTS] DROP CONSTRAINT [PK_NIST_SAL_INFO_TYPES_DEFAULTS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[REPORT_STANDARDS_SELECTION]'
GO
ALTER TABLE [dbo].[REPORT_STANDARDS_SELECTION] DROP CONSTRAINT [PK_REPORT_STANDARDS_SELECTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[REQUIREMENT_LEVELS]'
GO
ALTER TABLE [dbo].[REQUIREMENT_LEVELS] DROP CONSTRAINT [PK_REQUIREMENT_LEVELS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[REQUIREMENT_LEVEL_TYPE]'
GO
ALTER TABLE [dbo].[REQUIREMENT_LEVEL_TYPE] DROP CONSTRAINT [PK_REQUIREMENT_LEVEL_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[REQUIREMENT_QUESTIONS_SETS]'
GO
ALTER TABLE [dbo].[REQUIREMENT_QUESTIONS_SETS] DROP CONSTRAINT [PK_REQUIREMENT_QUESTIONS_SETS_1]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[REQUIREMENT_REFERENCES]'
GO
ALTER TABLE [dbo].[REQUIREMENT_REFERENCES] DROP CONSTRAINT [PK_REQUIREMENT_REFERENCES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[REQUIREMENT_SETS]'
GO
ALTER TABLE [dbo].[REQUIREMENT_SETS] DROP CONSTRAINT [PK_QUESTION_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[REQUIREMENT_SOURCE_FILES]'
GO
ALTER TABLE [dbo].[REQUIREMENT_SOURCE_FILES] DROP CONSTRAINT [PK_REQUIREMENT_SOURCE_FILES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[SAL_DETERMINATION_TYPES]'
GO
ALTER TABLE [dbo].[SAL_DETERMINATION_TYPES] DROP CONSTRAINT [PK_SAL_DETERMINATION_TYPES_1]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[SECTOR_STANDARD_RECOMMENDATIONS]'
GO
ALTER TABLE [dbo].[SECTOR_STANDARD_RECOMMENDATIONS] DROP CONSTRAINT [PK_SECTOR_STANDARD_RECOMMENDATIONS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[SETS]'
GO
ALTER TABLE [dbo].[SETS] DROP CONSTRAINT [PK_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[SET_FILES]'
GO
ALTER TABLE [dbo].[SET_FILES] DROP CONSTRAINT [PK_SET_FILES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[SHAPE_TYPES]'
GO
ALTER TABLE [dbo].[SHAPE_TYPES] DROP CONSTRAINT [PK_Shape_Types]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[SP80053_FAMILY_ABBREVIATIONS]'
GO
ALTER TABLE [dbo].[SP80053_FAMILY_ABBREVIATIONS] DROP CONSTRAINT [PK_NEW_53_FAMILY_ABBREVIATIONS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[STANDARD_CATEGORY]'
GO
ALTER TABLE [dbo].[STANDARD_CATEGORY] DROP CONSTRAINT [PK_STANDARD_CATEGORY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[STANDARD_CATEGORY_SEQUENCE]'
GO
ALTER TABLE [dbo].[STANDARD_CATEGORY_SEQUENCE] DROP CONSTRAINT [PK_STANDARD_CATEGORY_SEQUENCE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[STANDARD_SOURCE_FILE]'
GO
ALTER TABLE [dbo].[STANDARD_SOURCE_FILE] DROP CONSTRAINT [PK_Standard_Source_File]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[STANDARD_SPECIFIC_LEVEL]'
GO
ALTER TABLE [dbo].[STANDARD_SPECIFIC_LEVEL] DROP CONSTRAINT [PK_STANDARD_SPECIFIC_LEVEL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[STANDARD_TO_UNIVERSAL_MAP]'
GO
ALTER TABLE [dbo].[STANDARD_TO_UNIVERSAL_MAP] DROP CONSTRAINT [PK_STANDARD_TO_UNIVERSAL_MAP]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[SUB_CATEGORY_ANSWERS]'
GO
ALTER TABLE [dbo].[SUB_CATEGORY_ANSWERS] DROP CONSTRAINT [PK_SUB_CATEGORY_ANSWERS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[UNIVERSAL_AREA]'
GO
ALTER TABLE [dbo].[UNIVERSAL_AREA] DROP CONSTRAINT [UNIVERSAL_AREA_PK]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[UNIVERSAL_SAL_LEVEL]'
GO
ALTER TABLE [dbo].[UNIVERSAL_SAL_LEVEL] DROP CONSTRAINT [PK_UNIVERSAL_SAL_LEVEL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[UNIVERSAL_SUB_CATEGORIES]'
GO
ALTER TABLE [dbo].[UNIVERSAL_SUB_CATEGORIES] DROP CONSTRAINT [PK_UNIVERSAL_SUB_CATEGORIES]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS]'
GO
ALTER TABLE [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS] DROP CONSTRAINT [PK_UNIVERSAL_SUB_CATEGORY_HEADINGS_1]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[USERS]'
GO
ALTER TABLE [dbo].[USERS] DROP CONSTRAINT [IX_USERS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[VISIO_MAPPING]'
GO
ALTER TABLE [dbo].[VISIO_MAPPING] DROP CONSTRAINT [PK_VISIO_MAPPING]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[ANSWER]'
GO
ALTER TABLE [dbo].[ANSWER] DROP CONSTRAINT [DF_ANSWER_Answer_Text]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[ASSESSMENTS_REQUIRED_DOCUMENTATION]'
GO
ALTER TABLE [dbo].[ASSESSMENTS_REQUIRED_DOCUMENTATION] DROP CONSTRAINT [DF_ASSESSMENTS_REQUIRED_DOCUMENTATION_Answer]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[COMPONENT_SYMBOLS]'
GO
ALTER TABLE [dbo].[COMPONENT_SYMBOLS] DROP CONSTRAINT [DF_COMPONENT_SYMBOLS_Long_Name]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[DEMOGRAPHICS_ASSET_VALUES]'
GO
ALTER TABLE [dbo].[DEMOGRAPHICS_ASSET_VALUES] DROP CONSTRAINT [DF_DEMOGRAPHICS_ASSET_VALUES_AppCode]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[DIAGRAM_CONTAINER]'
GO
ALTER TABLE [dbo].[DIAGRAM_CONTAINER] DROP CONSTRAINT [DF_DIAGRAM_CONTAINER_Universal_Sal_Level]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[GEN_FILE]'
GO
ALTER TABLE [dbo].[GEN_FILE] DROP CONSTRAINT [DF_GEN_FILE_Doc_Num]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[IRP]'
GO
ALTER TABLE [dbo].[IRP] DROP CONSTRAINT [df_Risk_Type]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[MATURITY_GROUPINGS]'
GO
ALTER TABLE [dbo].[MATURITY_GROUPINGS] DROP CONSTRAINT [DF_MATURITY_GROUPINGS_Unique_Node_Id]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[NEW_QUESTION]'
GO
ALTER TABLE [dbo].[NEW_QUESTION] DROP CONSTRAINT [DF_NEW_QUESTION_Universal_Sal_Level]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[NIST_SAL_QUESTION_ANSWERS]'
GO
ALTER TABLE [dbo].[NIST_SAL_QUESTION_ANSWERS] DROP CONSTRAINT [DF_NIST_SAL_QUESTION_ANSWERS_Question_Answer]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[SETS]'
GO
ALTER TABLE [dbo].[SETS] DROP CONSTRAINT [DF_SETS_IsACET]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[SETS]'
GO
ALTER TABLE [dbo].[SETS] DROP CONSTRAINT [DF_SETS_Short_Name]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[STANDARD_SELECTION]'
GO
ALTER TABLE [dbo].[STANDARD_SELECTION] DROP CONSTRAINT [DF_STANDARD_SELECTION_Application_Mode]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[STANDARD_SELECTION]'
GO
ALTER TABLE [dbo].[STANDARD_SELECTION] DROP CONSTRAINT [DF_STANDARD_SELECTION_Selected_Sal_Level]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[STANDARD_SPECIFIC_LEVEL]'
GO
ALTER TABLE [dbo].[STANDARD_SPECIFIC_LEVEL] DROP CONSTRAINT [DF_STANDARD_SPECIFIC_LEVEL_Standard]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[STANDARD_SPECIFIC_LEVEL]'
GO
ALTER TABLE [dbo].[STANDARD_SPECIFIC_LEVEL] DROP CONSTRAINT [DF_STANDARD_SPECIFIC_LEVEL_Display_Name]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[SUB_CATEGORY_ANSWERS]'
GO
ALTER TABLE [dbo].[SUB_CATEGORY_ANSWERS] DROP CONSTRAINT [DF_SUB_CATEGORY_ANSWERS_Component_Id]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping constraints from [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS]'
GO
ALTER TABLE [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS] DROP CONSTRAINT [DF_UNIVERSAL_SUB_CATEGORY_HEADINGS_Set_Name]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping index [IX_CIS_CSI_DEFINING_SYSTEMS] from [dbo].[CIS_CSI_DEFINING_SYSTEMS]'
GO
DROP INDEX [IX_CIS_CSI_DEFINING_SYSTEMS] ON [dbo].[CIS_CSI_DEFINING_SYSTEMS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping index [IX_COMPONENT_SYMBOLS] from [dbo].[COMPONENT_SYMBOLS]'
GO
DROP INDEX [IX_COMPONENT_SYMBOLS] ON [dbo].[COMPONENT_SYMBOLS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping index [IX_COMPONENT_SYMBOLS_1] from [dbo].[COMPONENT_SYMBOLS]'
GO
DROP INDEX [IX_COMPONENT_SYMBOLS_1] ON [dbo].[COMPONENT_SYMBOLS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping index [IX_GEN_SAL_WEIGHTS] from [dbo].[GEN_SAL_WEIGHTS]'
GO
DROP INDEX [IX_GEN_SAL_WEIGHTS] ON [dbo].[GEN_SAL_WEIGHTS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping index [IX_MATURITY_MODELS] from [dbo].[MATURITY_MODELS]'
GO
DROP INDEX [IX_MATURITY_MODELS] ON [dbo].[MATURITY_MODELS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping index [IX_NCSF_Category] from [dbo].[NCSF_CATEGORY]'
GO
DROP INDEX [IX_NCSF_Category] ON [dbo].[NCSF_CATEGORY]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping index [IX_NEW_QUESTION] from [dbo].[NEW_QUESTION]'
GO
DROP INDEX [IX_NEW_QUESTION] ON [dbo].[NEW_QUESTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping index [IX_NEW_QUESTION_1] from [dbo].[NEW_QUESTION]'
GO
DROP INDEX [IX_NEW_QUESTION_1] ON [dbo].[NEW_QUESTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping index [IX_NEW_QUESTION_SETS] from [dbo].[NEW_QUESTION_SETS]'
GO
DROP INDEX [IX_NEW_QUESTION_SETS] ON [dbo].[NEW_QUESTION_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping index [IX_Parameters] from [dbo].[PARAMETERS]'
GO
DROP INDEX [IX_Parameters] ON [dbo].[PARAMETERS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping index [IX_QUESTION_GROUP_TYPE] from [dbo].[QUESTION_GROUP_TYPE]'
GO
DROP INDEX [IX_QUESTION_GROUP_TYPE] ON [dbo].[QUESTION_GROUP_TYPE]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping index [IX_REQUIRED_DOCUMENTATION_HEADERS] from [dbo].[REQUIRED_DOCUMENTATION_HEADERS]'
GO
DROP INDEX [IX_REQUIRED_DOCUMENTATION_HEADERS] ON [dbo].[REQUIRED_DOCUMENTATION_HEADERS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping index [IX_SECTOR] from [dbo].[SECTOR]'
GO
DROP INDEX [IX_SECTOR] ON [dbo].[SECTOR]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping index [IX_UNIVERSAL_SAL_LEVEL] from [dbo].[UNIVERSAL_SAL_LEVEL]'
GO
DROP INDEX [IX_UNIVERSAL_SAL_LEVEL] ON [dbo].[UNIVERSAL_SAL_LEVEL]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping [dbo].[ParametersNeedingFixed]'
GO
IF OBJECT_ID(N'[dbo].[ParametersNeedingFixed]', N'U') IS NOT NULL     
	DROP TABLE [dbo].[ParametersNeedingFixed]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Dropping [dbo].[usp_CyOTEQuestionsAnswers]'
GO
DROP PROCEDURE [dbo].[usp_CyOTEQuestionsAnswers]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[ASSESSMENTS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENTS] ALTER COLUMN [Alias] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENTS] ALTER COLUMN [CreditUnionName] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENTS] ALTER COLUMN [Charter] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENTS] ALTER COLUMN [Assets] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENTS] ALTER COLUMN [IRPTotalOverrideReason] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENTS] ALTER COLUMN [Diagram_Image] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[DOCUMENT_FILE]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DOCUMENT_FILE] ALTER COLUMN [Path] [nvarchar] (3990) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DOCUMENT_FILE] ALTER COLUMN [Title] [nvarchar] (3990) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DOCUMENT_FILE] ALTER COLUMN [FileMd5] [nvarchar] (32) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DOCUMENT_FILE] ALTER COLUMN [ContentType] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DOCUMENT_FILE] ALTER COLUMN [Name] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[MATURITY_GROUPINGS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_GROUPINGS] ALTER COLUMN [Title] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_GROUPINGS] ALTER COLUMN [Description] [nvarchar] (2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_GROUPINGS] ALTER COLUMN [Title_Id] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_GROUPINGS] ALTER COLUMN [Abbreviation] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_GROUPINGS] ALTER COLUMN [Title_Prefix] [nvarchar] (20) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[MATURITY_GROUPINGS]'
GO
ALTER TABLE [dbo].[MATURITY_GROUPINGS] ADD CONSTRAINT [DF_MATURITY_GROUPINGS_Unique_Node_Id] DEFAULT (NEXT VALUE FOR [MaturityNodeSequence]) FOR [Title_Id]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Rebuilding [dbo].[MATURITY_QUESTIONS]'
GO
CREATE TABLE [dbo].[RG_Recovery_1_MATURITY_QUESTIONS]
(
[Mat_Question_Id] [int] NOT NULL IDENTITY(1, 1),
[Question_Title] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Question_Text] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[Supplemental_Info] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Category] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Sub_Category] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Maturity_Level_Id] [int] NOT NULL,
[Sequence] [int] NOT NULL,
[Text_Hash] AS (CONVERT([varbinary](20),hashbytes('SHA1',[Question_Text]),(0))) PERSISTED,
[Maturity_Model_Id] [int] NOT NULL,
[Parent_Question_Id] [int] NULL,
[Ranking] [int] NULL,
[Grouping_Id] [int] NULL,
[Examination_Approach] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Short_Name] [nvarchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Mat_Question_Type] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Parent_Option_Id] [int] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
SET IDENTITY_INSERT [dbo].[RG_Recovery_1_MATURITY_QUESTIONS] ON
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[RG_Recovery_1_MATURITY_QUESTIONS]([Mat_Question_Id], [Question_Title], [Question_Text], [Supplemental_Info], [Category], [Sub_Category], [Maturity_Level_Id], [Sequence], [Maturity_Model_Id], [Parent_Question_Id], [Ranking], [Grouping_Id], [Examination_Approach], [Short_Name], [Mat_Question_Type], [Parent_Option_Id]) SELECT [Mat_Question_Id], [Question_Title], [Question_Text], [Supplemental_Info], [Category], [Sub_Category], [Maturity_Level], [Sequence], [Maturity_Model_Id], [Parent_Question_Id], [Ranking], [Grouping_Id], [Examination_Approach], [Short_Name], [Mat_Question_Type], [Parent_Option_Id] FROM [dbo].[MATURITY_QUESTIONS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
SET IDENTITY_INSERT [dbo].[RG_Recovery_1_MATURITY_QUESTIONS] OFF
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @idVal BIGINT
SELECT @idVal = IDENT_CURRENT(N'[dbo].[MATURITY_QUESTIONS]')
IF @idVal IS NOT NULL
    DBCC CHECKIDENT(N'[dbo].[RG_Recovery_1_MATURITY_QUESTIONS]', RESEED, @idVal)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[MATURITY_QUESTIONS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_rename N'[dbo].[RG_Recovery_1_MATURITY_QUESTIONS]', N'MATURITY_QUESTIONS', N'OBJECT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK__MATURITY__EBDCEAE635AFA091] on [dbo].[MATURITY_QUESTIONS]'
GO
ALTER TABLE [dbo].[MATURITY_QUESTIONS] ADD CONSTRAINT [PK__MATURITY__EBDCEAE635AFA091] PRIMARY KEY CLUSTERED ([Mat_Question_Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[MATURITY_MODELS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_MODELS] ALTER COLUMN [Model_Name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_MODELS] ALTER COLUMN [Model_Description] [nvarchar] (1500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_MODELS] ALTER COLUMN [Model_Title] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_MODELS] ALTER COLUMN [Questions_Alias] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_MODELS] ALTER COLUMN [Answer_Options] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_MATURITY_MODELS] on [dbo].[MATURITY_MODELS]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_MATURITY_MODELS] ON [dbo].[MATURITY_MODELS] ([Model_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[ANALYTICS_MATURITY_GROUPINGS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ANALYTICS_MATURITY_GROUPINGS] ALTER COLUMN [Question_Group] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ANALYTICS_MATURITY_GROUPINGS] on [dbo].[ANALYTICS_MATURITY_GROUPINGS]'
GO
ALTER TABLE [dbo].[ANALYTICS_MATURITY_GROUPINGS] ADD CONSTRAINT [PK_ANALYTICS_MATURITY_GROUPINGS] PRIMARY KEY CLUSTERED ([Maturity_Model_Id], [Maturity_Question_Id], [Question_Group])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[ASSESSMENT_DIAGRAM_COMPONENTS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_DIAGRAM_COMPONENTS] ALTER COLUMN [label] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_DIAGRAM_COMPONENTS] ALTER COLUMN [DrawIO_id] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_DIAGRAM_COMPONENTS] ALTER COLUMN [Parent_DrawIO_Id] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[ANSWER]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ANSWER] ALTER COLUMN [Comment] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ANSWER] ALTER COLUMN [Alternate_Justification] [nvarchar] (2048) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ANSWER] ALTER COLUMN [Answer_Text] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ANSWER] ALTER COLUMN [Custom_Question_Guid] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ANSWER] ALTER COLUMN [FeedBack] [nvarchar] (2048) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ANSWER] ALTER COLUMN [Free_Response_Answer] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[ANSWER]'
GO
ALTER TABLE [dbo].[ANSWER] ADD CONSTRAINT [DF_ANSWER_Answer_Text] DEFAULT ('U') FOR [Answer_Text]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[GEN_FILE]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GEN_FILE] ALTER COLUMN [File_Name] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GEN_FILE] ALTER COLUMN [Title] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GEN_FILE] ALTER COLUMN [Name] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GEN_FILE] ALTER COLUMN [Doc_Num] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GEN_FILE] ALTER COLUMN [Comments] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GEN_FILE] ALTER COLUMN [Description] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GEN_FILE] ALTER COLUMN [Short_Name] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GEN_FILE] ALTER COLUMN [Doc_Version] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GEN_FILE] ALTER COLUMN [Summary] [nvarchar] (2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GEN_FILE] ALTER COLUMN [Source_Type] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[GEN_FILE]'
GO
ALTER TABLE [dbo].[GEN_FILE] ADD CONSTRAINT [DF_GEN_FILE_Doc_Num] DEFAULT ('NONE') FOR [Doc_Num]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[FILE_KEYWORDS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FILE_KEYWORDS] ALTER COLUMN [Keyword] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [FILE_KEYWORDS_PK] on [dbo].[FILE_KEYWORDS]'
GO
ALTER TABLE [dbo].[FILE_KEYWORDS] ADD CONSTRAINT [FILE_KEYWORDS_PK] PRIMARY KEY CLUSTERED ([Gen_File_Id], [Keyword])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[AGGREGATION_INFORMATION]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[AGGREGATION_INFORMATION] ALTER COLUMN [Aggregation_Mode] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[AGGREGATION_ASSESSMENT]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[AGGREGATION_ASSESSMENT] ALTER COLUMN [Alias] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[ASSESSMENT_IRP]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_IRP] ALTER COLUMN [Comment] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[ASSESSMENT_IRP_HEADER]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_IRP_HEADER] ALTER COLUMN [COMMENT] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[IRP_HEADER]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[IRP_HEADER] ALTER COLUMN [Header] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[IRP]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[IRP] ALTER COLUMN [Risk_1_Description] [nvarchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[IRP] ALTER COLUMN [Risk_2_Description] [nvarchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[IRP] ALTER COLUMN [Risk_3_Description] [nvarchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[IRP] ALTER COLUMN [Risk_4_Description] [nvarchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[IRP] ALTER COLUMN [Risk_5_Description] [nvarchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[IRP] ALTER COLUMN [Validation_Approach] [nvarchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[IRP] ALTER COLUMN [Description] [nvarchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[IRP] ALTER COLUMN [DescriptionComment] [nvarchar] (1300) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[IRP] ALTER COLUMN [Risk_Type] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[IRP]'
GO
ALTER TABLE [dbo].[IRP] ADD CONSTRAINT [df_Risk_Type] DEFAULT ('IRP') FOR [Risk_Type]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[MATURITY_LEVELS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_LEVELS] ALTER COLUMN [Level_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[USER_DETAIL_INFORMATION]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USER_DETAIL_INFORMATION] ALTER COLUMN [CellPhone] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USER_DETAIL_INFORMATION] ALTER COLUMN [FirstName] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USER_DETAIL_INFORMATION] ALTER COLUMN [LastName] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USER_DETAIL_INFORMATION] ALTER COLUMN [HomePhone] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USER_DETAIL_INFORMATION] ALTER COLUMN [OfficePhone] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USER_DETAIL_INFORMATION] ALTER COLUMN [ImagePath] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USER_DETAIL_INFORMATION] ALTER COLUMN [JobTitle] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USER_DETAIL_INFORMATION] ALTER COLUMN [Organization] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USER_DETAIL_INFORMATION] ALTER COLUMN [PrimaryEmail] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USER_DETAIL_INFORMATION] ALTER COLUMN [SecondaryEmail] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[ADDRESS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ADDRESS] ALTER COLUMN [PrimaryEmail] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ADDRESS] ALTER COLUMN [AddressType] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ADDRESS] ALTER COLUMN [City] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ADDRESS] ALTER COLUMN [Country] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ADDRESS] ALTER COLUMN [Line1] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ADDRESS] ALTER COLUMN [Line2] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ADDRESS] ALTER COLUMN [State] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ADDRESS] ALTER COLUMN [Zip] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ADDRESS_1] on [dbo].[ADDRESS]'
GO
ALTER TABLE [dbo].[ADDRESS] ADD CONSTRAINT [PK_ADDRESS_1] PRIMARY KEY CLUSTERED ([AddressType], [Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[AGGREGATION_TYPES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[AGGREGATION_TYPES] ALTER COLUMN [Aggregation_Mode] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_AGGREGATION_TYPES] on [dbo].[AGGREGATION_TYPES]'
GO
ALTER TABLE [dbo].[AGGREGATION_TYPES] ADD CONSTRAINT [PK_AGGREGATION_TYPES] PRIMARY KEY CLUSTERED ([Aggregation_Mode])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[ANSWER_LOOKUP]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ANSWER_LOOKUP] ALTER COLUMN [Answer_Text] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ANSWER_LOOKUP] ALTER COLUMN [Answer_Full_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_Answer_Lookup] on [dbo].[ANSWER_LOOKUP]'
GO
ALTER TABLE [dbo].[ANSWER_LOOKUP] ADD CONSTRAINT [PK_Answer_Lookup] PRIMARY KEY CLUSTERED ([Answer_Text])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[ANSWER_PROFILE]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ANSWER_PROFILE] ALTER COLUMN [ProfileName] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[ANSWER_CLONE]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ANSWER_CLONE] ALTER COLUMN [Comment] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ANSWER_CLONE] ALTER COLUMN [Alternate_Justification] [nvarchar] (2048) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ANSWER_CLONE] ALTER COLUMN [Answer_Text] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ANSWER_CLONE] ALTER COLUMN [Custom_Question_Guid] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ANSWER_CLONE] ALTER COLUMN [FeedBack] [nvarchar] (2048) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ANSWER_CLONE] ALTER COLUMN [Free_Response_Answer] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[MATURITY_ANSWER_OPTIONS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_ANSWER_OPTIONS] ADD
[Is_None] [bit] NOT NULL CONSTRAINT [DF__MATURITY___Is_No__259C7031] DEFAULT ((0))
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_ANSWER_OPTIONS] ALTER COLUMN [Option_Text] [nvarchar] (1000) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_ANSWER_OPTIONS] ALTER COLUMN [Mat_Option_Type] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_ANSWER_OPTIONS] ALTER COLUMN [Formula] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_ANSWER_OPTIONS] ALTER COLUMN [RiFormula] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[ASSESSMENT_ROLES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_ROLES] ALTER COLUMN [AssessmentRole] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[ASSESSMENT_CONTACTS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_CONTACTS] ALTER COLUMN [PrimaryEmail] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_CONTACTS] ALTER COLUMN [FirstName] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_CONTACTS] ALTER COLUMN [LastName] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_CONTACTS] ALTER COLUMN [Title] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_CONTACTS] ALTER COLUMN [Phone] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_CONTACTS] ALTER COLUMN [Site_Name] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_CONTACTS] ALTER COLUMN [Organization_Name] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_CONTACTS] ALTER COLUMN [Cell_Phone] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_CONTACTS] ALTER COLUMN [Reports_To] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_CONTACTS] ALTER COLUMN [Emergency_Communications_Protocol] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[USERS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USERS] ALTER COLUMN [PrimaryEmail] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USERS] ALTER COLUMN [Password] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USERS] ALTER COLUMN [Salt] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USERS] ALTER COLUMN [FirstName] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USERS] ALTER COLUMN [LastName] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[USERS]'
GO
ALTER TABLE [dbo].[USERS] ADD CONSTRAINT [IX_USERS] UNIQUE NONCLUSTERED ([PrimaryEmail])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[COMPONENT_SYMBOLS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[COMPONENT_SYMBOLS] ALTER COLUMN [File_Name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[COMPONENT_SYMBOLS] ALTER COLUMN [Component_Family_Name] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[COMPONENT_SYMBOLS] ALTER COLUMN [Abbreviation] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[COMPONENT_SYMBOLS] ALTER COLUMN [Symbol_Name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[COMPONENT_SYMBOLS] ALTER COLUMN [Search_Tags] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[COMPONENT_SYMBOLS]'
GO
ALTER TABLE [dbo].[COMPONENT_SYMBOLS] ADD CONSTRAINT [DF_COMPONENT_SYMBOLS_Long_Name] DEFAULT ('') FOR [Symbol_Name]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_COMPONENT_SYMBOLS] on [dbo].[COMPONENT_SYMBOLS]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_COMPONENT_SYMBOLS] ON [dbo].[COMPONENT_SYMBOLS] ([File_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_COMPONENT_SYMBOLS_1] on [dbo].[COMPONENT_SYMBOLS]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_COMPONENT_SYMBOLS_1] ON [dbo].[COMPONENT_SYMBOLS] ([Abbreviation])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[DIAGRAM_CONTAINER]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DIAGRAM_CONTAINER] ALTER COLUMN [ContainerType] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DIAGRAM_CONTAINER] ALTER COLUMN [Name] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DIAGRAM_CONTAINER] ALTER COLUMN [DrawIO_id] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DIAGRAM_CONTAINER] ALTER COLUMN [Universal_Sal_Level] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DIAGRAM_CONTAINER] ALTER COLUMN [Parent_Draw_IO_Id] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[DIAGRAM_CONTAINER]'
GO
ALTER TABLE [dbo].[DIAGRAM_CONTAINER] ADD CONSTRAINT [DF_DIAGRAM_CONTAINER_Universal_Sal_Level] DEFAULT ('L') FOR [Universal_Sal_Level]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[PARAMETER_ASSESSMENT]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PARAMETER_ASSESSMENT] ALTER COLUMN [Parameter_Value_Assessment] [nvarchar] (2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[PARAMETERS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PARAMETERS] ALTER COLUMN [Parameter_Name] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[LEVEL_NAMES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[LEVEL_NAMES] ALTER COLUMN [Level_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_Level_Names] on [dbo].[LEVEL_NAMES]'
GO
ALTER TABLE [dbo].[LEVEL_NAMES] ADD CONSTRAINT [PK_Level_Names] PRIMARY KEY CLUSTERED ([Level_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[ASSESSMENT_SELECTED_LEVELS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_SELECTED_LEVELS] ALTER COLUMN [Level_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENT_SELECTED_LEVELS] ALTER COLUMN [Standard_Specific_Sal_Level] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ASSESSMENT_SELECTED_LEVELS] on [dbo].[ASSESSMENT_SELECTED_LEVELS]'
GO
ALTER TABLE [dbo].[ASSESSMENT_SELECTED_LEVELS] ADD CONSTRAINT [PK_ASSESSMENT_SELECTED_LEVELS] PRIMARY KEY CLUSTERED ([Assessment_Id], [Level_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[STANDARD_SELECTION]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_SELECTION] ALTER COLUMN [Application_Mode] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_SELECTION] ALTER COLUMN [Selected_Sal_Level] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_SELECTION] ALTER COLUMN [Last_Sal_Determination_Type] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_SELECTION] ALTER COLUMN [Sort_Set_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[STANDARD_SELECTION]'
GO
ALTER TABLE [dbo].[STANDARD_SELECTION] ADD CONSTRAINT [DF_STANDARD_SELECTION_Application_Mode] DEFAULT ('Questions Based') FOR [Application_Mode]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_SELECTION] ADD CONSTRAINT [DF_STANDARD_SELECTION_Selected_Sal_Level] DEFAULT ('Low') FOR [Selected_Sal_Level]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[ASSESSMENTS_REQUIRED_DOCUMENTATION]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENTS_REQUIRED_DOCUMENTATION] ALTER COLUMN [Answer] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ASSESSMENTS_REQUIRED_DOCUMENTATION] ALTER COLUMN [Comment] [nvarchar] (1024) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[ASSESSMENTS_REQUIRED_DOCUMENTATION]'
GO
ALTER TABLE [dbo].[ASSESSMENTS_REQUIRED_DOCUMENTATION] ADD CONSTRAINT [DF_ASSESSMENTS_REQUIRED_DOCUMENTATION_Answer] DEFAULT ('U') FOR [Answer]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[REQUIRED_DOCUMENTATION]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIRED_DOCUMENTATION] ALTER COLUMN [Number] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIRED_DOCUMENTATION] ALTER COLUMN [Document_Description] [nvarchar] (4000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[AVAILABLE_STANDARDS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[AVAILABLE_STANDARDS] ALTER COLUMN [Set_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_AVAILABLE_STANDARDS] on [dbo].[AVAILABLE_STANDARDS]'
GO
ALTER TABLE [dbo].[AVAILABLE_STANDARDS] ADD CONSTRAINT [PK_AVAILABLE_STANDARDS] PRIMARY KEY CLUSTERED ([Assessment_Id], [Set_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[SETS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SETS] DROP
COLUMN [IsACET]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SETS] ALTER COLUMN [Set_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SETS] ALTER COLUMN [Full_Name] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SETS] ALTER COLUMN [Short_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SETS] ALTER COLUMN [Old_Std_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SETS] ALTER COLUMN [Standard_ToolTip] [nvarchar] (800) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SETS] ALTER COLUMN [Upgrade_Set_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[SETS]'
GO
ALTER TABLE [dbo].[SETS] ADD CONSTRAINT [DF_SETS_Short_Name] DEFAULT ('NO SHORT NAME') FOR [Short_Name]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_SETS] on [dbo].[SETS]'
GO
ALTER TABLE [dbo].[SETS] ADD CONSTRAINT [PK_SETS] PRIMARY KEY CLUSTERED ([Set_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[CATALOG_RECOMMENDATIONS_HEADINGS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CATALOG_RECOMMENDATIONS_HEADINGS] ALTER COLUMN [Heading_Name] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] ALTER COLUMN [Critical_Service_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] ALTER COLUMN [Critical_Service_Description] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] ALTER COLUMN [IT_ICS_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] ALTER COLUMN [Multi_Site_Description] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] ALTER COLUMN [Budget_Basis] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] ALTER COLUMN [Authorized_Organizational_User_Count] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] ALTER COLUMN [Authorized_Non_Organizational_User_Count] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] ALTER COLUMN [Customers_Count] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] ALTER COLUMN [IT_ICS_Staff_Count] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] ALTER COLUMN [Cybersecurity_IT_ICS_Staff_Count] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] ALTER COLUMN [Motivation_CRR_Description] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] ALTER COLUMN [Motivation_RRAP_Description] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] ALTER COLUMN [Motivation_Organization_Request_Description] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] ALTER COLUMN [Motivation_Law_Enforcement_Description] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] ALTER COLUMN [Motivation_Direct_Threats_Description] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] ALTER COLUMN [Motivation_Special_Event_Description] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] ALTER COLUMN [Motivation_Other_Description] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] ALTER COLUMN [Parent_Organization] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] ALTER COLUMN [Organization_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] ALTER COLUMN [Site_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] ALTER COLUMN [Street_Address] [nvarchar] (75) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] ALTER COLUMN [CIKR_Sector] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] ALTER COLUMN [Sub_Sector] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] ALTER COLUMN [IT_ICS_Staff_Count] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] ALTER COLUMN [Cybersecurity_IT_ICS_Staff_Count] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[CIS_CSI_STAFF_COUNTS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_STAFF_COUNTS] ALTER COLUMN [Staff_Count] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_CIS_CSI_STAFF_AMOUNTS] on [dbo].[CIS_CSI_STAFF_COUNTS]'
GO
ALTER TABLE [dbo].[CIS_CSI_STAFF_COUNTS] ADD CONSTRAINT [PK_CIS_CSI_STAFF_AMOUNTS] PRIMARY KEY CLUSTERED ([Staff_Count])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[CIS_CSI_SERVICE_COMPOSITION]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_COMPOSITION] ALTER COLUMN [Networks_Description] [nvarchar] (400) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_COMPOSITION] ALTER COLUMN [Services_Description] [nvarchar] (400) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_COMPOSITION] ALTER COLUMN [Applications_Description] [nvarchar] (400) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_COMPOSITION] ALTER COLUMN [Connections_Description] [nvarchar] (400) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_COMPOSITION] ALTER COLUMN [Personnel_Description] [nvarchar] (400) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_COMPOSITION] ALTER COLUMN [Other_Defining_System_Description] [nvarchar] (400) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[CIS_CSI_DEFINING_SYSTEMS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_DEFINING_SYSTEMS] ALTER COLUMN [Defining_System] [nvarchar] (400) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_CIS_CSI_DEFINING_SYSTEMS] on [dbo].[CIS_CSI_DEFINING_SYSTEMS]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_CIS_CSI_DEFINING_SYSTEMS] ON [dbo].[CIS_CSI_DEFINING_SYSTEMS] ([Defining_System])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[CIS_CSI_BUDGET_BASES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_BUDGET_BASES] ALTER COLUMN [Budget_Basis] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_CIS_CSI_BUDGET_BASES] on [dbo].[CIS_CSI_BUDGET_BASES]'
GO
ALTER TABLE [dbo].[CIS_CSI_BUDGET_BASES] ADD CONSTRAINT [PK_CIS_CSI_BUDGET_BASES] PRIMARY KEY CLUSTERED ([Budget_Basis])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[CIS_CSI_CUSTOMER_COUNTS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_CUSTOMER_COUNTS] ALTER COLUMN [Customer_Count] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_CIS_CSI_CUSTOMER_AMOUNTS] on [dbo].[CIS_CSI_CUSTOMER_COUNTS]'
GO
ALTER TABLE [dbo].[CIS_CSI_CUSTOMER_COUNTS] ADD CONSTRAINT [PK_CIS_CSI_CUSTOMER_AMOUNTS] PRIMARY KEY CLUSTERED ([Customer_Count])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[CIS_CSI_USER_COUNTS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CIS_CSI_USER_COUNTS] ALTER COLUMN [User_Count] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_CIS_CSI_USER_AMOUNTS] on [dbo].[CIS_CSI_USER_COUNTS]'
GO
ALTER TABLE [dbo].[CIS_CSI_USER_COUNTS] ADD CONSTRAINT [PK_CIS_CSI_USER_AMOUNTS] PRIMARY KEY CLUSTERED ([User_Count])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[CNSS_CIA_JUSTIFICATIONS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CNSS_CIA_JUSTIFICATIONS] ALTER COLUMN [CIA_Type] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CNSS_CIA_JUSTIFICATIONS] ALTER COLUMN [DropDownValueLevel] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CNSS_CIA_JUSTIFICATIONS] ALTER COLUMN [Justification] [nvarchar] (1500) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_CNSS_CIA_JUSTIFICATIONS] on [dbo].[CNSS_CIA_JUSTIFICATIONS]'
GO
ALTER TABLE [dbo].[CNSS_CIA_JUSTIFICATIONS] ADD CONSTRAINT [PK_CNSS_CIA_JUSTIFICATIONS] PRIMARY KEY CLUSTERED ([Assessment_Id], [CIA_Type])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[CNSS_CIA_TYPES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CNSS_CIA_TYPES] ALTER COLUMN [CIA_Type] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_CNSS_CIA_TYPES] on [dbo].[CNSS_CIA_TYPES]'
GO
ALTER TABLE [dbo].[CNSS_CIA_TYPES] ADD CONSTRAINT [PK_CNSS_CIA_TYPES] PRIMARY KEY CLUSTERED ([CIA_Type])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[COMPONENT_NAMES_LEGACY]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[COMPONENT_NAMES_LEGACY] ALTER COLUMN [Old_Symbol_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_COMPONENT_NAMES_LEGACY] on [dbo].[COMPONENT_NAMES_LEGACY]'
GO
ALTER TABLE [dbo].[COMPONENT_NAMES_LEGACY] ADD CONSTRAINT [PK_COMPONENT_NAMES_LEGACY] PRIMARY KEY CLUSTERED ([Old_Symbol_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[COMPONENT_QUESTIONS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[COMPONENT_QUESTIONS] ALTER COLUMN [Seq] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Rebuilding [dbo].[NEW_QUESTION]'
GO
CREATE TABLE [dbo].[RG_Recovery_2_NEW_QUESTION]
(
[Question_Id] [int] NOT NULL IDENTITY(1, 1),
[Std_Ref] [nvarchar] (55) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[Std_Ref_Number] [int] NOT NULL,
[Simple_Question] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Universal_Sal_Level] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL CONSTRAINT [DF_NEW_QUESTION_Universal_Sal_Level] DEFAULT ('none'),
[Weight] [int] NULL,
[Question_Group_Id] [int] NULL,
[Question_Group_Number] [int] NULL,
[Original_Set_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[Question_Hash] AS (CONVERT([varbinary](32),hashbytes('SHA1',left([Simple_Question],(8000))),(0))) PERSISTED,
[Ranking] [int] NULL,
[Heading_Pair_Id] [int] NOT NULL,
[Std_Ref_Id] AS (case  when [std_ref]=NULL then NULL else ([Std_Ref]+'.')+CONVERT([nvarchar](50),[Std_Ref_Number],(0)) end)
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
SET IDENTITY_INSERT [dbo].[RG_Recovery_2_NEW_QUESTION] ON
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[RG_Recovery_2_NEW_QUESTION]([Question_Id], [Std_Ref], [Std_Ref_Number], [Simple_Question], [Universal_Sal_Level], [Weight], [Question_Group_Id], [Question_Group_Number], [Original_Set_Name], [Ranking], [Heading_Pair_Id]) SELECT [Question_Id], [Std_Ref], [Std_Ref_Number], [Simple_Question], [Universal_Sal_Level], [Weight], [Question_Group_Id], [Question_Group_Number], [Original_Set_Name], [Ranking], [Heading_Pair_Id] FROM [dbo].[NEW_QUESTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
SET IDENTITY_INSERT [dbo].[RG_Recovery_2_NEW_QUESTION] OFF
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @idVal BIGINT
SELECT @idVal = IDENT_CURRENT(N'[dbo].[NEW_QUESTION]')
IF @idVal IS NOT NULL
    DBCC CHECKIDENT(N'[dbo].[RG_Recovery_2_NEW_QUESTION]', RESEED, @idVal)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[NEW_QUESTION]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_rename N'[dbo].[RG_Recovery_2_NEW_QUESTION]', N'NEW_QUESTION', N'OBJECT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_All_Question_TEMP] on [dbo].[NEW_QUESTION]'
GO
ALTER TABLE [dbo].[NEW_QUESTION] ADD CONSTRAINT [PK_All_Question_TEMP] PRIMARY KEY CLUSTERED ([Question_Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_NEW_QUESTION_1] on [dbo].[NEW_QUESTION]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_NEW_QUESTION_1] ON [dbo].[NEW_QUESTION] ([Question_Hash])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_NEW_QUESTION] on [dbo].[NEW_QUESTION]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_NEW_QUESTION] ON [dbo].[NEW_QUESTION] ([Std_Ref], [Std_Ref_Number])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[COMPONENT_FAMILY]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[COMPONENT_FAMILY] ALTER COLUMN [Component_Family_Name] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ComponentFamily] on [dbo].[COMPONENT_FAMILY]'
GO
ALTER TABLE [dbo].[COMPONENT_FAMILY] ADD CONSTRAINT [PK_ComponentFamily] PRIMARY KEY CLUSTERED ([Component_Family_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[SYMBOL_GROUPS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SYMBOL_GROUPS] ALTER COLUMN [Symbol_Group_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SYMBOL_GROUPS] ALTER COLUMN [Symbol_Group_Title] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[CUSTOM_QUESTIONAIRES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CUSTOM_QUESTIONAIRES] ALTER COLUMN [Custom_Questionaire_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CUSTOM_QUESTIONAIRES] ALTER COLUMN [Description] [nvarchar] (800) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CUSTOM_QUESTIONAIRES] ALTER COLUMN [Set_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_CUSTOM_QUESTIONAIRES] on [dbo].[CUSTOM_QUESTIONAIRES]'
GO
ALTER TABLE [dbo].[CUSTOM_QUESTIONAIRES] ADD CONSTRAINT [PK_CUSTOM_QUESTIONAIRES] PRIMARY KEY CLUSTERED ([Custom_Questionaire_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[CUSTOM_BASE_STANDARDS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CUSTOM_BASE_STANDARDS] ALTER COLUMN [Custom_Questionaire_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CUSTOM_BASE_STANDARDS] ALTER COLUMN [Base_Standard] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_CUSTOM_BASE_STANDARDS_1] on [dbo].[CUSTOM_BASE_STANDARDS]'
GO
ALTER TABLE [dbo].[CUSTOM_BASE_STANDARDS] ADD CONSTRAINT [PK_CUSTOM_BASE_STANDARDS_1] PRIMARY KEY CLUSTERED ([Custom_Questionaire_Name], [Base_Standard])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[CUSTOM_STANDARD_BASE_STANDARD]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CUSTOM_STANDARD_BASE_STANDARD] ALTER COLUMN [Custom_Questionaire_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CUSTOM_STANDARD_BASE_STANDARD] ALTER COLUMN [Base_Standard] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[CUSTOM_QUESTIONAIRE_QUESTIONS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CUSTOM_QUESTIONAIRE_QUESTIONS] ALTER COLUMN [Custom_Questionaire_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_CUSTOM_QUESTIONAIRE_QUESTIONS] on [dbo].[CUSTOM_QUESTIONAIRE_QUESTIONS]'
GO
ALTER TABLE [dbo].[CUSTOM_QUESTIONAIRE_QUESTIONS] ADD CONSTRAINT [PK_CUSTOM_QUESTIONAIRE_QUESTIONS] PRIMARY KEY CLUSTERED ([Custom_Questionaire_Name], [Question_Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[DEMOGRAPHICS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DEMOGRAPHICS] ALTER COLUMN [Size] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DEMOGRAPHICS] ALTER COLUMN [AssetValue] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DEMOGRAPHICS] ALTER COLUMN [OrganizationName] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DEMOGRAPHICS] ALTER COLUMN [Agency] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DEMOGRAPHICS] ALTER COLUMN [CriticalService] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[APP_CODE]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[APP_CODE] ALTER COLUMN [AppCode] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[APP_CODE] ALTER COLUMN [Description] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_APP_CODE] on [dbo].[APP_CODE]'
GO
ALTER TABLE [dbo].[APP_CODE] ADD CONSTRAINT [PK_APP_CODE] PRIMARY KEY CLUSTERED ([AppCode])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[DEMOGRAPHICS_ASSET_VALUES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DEMOGRAPHICS_ASSET_VALUES] ALTER COLUMN [AssetValue] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DEMOGRAPHICS_ASSET_VALUES] ALTER COLUMN [AppCode] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[DEMOGRAPHICS_ASSET_VALUES]'
GO
ALTER TABLE [dbo].[DEMOGRAPHICS_ASSET_VALUES] ADD CONSTRAINT [DF_DEMOGRAPHICS_ASSET_VALUES_AppCode] DEFAULT ('CSET') FOR [AppCode]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_DEMOGRAPHICS_ASSET_VALUES] on [dbo].[DEMOGRAPHICS_ASSET_VALUES]'
GO
ALTER TABLE [dbo].[DEMOGRAPHICS_ASSET_VALUES] ADD CONSTRAINT [PK_DEMOGRAPHICS_ASSET_VALUES] PRIMARY KEY CLUSTERED ([AssetValue])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[DEMOGRAPHICS_ORGANIZATION_TYPE]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DEMOGRAPHICS_ORGANIZATION_TYPE] ALTER COLUMN [OrganizationType] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[DEMOGRAPHICS_SIZE]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DEMOGRAPHICS_SIZE] ALTER COLUMN [Size] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DEMOGRAPHICS_SIZE] ALTER COLUMN [Description] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_DemographicsSize] on [dbo].[DEMOGRAPHICS_SIZE]'
GO
ALTER TABLE [dbo].[DEMOGRAPHICS_SIZE] ADD CONSTRAINT [PK_DemographicsSize] PRIMARY KEY CLUSTERED ([Size])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[SECTOR]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SECTOR] ALTER COLUMN [SectorName] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_SECTOR] on [dbo].[SECTOR]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_SECTOR] ON [dbo].[SECTOR] ([SectorName])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[SECTOR_INDUSTRY]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SECTOR_INDUSTRY] ALTER COLUMN [IndustryName] [nvarchar] (150) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[DIAGRAM_CONTAINER_TYPES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DIAGRAM_CONTAINER_TYPES] ALTER COLUMN [ContainerType] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_DIAGRAM_CONTAINER_TYPES] on [dbo].[DIAGRAM_CONTAINER_TYPES]'
GO
ALTER TABLE [dbo].[DIAGRAM_CONTAINER_TYPES] ADD CONSTRAINT [PK_DIAGRAM_CONTAINER_TYPES] PRIMARY KEY CLUSTERED ([ContainerType])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[DIAGRAM_OBJECT_TYPES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DIAGRAM_OBJECT_TYPES] ALTER COLUMN [Object_Type] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_DIAGRAM_OBJECT_TYPES] on [dbo].[DIAGRAM_OBJECT_TYPES]'
GO
ALTER TABLE [dbo].[DIAGRAM_OBJECT_TYPES] ADD CONSTRAINT [PK_DIAGRAM_OBJECT_TYPES] PRIMARY KEY CLUSTERED ([Object_Type])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[DIAGRAM_TYPES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DIAGRAM_TYPES] ALTER COLUMN [Specific_Type] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DIAGRAM_TYPES] ALTER COLUMN [Diagram_Type_XML] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DIAGRAM_TYPES] ALTER COLUMN [Object_Type] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_DIAGRAM_TYPES] on [dbo].[DIAGRAM_TYPES]'
GO
ALTER TABLE [dbo].[DIAGRAM_TYPES] ADD CONSTRAINT [PK_DIAGRAM_TYPES] PRIMARY KEY CLUSTERED ([Specific_Type])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[FINANCIAL_ASSESSMENT_VALUES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINANCIAL_ASSESSMENT_VALUES] ALTER COLUMN [AttributeName] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINANCIAL_ASSESSMENT_VALUES] ALTER COLUMN [AttributeValue] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_FINANCIAL_ASSESSMENT_VALUES] on [dbo].[FINANCIAL_ASSESSMENT_VALUES]'
GO
ALTER TABLE [dbo].[FINANCIAL_ASSESSMENT_VALUES] ADD CONSTRAINT [PK_FINANCIAL_ASSESSMENT_VALUES] PRIMARY KEY CLUSTERED ([Assessment_Id], [AttributeName])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[FINANCIAL_ATTRIBUTES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINANCIAL_ATTRIBUTES] ALTER COLUMN [AttributeName] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_FINANCIAL_ATTRIBUTES] on [dbo].[FINANCIAL_ATTRIBUTES]'
GO
ALTER TABLE [dbo].[FINANCIAL_ATTRIBUTES] ADD CONSTRAINT [PK_FINANCIAL_ATTRIBUTES] PRIMARY KEY CLUSTERED ([AttributeName])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[FINANCIAL_DOMAINS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINANCIAL_DOMAINS] ALTER COLUMN [Acronym] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[FINANCIAL_ASSESSMENT_FACTORS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINANCIAL_ASSESSMENT_FACTORS] ALTER COLUMN [Acronym] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[FINANCIAL_COMPONENTS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINANCIAL_COMPONENTS] ALTER COLUMN [Acronym] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[FINANCIAL_MATURITY]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINANCIAL_MATURITY] ALTER COLUMN [Acronym] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[FINANCIAL_HOURS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINANCIAL_HOURS] ALTER COLUMN [Component] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINANCIAL_HOURS] ALTER COLUMN [ReviewType] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINANCIAL_HOURS] ALTER COLUMN [OtherSpecifyValue] [nvarchar] (512) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_FINANCIAL_ASSESSMENT_HOURS] on [dbo].[FINANCIAL_HOURS]'
GO
ALTER TABLE [dbo].[FINANCIAL_HOURS] ADD CONSTRAINT [PK_FINANCIAL_ASSESSMENT_HOURS] PRIMARY KEY CLUSTERED ([Assessment_Id], [Component], [ReviewType])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[FINANCIAL_HOURS_COMPONENT]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINANCIAL_HOURS_COMPONENT] ALTER COLUMN [Component] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_FINANCIAL_HOURS_COMPONENT] on [dbo].[FINANCIAL_HOURS_COMPONENT]'
GO
ALTER TABLE [dbo].[FINANCIAL_HOURS_COMPONENT] ADD CONSTRAINT [PK_FINANCIAL_HOURS_COMPONENT] PRIMARY KEY CLUSTERED ([Component])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[FINANCIAL_REVIEWTYPE]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINANCIAL_REVIEWTYPE] ALTER COLUMN [ReviewType] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_FINANCIAL_REVIEWTYPE] on [dbo].[FINANCIAL_REVIEWTYPE]'
GO
ALTER TABLE [dbo].[FINANCIAL_REVIEWTYPE] ADD CONSTRAINT [PK_FINANCIAL_REVIEWTYPE] PRIMARY KEY CLUSTERED ([ReviewType])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Rebuilding [dbo].[NEW_REQUIREMENT]'
GO
CREATE TABLE [dbo].[RG_Recovery_3_NEW_REQUIREMENT]
(
[Requirement_Id] [int] NOT NULL IDENTITY(1, 1),
[Requirement_Title] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Requirement_Text] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[Supplemental_Info] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Standard_Category] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Standard_Sub_Category] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Weight] [int] NULL,
[Implementation_Recommendations] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Original_Set_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[Text_Hash] AS (CONVERT([varbinary](20),hashbytes('SHA1',[Requirement_Text]),(0))) PERSISTED,
[NCSF_Cat_Id] [int] NULL,
[NCSF_Number] [int] NULL,
[Supp_Hash] AS (CONVERT([varbinary](32),hashbytes('SHA1',left([Supplemental_Info],(8000))),(0))) PERSISTED,
[Ranking] [int] NULL,
[Question_Group_Heading_Id] [int] NOT NULL,
[ExaminationApproach] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Old_Id_For_Copy] [int] NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
SET IDENTITY_INSERT [dbo].[RG_Recovery_3_NEW_REQUIREMENT] ON
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
INSERT INTO [dbo].[RG_Recovery_3_NEW_REQUIREMENT]([Requirement_Id], [Requirement_Title], [Requirement_Text], [Supplemental_Info], [Standard_Category], [Standard_Sub_Category], [Weight], [Implementation_Recommendations], [Original_Set_Name], [NCSF_Cat_Id], [NCSF_Number], [Ranking], [Question_Group_Heading_Id], [ExaminationApproach], [Old_Id_For_Copy]) SELECT [Requirement_Id], [Requirement_Title], [Requirement_Text], [Supplemental_Info], [Standard_Category], [Standard_Sub_Category], [Weight], [Implementation_Recommendations], [Original_Set_Name], [NCSF_Cat_Id], [NCSF_Number], [Ranking], [Question_Group_Heading_Id], [ExaminationApproach], [Old_Id_For_Copy] FROM [dbo].[NEW_REQUIREMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
SET IDENTITY_INSERT [dbo].[RG_Recovery_3_NEW_REQUIREMENT] OFF
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DECLARE @idVal BIGINT
SELECT @idVal = IDENT_CURRENT(N'[dbo].[NEW_REQUIREMENT]')
IF @idVal IS NOT NULL
    DBCC CHECKIDENT(N'[dbo].[RG_Recovery_3_NEW_REQUIREMENT]', RESEED, @idVal)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
DROP TABLE [dbo].[NEW_REQUIREMENT]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
EXEC sp_rename N'[dbo].[RG_Recovery_3_NEW_REQUIREMENT]', N'NEW_REQUIREMENT', N'OBJECT'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_NEW_REQUIREMENT] on [dbo].[NEW_REQUIREMENT]'
GO
ALTER TABLE [dbo].[NEW_REQUIREMENT] ADD CONSTRAINT [PK_NEW_REQUIREMENT] PRIMARY KEY CLUSTERED ([Requirement_Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[FINDING]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINDING] ADD
[Title] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Type] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Description] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Sub_Risk_Area_Id] [int] NULL,
[Disposition] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Identified_Date] [datetime2] NULL,
[Due_Date] [datetime2] NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINDING] ALTER COLUMN [Summary] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINDING] ALTER COLUMN [Issue] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINDING] ALTER COLUMN [Impact] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINDING] ALTER COLUMN [Recommendations] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FINDING] ALTER COLUMN [Vulnerabilities] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[IMPORTANCE]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[IMPORTANCE] ALTER COLUMN [Value] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[RISK_SUB_RISK_AREA]'
GO
CREATE TABLE [dbo].[RISK_SUB_RISK_AREA]
(
[Risk_Area] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[Sub_Risk_Area] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[Sub_Risk_Area_Id] [int] NOT NULL IDENTITY(1, 1)
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_SUB_RISK_AREA_1] on [dbo].[RISK_SUB_RISK_AREA]'
GO
ALTER TABLE [dbo].[RISK_SUB_RISK_AREA] ADD CONSTRAINT [PK_SUB_RISK_AREA_1] PRIMARY KEY CLUSTERED ([Sub_Risk_Area_Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[FRAMEWORK_TIERS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FRAMEWORK_TIERS] ALTER COLUMN [Tier] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FRAMEWORK_TIERS] ALTER COLUMN [FullName] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_FRAMEWORK_TIERS] on [dbo].[FRAMEWORK_TIERS]'
GO
ALTER TABLE [dbo].[FRAMEWORK_TIERS] ADD CONSTRAINT [PK_FRAMEWORK_TIERS] PRIMARY KEY CLUSTERED ([Tier])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[FRAMEWORK_TIER_DEFINITIONS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_DEFINITIONS] ALTER COLUMN [Tier] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_DEFINITIONS] ALTER COLUMN [TierType] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_DEFINITIONS] ALTER COLUMN [TierQuestion] [nvarchar] (1024) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_FRAMEWORK_TIER_DEFINITIONS] on [dbo].[FRAMEWORK_TIER_DEFINITIONS]'
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_DEFINITIONS] ADD CONSTRAINT [PK_FRAMEWORK_TIER_DEFINITIONS] PRIMARY KEY CLUSTERED ([Tier], [TierType])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[FRAMEWORK_TIER_TYPE_ANSWER]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_TYPE_ANSWER] ALTER COLUMN [TierType] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_TYPE_ANSWER] ALTER COLUMN [Tier] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_FRAMEWORK_TIER_TYPE_ANSWER] on [dbo].[FRAMEWORK_TIER_TYPE_ANSWER]'
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_TYPE_ANSWER] ADD CONSTRAINT [PK_FRAMEWORK_TIER_TYPE_ANSWER] PRIMARY KEY CLUSTERED ([Assessment_Id], [TierType])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[FRAMEWORK_TIER_TYPE]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_TYPE] ALTER COLUMN [TierType] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_FRAMEWORK_TIER_TYPE] on [dbo].[FRAMEWORK_TIER_TYPE]'
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_TYPE] ADD CONSTRAINT [PK_FRAMEWORK_TIER_TYPE] PRIMARY KEY CLUSTERED ([TierType])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[GALLERY_GROUP]'
GO
CREATE TABLE [dbo].[GALLERY_GROUP]
(
[Group_Id] [int] NOT NULL IDENTITY(1, 1),
[Group_Title] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_GALLERY_GROUP_1] on [dbo].[GALLERY_GROUP]'
GO
ALTER TABLE [dbo].[GALLERY_GROUP] ADD CONSTRAINT [PK_GALLERY_GROUP_1] PRIMARY KEY CLUSTERED ([Group_Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[GALLERY_GROUP_DETAILS]'
GO
CREATE TABLE [dbo].[GALLERY_GROUP_DETAILS]
(
[Group_Id] [int] NOT NULL,
[Column_Index] [int] NOT NULL,
[Gallery_Item_Id] [int] NULL,
[Click_Count] [int] NOT NULL CONSTRAINT [DF_GALLERY_GROUP_DETAILS_Click_Count] DEFAULT ((0)),
[Group_Detail_Id] [int] NOT NULL IDENTITY(1, 1)
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_GALLERY_GROUP_DETAILS] on [dbo].[GALLERY_GROUP_DETAILS]'
GO
ALTER TABLE [dbo].[GALLERY_GROUP_DETAILS] ADD CONSTRAINT [PK_GALLERY_GROUP_DETAILS] PRIMARY KEY CLUSTERED ([Group_Detail_Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[GALLERY_ITEM]'
GO
CREATE TABLE [dbo].[GALLERY_ITEM]
(
[Gallery_Item_Id] [int] NOT NULL IDENTITY(1, 1),
[Icon_File_Name_Small] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Icon_File_Name_Large] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Configuration_Setup] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[Configuration_Setup_Client] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Description] [nvarchar] (2000) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[Title] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[CreationDate] [datetime] NOT NULL CONSTRAINT [DF_GALLERY_ITEM_CreationDate] DEFAULT (getdate()),
[Is_Visible] [bit] NOT NULL CONSTRAINT [DF__GALLERY_I__Is_Vi__3627DDB5] DEFAULT ((1))
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_GALLERY_ITEM] on [dbo].[GALLERY_ITEM]'
GO
ALTER TABLE [dbo].[GALLERY_ITEM] ADD CONSTRAINT [PK_GALLERY_ITEM] PRIMARY KEY CLUSTERED ([Gallery_Item_Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[GALLERY_ROWS]'
GO
CREATE TABLE [dbo].[GALLERY_ROWS]
(
[Layout_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
[Row_Index] [int] NOT NULL,
[Group_Id] [int] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_GALLERY_ROWS] on [dbo].[GALLERY_ROWS]'
GO
ALTER TABLE [dbo].[GALLERY_ROWS] ADD CONSTRAINT [PK_GALLERY_ROWS] PRIMARY KEY CLUSTERED ([Layout_Name], [Row_Index])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[GALLERY_LAYOUT]'
GO
CREATE TABLE [dbo].[GALLERY_LAYOUT]
(
[Layout_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_GALLERY_LAYOUT] on [dbo].[GALLERY_LAYOUT]'
GO
ALTER TABLE [dbo].[GALLERY_LAYOUT] ADD CONSTRAINT [PK_GALLERY_LAYOUT] PRIMARY KEY CLUSTERED ([Layout_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[FILE_REF_KEYS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FILE_REF_KEYS] ALTER COLUMN [Doc_Num] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_FILE_REF_KEYS] on [dbo].[FILE_REF_KEYS]'
GO
ALTER TABLE [dbo].[FILE_REF_KEYS] ADD CONSTRAINT [PK_FILE_REF_KEYS] PRIMARY KEY CLUSTERED ([Doc_Num])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[FILE_TYPE]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FILE_TYPE] ALTER COLUMN [File_Type] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FILE_TYPE] ALTER COLUMN [Mime_Type] [nvarchar] (80) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[FILE_TYPE] ALTER COLUMN [Description] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[REF_LIBRARY_PATH]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REF_LIBRARY_PATH] ALTER COLUMN [Path_Name] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[GEN_SAL_NAMES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GEN_SAL_NAMES] ALTER COLUMN [Sal_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_GEN_SAL_NAMES] on [dbo].[GEN_SAL_NAMES]'
GO
ALTER TABLE [dbo].[GEN_SAL_NAMES] ADD CONSTRAINT [PK_GEN_SAL_NAMES] PRIMARY KEY CLUSTERED ([Sal_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[GEN_SAL_WEIGHTS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GEN_SAL_WEIGHTS] ALTER COLUMN [Sal_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GEN_SAL_WEIGHTS] ALTER COLUMN [Display] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_GEN_SAL_WEIGHTS] on [dbo].[GEN_SAL_WEIGHTS]'
GO
ALTER TABLE [dbo].[GEN_SAL_WEIGHTS] ADD CONSTRAINT [PK_GEN_SAL_WEIGHTS] PRIMARY KEY CLUSTERED ([Sal_Name], [Slider_Value])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_GEN_SAL_WEIGHTS] on [dbo].[GEN_SAL_WEIGHTS]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_GEN_SAL_WEIGHTS] ON [dbo].[GEN_SAL_WEIGHTS] ([Sal_Name], [Slider_Value])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[GENERAL_SAL_DESCRIPTIONS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GENERAL_SAL_DESCRIPTIONS] ALTER COLUMN [Sal_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GENERAL_SAL_DESCRIPTIONS] ALTER COLUMN [Sal_Description] [nvarchar] (1024) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GENERAL_SAL_DESCRIPTIONS] ALTER COLUMN [prefix] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GENERAL_SAL_DESCRIPTIONS] ALTER COLUMN [postfix] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_GENERAL_SAL_DESCRIPTIONS] on [dbo].[GENERAL_SAL_DESCRIPTIONS]'
GO
ALTER TABLE [dbo].[GENERAL_SAL_DESCRIPTIONS] ADD CONSTRAINT [PK_GENERAL_SAL_DESCRIPTIONS] PRIMARY KEY CLUSTERED ([Sal_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[GENERAL_SAL]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GENERAL_SAL] ALTER COLUMN [Sal_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_GENERAL_SAL_1] on [dbo].[GENERAL_SAL]'
GO
ALTER TABLE [dbo].[GENERAL_SAL] ADD CONSTRAINT [PK_GENERAL_SAL_1] PRIMARY KEY CLUSTERED ([Assessment_Id], [Sal_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[MATURITY_ANSWER_OPTIONS_INTEGRITY_CHECK]'
GO
CREATE TABLE [dbo].[MATURITY_ANSWER_OPTIONS_INTEGRITY_CHECK]
(
[Mat_Option_Id_1] [int] NOT NULL,
[Mat_Option_Id_2] [int] NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_INTEGRITY_CHECK_MATURITY_ANSWER_OPTIONS] on [dbo].[MATURITY_ANSWER_OPTIONS_INTEGRITY_CHECK]'
GO
ALTER TABLE [dbo].[MATURITY_ANSWER_OPTIONS_INTEGRITY_CHECK] ADD CONSTRAINT [PK_INTEGRITY_CHECK_MATURITY_ANSWER_OPTIONS] PRIMARY KEY CLUSTERED ([Mat_Option_Id_1], [Mat_Option_Id_2])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[MATURITY_DOMAIN_REMARKS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_DOMAIN_REMARKS] ALTER COLUMN [DomainRemarks] [nvarchar] (2048) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[MATURITY_GROUPING_TYPES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_GROUPING_TYPES] ALTER COLUMN [Grouping_Type_Name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[MATURITY_QUESTION_TYPES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_QUESTION_TYPES] ALTER COLUMN [Mat_Question_Type] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_MATURITY_QUESTION_TYPES] on [dbo].[MATURITY_QUESTION_TYPES]'
GO
ALTER TABLE [dbo].[MATURITY_QUESTION_TYPES] ADD CONSTRAINT [PK_MATURITY_QUESTION_TYPES] PRIMARY KEY CLUSTERED ([Mat_Question_Type])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[MATURITY_REFERENCE_TEXT]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_REFERENCE_TEXT] ALTER COLUMN [Reference_Text] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[MATURITY_REFERENCES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_REFERENCES] ALTER COLUMN [Section_Ref] [nvarchar] (400) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_REFERENCES] ALTER COLUMN [Destination_String] [nvarchar] (2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_MATURITY_REFERENCES] on [dbo].[MATURITY_REFERENCES]'
GO
ALTER TABLE [dbo].[MATURITY_REFERENCES] ADD CONSTRAINT [PK_MATURITY_REFERENCES] PRIMARY KEY CLUSTERED ([Mat_Question_Id], [Gen_File_Id], [Section_Ref])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[MATURITY_SOURCE_FILES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_SOURCE_FILES] ALTER COLUMN [Section_Ref] [nvarchar] (400) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_SOURCE_FILES] ALTER COLUMN [Destination_String] [nvarchar] (2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_MATURITY_SOURCE_FILES] on [dbo].[MATURITY_SOURCE_FILES]'
GO
ALTER TABLE [dbo].[MATURITY_SOURCE_FILES] ADD CONSTRAINT [PK_MATURITY_SOURCE_FILES] PRIMARY KEY CLUSTERED ([Mat_Question_Id], [Gen_File_Id], [Section_Ref])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[MODES_SETS_MATURITY_MODELS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MODES_SETS_MATURITY_MODELS] ALTER COLUMN [AppCode] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MODES_SETS_MATURITY_MODELS] ALTER COLUMN [Set_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MODES_SETS_MATURITY_MODELS] ALTER COLUMN [Model_Name] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[NCSF_FUNCTIONS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NCSF_FUNCTIONS] ALTER COLUMN [NCSF_Function_ID] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NCSF_FUNCTIONS] ALTER COLUMN [NCSF_Function_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_NCSF_FUNCTIONS] on [dbo].[NCSF_FUNCTIONS]'
GO
ALTER TABLE [dbo].[NCSF_FUNCTIONS] ADD CONSTRAINT [PK_NCSF_FUNCTIONS] PRIMARY KEY CLUSTERED ([NCSF_Function_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[NCSF_CATEGORY]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NCSF_CATEGORY] ALTER COLUMN [NCSF_Function_Id] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NCSF_CATEGORY] ALTER COLUMN [NCSF_Category_Id] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NCSF_CATEGORY] ALTER COLUMN [NCSF_Category_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NCSF_CATEGORY] ALTER COLUMN [NCSF_Category_Description] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_NCSF_Category] on [dbo].[NCSF_CATEGORY]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_NCSF_Category] ON [dbo].[NCSF_CATEGORY] ([NCSF_Function_Id], [NCSF_Category_Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[NERC_RISK_RANKING]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NERC_RISK_RANKING] ALTER COLUMN [Violation_Risk_Factor] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[NETWORK_WARNINGS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NETWORK_WARNINGS] ALTER COLUMN [WarningText] [nvarchar] (2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[NEW_QUESTION_SETS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NEW_QUESTION_SETS] ALTER COLUMN [Set_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_NEW_QUESTION_SETS] on [dbo].[NEW_QUESTION_SETS]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_NEW_QUESTION_SETS] ON [dbo].[NEW_QUESTION_SETS] ([Question_Id], [Set_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[NEW_QUESTION_LEVELS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NEW_QUESTION_LEVELS] ALTER COLUMN [Universal_Sal_Level] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_NEW_QUESTION_LEVELS_1] on [dbo].[NEW_QUESTION_LEVELS]'
GO
ALTER TABLE [dbo].[NEW_QUESTION_LEVELS] ADD CONSTRAINT [PK_NEW_QUESTION_LEVELS_1] PRIMARY KEY CLUSTERED ([Universal_Sal_Level], [New_Question_Set_Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[UNIVERSAL_SAL_LEVEL]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[UNIVERSAL_SAL_LEVEL] ALTER COLUMN [Universal_Sal_Level] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[UNIVERSAL_SAL_LEVEL] ALTER COLUMN [Full_Name_Sal] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_UNIVERSAL_SAL_LEVEL] on [dbo].[UNIVERSAL_SAL_LEVEL]'
GO
ALTER TABLE [dbo].[UNIVERSAL_SAL_LEVEL] ADD CONSTRAINT [PK_UNIVERSAL_SAL_LEVEL] PRIMARY KEY CLUSTERED ([Universal_Sal_Level])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_UNIVERSAL_SAL_LEVEL] on [dbo].[UNIVERSAL_SAL_LEVEL]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_UNIVERSAL_SAL_LEVEL] ON [dbo].[UNIVERSAL_SAL_LEVEL] ([Full_Name_Sal])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS] ALTER COLUMN [Set_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS]'
GO
ALTER TABLE [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS] ADD CONSTRAINT [DF_UNIVERSAL_SUB_CATEGORY_HEADINGS_Set_Name] DEFAULT ('Standards') FOR [Set_Name]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_UNIVERSAL_SUB_CATEGORY_HEADINGS_1] on [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS]'
GO
ALTER TABLE [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS] ADD CONSTRAINT [PK_UNIVERSAL_SUB_CATEGORY_HEADINGS_1] PRIMARY KEY CLUSTERED ([Question_Group_Heading_Id], [Universal_Sub_Category_Id], [Set_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[QUESTION_GROUP_HEADING]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[QUESTION_GROUP_HEADING] ALTER COLUMN [Std_Ref] [nvarchar] (10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[STANDARD_CATEGORY]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_CATEGORY] ALTER COLUMN [Standard_Category] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_STANDARD_CATEGORY] on [dbo].[STANDARD_CATEGORY]'
GO
ALTER TABLE [dbo].[STANDARD_CATEGORY] ADD CONSTRAINT [PK_STANDARD_CATEGORY] PRIMARY KEY CLUSTERED ([Standard_Category])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[NIST_SAL_QUESTIONS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_QUESTIONS] ALTER COLUMN [Question_Text] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[NIST_SAL_QUESTION_ANSWERS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_QUESTION_ANSWERS] ALTER COLUMN [Question_Answer] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[NIST_SAL_QUESTION_ANSWERS]'
GO
ALTER TABLE [dbo].[NIST_SAL_QUESTION_ANSWERS] ADD CONSTRAINT [DF_NIST_SAL_QUESTION_ANSWERS_Question_Answer] DEFAULT ('No') FOR [Question_Answer]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[NIST_SAL_INFO_TYPES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES] ALTER COLUMN [Type_Value] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES] ALTER COLUMN [Confidentiality_Value] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES] ALTER COLUMN [Confidentiality_Special_Factor] [nvarchar] (1500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES] ALTER COLUMN [Integrity_Value] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES] ALTER COLUMN [Integrity_Special_Factor] [nvarchar] (1500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES] ALTER COLUMN [Availability_Value] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES] ALTER COLUMN [Availability_Special_Factor] [nvarchar] (1500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES] ALTER COLUMN [Area] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES] ALTER COLUMN [NIST_Number] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_NIST_SAL] on [dbo].[NIST_SAL_INFO_TYPES]'
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES] ADD CONSTRAINT [PK_NIST_SAL] PRIMARY KEY CLUSTERED ([Assessment_Id], [Type_Value])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[PARAMETER_VALUES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PARAMETER_VALUES] ALTER COLUMN [Parameter_Value] [nvarchar] (2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[PROCUREMENT_LANGUAGE_DATA]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PROCUREMENT_LANGUAGE_DATA] ALTER COLUMN [Section_Number] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[PROCUREMENT_LANGUAGE_HEADINGS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[PROCUREMENT_LANGUAGE_HEADINGS] ALTER COLUMN [Heading_Name] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[REQUIREMENT_SETS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_SETS] ALTER COLUMN [Set_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_QUESTION_SETS] on [dbo].[REQUIREMENT_SETS]'
GO
ALTER TABLE [dbo].[REQUIREMENT_SETS] ADD CONSTRAINT [PK_QUESTION_SETS] PRIMARY KEY CLUSTERED ([Requirement_Id], [Set_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[REFERENCE_DOCS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REFERENCE_DOCS] ALTER COLUMN [Doc_Short] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[REPORT_DETAIL_SECTIONS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REPORT_DETAIL_SECTIONS] ALTER COLUMN [Display_Name] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REPORT_DETAIL_SECTIONS] ALTER COLUMN [Tool_Tip] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[REPORT_OPTIONS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REPORT_OPTIONS] ALTER COLUMN [Display_Name] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[REPORT_STANDARDS_SELECTION]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REPORT_STANDARDS_SELECTION] ALTER COLUMN [Report_Set_Entity_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_REPORT_STANDARDS_SELECTION] on [dbo].[REPORT_STANDARDS_SELECTION]'
GO
ALTER TABLE [dbo].[REPORT_STANDARDS_SELECTION] ADD CONSTRAINT [PK_REPORT_STANDARDS_SELECTION] PRIMARY KEY CLUSTERED ([Assesment_Id], [Report_Set_Entity_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[REQUIRED_DOCUMENTATION_HEADERS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIRED_DOCUMENTATION_HEADERS] ALTER COLUMN [Requirement_Documentation_Header] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_REQUIRED_DOCUMENTATION_HEADERS] on [dbo].[REQUIRED_DOCUMENTATION_HEADERS]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_REQUIRED_DOCUMENTATION_HEADERS] ON [dbo].[REQUIRED_DOCUMENTATION_HEADERS] ([Requirement_Documentation_Header])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[REQUIREMENT_LEVELS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_LEVELS] ALTER COLUMN [Standard_Level] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_LEVELS] ALTER COLUMN [Level_Type] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_REQUIREMENT_LEVELS] on [dbo].[REQUIREMENT_LEVELS]'
GO
ALTER TABLE [dbo].[REQUIREMENT_LEVELS] ADD CONSTRAINT [PK_REQUIREMENT_LEVELS] PRIMARY KEY CLUSTERED ([Requirement_Id], [Standard_Level], [Level_Type])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[REQUIREMENT_LEVEL_TYPE]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_LEVEL_TYPE] ALTER COLUMN [Level_Type] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_LEVEL_TYPE] ALTER COLUMN [Level_Type_Full_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_REQUIREMENT_LEVEL_TYPE] on [dbo].[REQUIREMENT_LEVEL_TYPE]'
GO
ALTER TABLE [dbo].[REQUIREMENT_LEVEL_TYPE] ADD CONSTRAINT [PK_REQUIREMENT_LEVEL_TYPE] PRIMARY KEY CLUSTERED ([Level_Type])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[STANDARD_SPECIFIC_LEVEL]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_SPECIFIC_LEVEL] ALTER COLUMN [Standard_Level] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_SPECIFIC_LEVEL] ALTER COLUMN [Full_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_SPECIFIC_LEVEL] ALTER COLUMN [Standard] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_SPECIFIC_LEVEL] ALTER COLUMN [Display_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[STANDARD_SPECIFIC_LEVEL]'
GO
ALTER TABLE [dbo].[STANDARD_SPECIFIC_LEVEL] ADD CONSTRAINT [DF_STANDARD_SPECIFIC_LEVEL_Standard] DEFAULT ('No Standard') FOR [Standard]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_SPECIFIC_LEVEL] ADD CONSTRAINT [DF_STANDARD_SPECIFIC_LEVEL_Display_Name] DEFAULT ('No Display Name') FOR [Display_Name]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_STANDARD_SPECIFIC_LEVEL] on [dbo].[STANDARD_SPECIFIC_LEVEL]'
GO
ALTER TABLE [dbo].[STANDARD_SPECIFIC_LEVEL] ADD CONSTRAINT [PK_STANDARD_SPECIFIC_LEVEL] PRIMARY KEY CLUSTERED ([Standard_Level])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[REQUIREMENT_QUESTIONS_SETS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_QUESTIONS_SETS] ALTER COLUMN [Set_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_REQUIREMENT_QUESTIONS_SETS_1] on [dbo].[REQUIREMENT_QUESTIONS_SETS]'
GO
ALTER TABLE [dbo].[REQUIREMENT_QUESTIONS_SETS] ADD CONSTRAINT [PK_REQUIREMENT_QUESTIONS_SETS_1] PRIMARY KEY CLUSTERED ([Question_Id], [Set_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[REQUIREMENT_REFERENCES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_REFERENCES] ALTER COLUMN [Section_Ref] [nvarchar] (400) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_REFERENCES] ALTER COLUMN [Destination_String] [nvarchar] (2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_REQUIREMENT_REFERENCES] on [dbo].[REQUIREMENT_REFERENCES]'
GO
ALTER TABLE [dbo].[REQUIREMENT_REFERENCES] ADD CONSTRAINT [PK_REQUIREMENT_REFERENCES] PRIMARY KEY CLUSTERED ([Requirement_Id], [Gen_File_Id], [Section_Ref])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[REQUIREMENT_SOURCE_FILES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_SOURCE_FILES] ALTER COLUMN [Section_Ref] [nvarchar] (400) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_SOURCE_FILES] ALTER COLUMN [Destination_String] [nvarchar] (2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_REQUIREMENT_SOURCE_FILES] on [dbo].[REQUIREMENT_SOURCE_FILES]'
GO
ALTER TABLE [dbo].[REQUIREMENT_SOURCE_FILES] ADD CONSTRAINT [PK_REQUIREMENT_SOURCE_FILES] PRIMARY KEY CLUSTERED ([Requirement_Id], [Gen_File_Id], [Section_Ref])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[RISK_AREA]'
GO
CREATE TABLE [dbo].[RISK_AREA]
(
[Risk_Area] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_RISK_AREA] on [dbo].[RISK_AREA]'
GO
ALTER TABLE [dbo].[RISK_AREA] ADD CONSTRAINT [PK_RISK_AREA] PRIMARY KEY CLUSTERED ([Risk_Area])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[SECTOR_STANDARD_RECOMMENDATIONS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SECTOR_STANDARD_RECOMMENDATIONS] ALTER COLUMN [Organization_Size] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SECTOR_STANDARD_RECOMMENDATIONS] ALTER COLUMN [Asset_Value] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SECTOR_STANDARD_RECOMMENDATIONS] ALTER COLUMN [Set_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_SECTOR_STANDARD_RECOMMENDATIONS] on [dbo].[SECTOR_STANDARD_RECOMMENDATIONS]'
GO
ALTER TABLE [dbo].[SECTOR_STANDARD_RECOMMENDATIONS] ADD CONSTRAINT [PK_SECTOR_STANDARD_RECOMMENDATIONS] PRIMARY KEY CLUSTERED ([Sector_Id], [Industry_Id], [Organization_Size], [Asset_Value], [Set_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[SET_FILES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SET_FILES] ALTER COLUMN [SetName] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SET_FILES] ALTER COLUMN [Comment] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_SET_FILES] on [dbo].[SET_FILES]'
GO
ALTER TABLE [dbo].[SET_FILES] ADD CONSTRAINT [PK_SET_FILES] PRIMARY KEY CLUSTERED ([SetName], [Gen_File_Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[SETS_CATEGORY]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SETS_CATEGORY] ALTER COLUMN [Set_Category_Name] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[STANDARD_CATEGORY_SEQUENCE]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_CATEGORY_SEQUENCE] ALTER COLUMN [Standard_Category] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_CATEGORY_SEQUENCE] ALTER COLUMN [Set_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_STANDARD_CATEGORY_SEQUENCE] on [dbo].[STANDARD_CATEGORY_SEQUENCE]'
GO
ALTER TABLE [dbo].[STANDARD_CATEGORY_SEQUENCE] ADD CONSTRAINT [PK_STANDARD_CATEGORY_SEQUENCE] PRIMARY KEY CLUSTERED ([Standard_Category], [Set_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[SAL_DETERMINATION_TYPES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SAL_DETERMINATION_TYPES] ALTER COLUMN [Sal_Determination_Type] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_SAL_DETERMINATION_TYPES_1] on [dbo].[SAL_DETERMINATION_TYPES]'
GO
ALTER TABLE [dbo].[SAL_DETERMINATION_TYPES] ADD CONSTRAINT [PK_SAL_DETERMINATION_TYPES_1] PRIMARY KEY CLUSTERED ([Sal_Determination_Type])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[STANDARD_SOURCE_FILE]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_SOURCE_FILE] ALTER COLUMN [Set_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_SOURCE_FILE] ALTER COLUMN [Doc_Num] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_Standard_Source_File] on [dbo].[STANDARD_SOURCE_FILE]'
GO
ALTER TABLE [dbo].[STANDARD_SOURCE_FILE] ADD CONSTRAINT [PK_Standard_Source_File] PRIMARY KEY CLUSTERED ([Set_Name], [Doc_Num])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[STANDARD_TO_UNIVERSAL_MAP]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_TO_UNIVERSAL_MAP] ALTER COLUMN [Universal_Sal_Level] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[STANDARD_TO_UNIVERSAL_MAP] ALTER COLUMN [Standard_Level] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_STANDARD_TO_UNIVERSAL_MAP] on [dbo].[STANDARD_TO_UNIVERSAL_MAP]'
GO
ALTER TABLE [dbo].[STANDARD_TO_UNIVERSAL_MAP] ADD CONSTRAINT [PK_STANDARD_TO_UNIVERSAL_MAP] PRIMARY KEY CLUSTERED ([Universal_Sal_Level], [Standard_Level])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[SUB_CATEGORY_ANSWERS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SUB_CATEGORY_ANSWERS] ALTER COLUMN [Answer_Text] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SUB_CATEGORY_ANSWERS] ALTER COLUMN [Component_Guid] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[SUB_CATEGORY_ANSWERS]'
GO
ALTER TABLE [dbo].[SUB_CATEGORY_ANSWERS] ADD CONSTRAINT [DF_SUB_CATEGORY_ANSWERS_Component_Id] DEFAULT ((0)) FOR [Component_Guid]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_SUB_CATEGORY_ANSWERS] on [dbo].[SUB_CATEGORY_ANSWERS]'
GO
ALTER TABLE [dbo].[SUB_CATEGORY_ANSWERS] ADD CONSTRAINT [PK_SUB_CATEGORY_ANSWERS] PRIMARY KEY CLUSTERED ([Assessement_Id], [Heading_Pair_Id], [Component_Guid], [Is_Component])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[UNIVERSAL_SUB_CATEGORIES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[UNIVERSAL_SUB_CATEGORIES] ALTER COLUMN [Universal_Sub_Category] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_UNIVERSAL_SUB_CATEGORIES] on [dbo].[UNIVERSAL_SUB_CATEGORIES]'
GO
ALTER TABLE [dbo].[UNIVERSAL_SUB_CATEGORIES] ADD CONSTRAINT [PK_UNIVERSAL_SUB_CATEGORIES] PRIMARY KEY CLUSTERED ([Universal_Sub_Category])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[USER_SECURITY_QUESTIONS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USER_SECURITY_QUESTIONS] ALTER COLUMN [SecurityQuestion1] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USER_SECURITY_QUESTIONS] ALTER COLUMN [SecurityAnswer1] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USER_SECURITY_QUESTIONS] ALTER COLUMN [SecurityQuestion2] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[USER_SECURITY_QUESTIONS] ALTER COLUMN [SecurityAnswer2] [nvarchar] (250) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[VISIO_MAPPING]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[VISIO_MAPPING] ALTER COLUMN [Specific_Type] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[VISIO_MAPPING] ALTER COLUMN [Stencil_Name] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_VISIO_MAPPING] on [dbo].[VISIO_MAPPING]'
GO
ALTER TABLE [dbo].[VISIO_MAPPING] ADD CONSTRAINT [PK_VISIO_MAPPING] PRIMARY KEY CLUSTERED ([Specific_Type], [Stencil_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[GetApplicationModeDefault]'
GO
ALTER PROCEDURE [dbo].[GetApplicationModeDefault]
	-- Add the parameters for the stored procedure here
	@Assessment_Id int,
	@Application_Mode nvarchar(100) output
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	-- SET NOCOUNT ON;

	SELECT @Application_Mode = Application_Mode
	  FROM STANDARD_SELECTION where Assessment_Id = @Assessment_Id

	  if @Application_Mode is null
		Set @Application_Mode = 'Questions Based'

	

END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[convert_sal]'
GO
-- =============================================
-- Author:		WOODRK
-- Create date: 9/12/2019
-- Description:	function to convert the SAL from 
-- word to letter or vice versa
-- =============================================
ALTER FUNCTION [dbo].[convert_sal]
(
	@SAL nvarchar(10)
)
RETURNS nvarchar(10)
AS
BEGIN
	declare @rval nvarchar(10)
	
	select @rval = UNIVERSAL_SAL_LEVEL from UNIVERSAL_SAL_LEVEL where Full_Name_Sal = @SAL;	
	if (@rval is null)
		select @rval = Full_Name_Sal from UNIVERSAL_SAL_LEVEL where Universal_Sal_Level = @SAL;	

	RETURN @rval;

END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[Answer_Standards_InScope]'
GO



ALTER VIEW [dbo].[Answer_Standards_InScope]
AS
		select distinct mode=N'Q', a.assessment_id, a.answer_id, is_requirement=0, a.question_or_requirement_id, a.mark_for_review, 
			a.comment, a.alternate_justification, a.question_number, a.answer_text, 
			a.component_guid, a.is_component, a.custom_question_guid,a.is_framework,a.old_answer_id, a.reviewed, a.FeedBack
			,c.Simple_Question as Question_Text
			FROM Answer_Questions_No_Components a 
			join NEW_QUESTION c on a.Question_Or_Requirement_Id = c.Question_Id			
			join (
				select distinct s.Question_Id, v.Assessment_Id as std_assessment_id
					from NEW_QUESTION_SETS s 
					join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name 								
					join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.new_question_set_id
					where v.Selected = 1 
					and l.Universal_Sal_Level = (
						select ul.Universal_Sal_Level from STANDARD_SELECTION ss join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
						where Assessment_Id = v.Assessment_Id
					)
			)	s on c.Question_Id = s.Question_Id and s.std_assessment_id = a.Assessment_Id			
		union	
		select distinct mode=N'R', a.assessment_id, a.answer_id, is_requirement=1, a.question_or_requirement_id,a.mark_for_review, 
			a.comment, a.alternate_justification, a.question_number, a.answer_text, 
			a.component_guid, a.is_component, a.custom_question_guid, a.is_framework, a.old_answer_id, a.reviewed, a.FeedBack
			,req.Requirement_Text as Question_Text
			from Answer_Requirements a
				join REQUIREMENT_SETS rs on a.Question_Or_Requirement_Id = rs.Requirement_Id and a.is_requirement= 1
				join STANDARD_SELECTION ss on a.Assessment_Id = ss.assessment_id		
				join [SETS] s on rs.Set_Name = s.Set_Name
				join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name and ss.assessment_id = v.assessment_id
				join NEW_REQUIREMENT req on rs.Requirement_Id = req.Requirement_Id
				join REQUIREMENT_LEVELS rl on rl.Requirement_Id = req.Requirement_Id and rl.Standard_Level=dbo.convert_sal(ss.Selected_Sal_Level)
			where v.selected=1 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_BuildCatNumbers]'
GO
-- =============================================
-- Author:		hansbk
-- Create date: 8/30/2018
-- Description:	number stored proc
-- =============================================
ALTER PROCEDURE [dbo].[usp_BuildCatNumbers]
	@assessment_id int
AS
BEGIN
	--SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
  --SELECT @NumRowsChanged = @@ROWCOUNT only call
  --if rowcount from the previous was actually greater than zeror
  --to eliminate unnecessary calls
  declare @ApplicationMode nvarchar(100)  
  declare @answer_id int, @question_group_heading_id int, @next int, @previousH int

	exec GetApplicationModeDefault @assessment_id,@applicationmode output
	if(@ApplicationMode = 'Questions Based')
		begin					
		set @next = 1; 
		set @previousH = 0; 
		declare me cursor Fast_forward
		for select a.Answer_Id,h.Question_Group_Heading_Id
			from Answer_Questions a join NEW_QUESTION q on a.Question_Or_Requirement_Id = q.Question_Id
			join UNIVERSAL_SUB_CATEGORY_HEADINGS h on q.Heading_Pair_Id = h.Heading_Pair_Id			
			join vQUESTION_HEADINGS hh on h.Heading_Pair_Id = hh.Heading_Pair_Id
			where a.Assessment_Id = @assessment_id
			order by hh.Question_Group_Heading,hh.Universal_Sub_Category,q.Question_Id		

		OPEN me
		FETCH NEXT FROM me into @answer_id,@question_group_heading_id

		WHILE @@FETCH_STATUS = 0  
		BEGIN  
			  if(@question_group_heading_id <> @previousH) set @next = 1
			  update ANSWER set Question_Number = @next where Answer_Id=@answer_id
			  
			  set @next = @next +1
			  set @previousH = @question_group_heading_id
			  FETCH NEXT FROM me into @answer_id,@question_group_heading_id
		END 

		close me
		deallocate me
		end
	else
	begin
		
		declare @standard_category nvarchar(250), @previous_std nvarchar(250)
		set @next = 1; 
		set @previousH = 0; 
		declare me cursor Fast_forward
		for select a.Answer_Id, q.Standard_Category
			from Answer_Requirements a join NEW_REQUIREMENT q on a.Question_Or_Requirement_Id = q.Requirement_Id			
		--	join REQUIREMENT_SETS r on q.Requirement_Id = r.Requirement_Id
			where a.Assessment_Id = @assessment_id
			order by q.Standard_Category,q.Standard_Sub_Category--,r.Requirement_Sequence

		OPEN me
		FETCH NEXT FROM me into @answer_id,@standard_category

		WHILE @@FETCH_STATUS = 0  
		BEGIN  
			  if(@standard_category <> @previous_std) set @next = 1
			  update ANSWER set Question_Number = @next where Answer_Id=@answer_id
			  
			  set @next = @next +1
			  set @previous_std = @standard_category
			  FETCH NEXT FROM me into @answer_id,@standard_category
		END 

		close me
		deallocate me
	end   
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[FillEmptyQuestionsForAnalysis]'
GO
-- =============================================
-- Author:		hansbk
-- Create date: 7/9/2018
-- Description:	CopyData
-- =============================================
ALTER PROCEDURE [dbo].[FillEmptyQuestionsForAnalysis]
	-- Add the parameters for the stored procedure here
	@Assessment_Id int	
AS
BEGIN	
	--SET NOCOUNT ON;
	--get the list of selected standards
	--get the mode
	--for the given mode 
	--select the new_questions_sets or requirement_sets table with left join answers (possibly on the view)
	-- and do the insert
	declare @ApplicationMode nvarchar(100)
	declare @SALevel nvarchar(10)
	declare @NumRowsChanged int

	select @SALevel = ul.Universal_Sal_Level from STANDARD_SELECTION ss join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
	where @Assessment_Id = @Assessment_Id 

	DECLARE @result int;  
	exec GetApplicationModeDefault @assessment_id, @applicationmode output
	if(@ApplicationMode = 'Questions Based')
		BEGIN
			BEGIN TRANSACTION;  
		
			EXEC @result = sp_getapplock @DbPrincipal = 'dbo', @Resource = '[Answer]', @LockMode = 'Exclusive';  
				INSERT INTO [dbo].[ANSWER]  ([Question_Or_Requirement_Id], [Answer_Text], [Question_Type], [Assessment_Id])     
			select s.Question_id, Answer_Text = 'U', Question_Type='Question', Assessment_Id = @Assessment_Id
				from (select distinct s.Question_Id from NEW_QUESTION_SETS s 
					join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name 								
					join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.new_question_set_id
					where v.Selected = 1 and v.Assessment_Id = @assessment_id and l.Universal_Sal_Level = @SALevel) s
				left join (select * from ANSWER where Assessment_Id = @Assessment_Id and Is_Requirement = 0) a on s.Question_Id = a.Question_Or_Requirement_Id
			where a.Question_Or_Requirement_Id is null
			IF @result = -3  
			BEGIN  
				ROLLBACK TRANSACTION;  
			END  
			ELSE  
			BEGIN  
				EXEC sp_releaseapplock @DbPrincipal = 'dbo', @Resource = '[Answer]'; 	
				COMMIT TRANSACTION;  
			END;  

			EXEC usp_BuildCatNumbers @assessment_id
		END
	else
	BEGIN
		BEGIN TRANSACTION;  		
		EXEC @result = sp_getapplock @DbPrincipal = 'dbo', @Resource = '[Answer]', @LockMode = 'Exclusive';  
		INSERT INTO [dbo].[ANSWER]  ([Question_Or_Requirement_Id], 
           [Answer_Text], [Question_Type], [Assessment_Id])     
		select distinct s.Requirement_Id, Answer_Text = 'U', Question_Type='Requirement', av.Assessment_Id 
			from requirement_sets s 
			join AVAILABLE_STANDARDS av on s.Set_Name = av.Set_Name
			join REQUIREMENT_LEVELS rl on s.Requirement_Id = rl.Requirement_Id
			left join (select * from ANSWER where Assessment_Id = @Assessment_Id and Question_Type='Requirement') a on s.Requirement_Id = a.Question_Or_Requirement_Id
		where av.Selected = 1 and av.Assessment_Id = @Assessment_Id and a.Question_Or_Requirement_Id is null and rl.Standard_Level = @SALevel and rl.Level_Type = 'NST'
			IF @result = -3  
		BEGIN  
			ROLLBACK TRANSACTION;  
		END  
		ELSE  
		BEGIN  
			EXEC sp_releaseapplock @DbPrincipal = 'dbo', @Resource = '[Answer]'; 	
			COMMIT TRANSACTION;  
		END;  
		
		EXEC usp_BuildCatNumbers @assessment_id
	END   
	
END
/****** Object:  StoredProcedure [dbo].[FillNetworkDiagramQuestions]    Script Date: 12/16/2020 11:01:45 AM ******/
SET ANSI_NULLS ON
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[GetRelevantAnswers]'
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	Returns a table containing ANSWER rows that are relevant
--              to the assessment's current question mode, standard selection and SAL level.
-- =============================================
ALTER PROCEDURE [dbo].[GetRelevantAnswers]
	@assessment_id int	
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	EXECUTE [dbo].[FillEmptyQuestionsForAnalysis]  @Assessment_Id

	-- get the application mode
	declare @applicationMode nvarchar(50)
	exec dbo.GetApplicationModeDefault @assessment_id, @ApplicationMode output

	-- get currently selected sets
	IF OBJECT_ID('tempdb..#mySets') IS NOT NULL DROP TABLE #mySets
	select set_name into #mySets from AVAILABLE_STANDARDS where Assessment_Id = @assessment_Id and Selected = 1
	
	if(@ApplicationMode = 'Questions Based')	
	begin
		
		select distinct a.assessment_id, a.answer_id, a.is_requirement, a.question_or_requirement_id, a.mark_for_review, 
			a.comment, a.alternate_justification, a.question_number, a.answer_text, 
			a.component_guid, a.is_component, a.custom_question_guid, a.is_framework, a.old_answer_id, a.reviewed

			FROM ANSWER a 
			join NEW_QUESTION c on a.Question_Or_Requirement_Id = c.Question_Id			
			join (
				select distinct s.question_id, ns.Short_Name from NEW_QUESTION_SETS s 
					join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name 								
					join SETS ns on s.Set_Name = ns.Set_Name
					join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.New_Question_Set_Id
					join STANDARD_SELECTION ss on v.Assessment_Id = ss.Assessment_Id
					join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
					where v.Selected = 1 and v.Assessment_Id = @assessment_id and l.Universal_Sal_Level = ul.Universal_Sal_Level
			)	s on c.Question_Id = s.Question_Id		
			where a.Assessment_Id = @assessment_id 
			and a.Is_Requirement = 0
	
	end
	else
	begin		

		select distinct a.assessment_id, a.answer_id, a.is_requirement, a.question_or_requirement_id,a.mark_for_review, 
			a.comment, a.alternate_justification, a.question_number, a.answer_text, 
			a.component_guid, a.is_component, a.custom_question_guid, a.is_framework, a.old_answer_id, a.reviewed

			from REQUIREMENT_SETS rs
				left join ANSWER a on a.Question_Or_Requirement_Id = rs.Requirement_Id
				left join [SETS] s on rs.Set_Name = s.Set_Name
				left join NEW_REQUIREMENT req on rs.Requirement_Id = req.Requirement_Id
				left join REQUIREMENT_LEVELS rl on rl.Requirement_Id = req.Requirement_Id		
				left join STANDARD_SELECTION ss on ss.Assessment_Id = @assessment_Id
				left join UNIVERSAL_SAL_LEVEL u on u.Full_Name_Sal = ss.Selected_Sal_Level
			where rs.Set_Name in (select set_name from #mySets)
			and a.Assessment_Id = @assessment_id
			and rl.Standard_Level = u.Universal_Sal_Level 	

	end
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_getStandardSummaryOverall]'
GO
-- =============================================
-- Author:		hansbk
-- Create date: 8/30/2018
-- Description:	Stub needs completed
-- =============================================
ALTER PROCEDURE [dbo].[usp_getStandardSummaryOverall]
	@assessment_id int
AS
BEGIN
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	/*
TODO this needs to take into account requirements vs questions
get the question set then for all the questions take the total risk (in this set only)
then calculate the total risk in each question_group_heading(category) 
then calculate the actual percentage of the total risk in each category 
order by the total
*/
declare @applicationMode nvarchar(50)

exec dbo.GetApplicationModeDefault @assessment_id, @ApplicationMode output


------------- get relevant answers ----------------
	IF OBJECT_ID('tempdb..#answers') IS NOT NULL DROP TABLE #answers

	create table #answers (assessment_id int, answer_id int, is_requirement bit, question_or_requirement_id int, mark_for_review bit, 
	comment ntext, alternate_justification ntext, question_number int, answer_text nvarchar(50), 
	component_guid nvarchar(36), is_component bit, custom_question_guid nvarchar(50), is_framework bit, old_answer_id int, reviewed bit)

	insert into #answers exec [GetRelevantAnswers] @assessment_id

----------------------------------------

	
	select a.Answer_Full_Name,a.Answer_Text, isnull(m.qc,0) qc,isnull(m.Total,0) Total, isnull(cast(IsNull(Round((cast((qc) as float)/(isnull(nullif(Total,0),1)))*100,0),0) as int),0)  as [Percent] 
	from ANSWER_LOOKUP a left join (
	SELECT a.Answer_Text, isnull(count(a.question_or_requirement_id),0) qc, SUM(count(a.question_or_requirement_id)) OVER() AS Total
			FROM #answers a 				
			where a.Assessment_Id = @assessment_id 
			group by a.Answer_Text
	) m on a.Answer_Text = m.Answer_Text

END

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[GetAreasData]'
GO
-- =============================================
-- Author:		hansbk
-- Create date: 7/9/2018
-- Description:	Areas for next
-- =============================================
ALTER PROCEDURE [dbo].[GetAreasData]		
@Assessment_Id int,
@applicationMode nvarchar(100) = null
AS
BEGIN
	SET NOCOUNT ON;
	
	if((@applicationMode is null) or (@applicationMode = ''))
		exec dbo.GetApplicationModeDefault @Assessment_Id, @ApplicationMode output

	if(@Assessment_Id is null)  
	begin
		declare @ghq nvarchar(150)
		set @ghq = 'Access Control'
		 select [Assessment_id]=0,Question_Group_Heading=@ghq,    AreasPercent= 0.200000000, Assessment_Date=GETDATE()
		 union
		 select [Assessment_id]=0,Question_Group_Heading='Account Management',AreasPercent= 0.200000000, Assessment_Date=GETDATE()
	end

	if(@ApplicationMode = 'Questions Based')
	begin					
		select [Assessment_Id],[question_group_heading], answer_text,count(answer_text) ac into #TempStats2 from Answer_Questions join 
		(SELECT q.[Question_Id],h.[Question_Group_Heading],[Universal_Sal_Level],s.[Set_Name]
		  FROM NEW_QUESTION q 
		  join NEW_QUESTION_SETS s on q.Question_Id=s.Question_Id
		  join vQuestion_Headings h on q.Heading_Pair_Id=h.heading_pair_Id
		  join (select distinct [Set_Name] from available_standards where selected = 1 and Assessment_Id=@Assessment_Id) a on s.Set_Name=a.Set_Name) main 
		  on answer_questions.question_or_requirement_id = main.Question_Id
		  group by [assessment_id],[question_group_heading],[Answer_Text]

		  
		--YesCount + AlternateCount, TotalCount - NaCount
		select b.[assessment_id], b.question_group_heading, i.Assessment_Date, 
		 (isnull(cast(ynalt as decimal),0)/cast(total as decimal))*100 as AreasPercent from(
		select question_group_heading, sum(ac) as ynalt from #TempStats2
		where answer_text in ('Y','A') and Assessment_Id = @Assessment_Id
		group by question_group_heading) a right join 
		(select question_group_heading, sum(ac) as total    from #TempStats2
		where answer_text not in ('NA') and Assessment_Id = @Assessment_Id
		group by question_group_heading) b on a.Question_Group_Heading = b.question_group_heading
		join INFORMATION i on b.assessment_id = i.id
	end 
	else --- this is either framework or requirement
	begin		
		select [question_group_heading], answer_text,count(answer_text) ac into #TempStats from Answer_Requirements join 
		(SELECT q.[Requirement_Id],[Question_Group_Heading],s.[Set_Name]
		  FROM NEW_REQUIREMENT q join REQUIREMENT_SETS s on q.Requirement_Id=s.Requirement_Id
		  join QUESTION_GROUP_HEADING qgh on q.Question_Group_Heading_Id = qgh.Question_Group_Heading_Id
		  join (select distinct [Set_Name] from available_standards where selected = 1) a on s.Set_Name=a.Set_Name) main on answer_Requirements.question_or_requirement_id = main.requirement_id
		  where answer_requirements.assessment_id = @Assessment_Id
		  group by [question_group_heading],[Answer_Text]

		--YesCount + AlternateCount, TotalCount - NaCount
		select b.question_group_heading,i.Assessment_Date, 
		 (isnull(cast(ynalt as decimal),0)/cast(total as decimal))*100 as AreasPercent from(
		select question_group_heading, sum(ac) as ynalt from #Tempstats
		where answer_text in ('Y','A') and assessment_id = @Assessment_Id
		group by question_group_heading) a right join 
		(select question_group_heading, sum(ac) as total from #TempStats
		where answer_text not in ('NA')
		group by question_group_heading) b on a.Question_Group_Heading = b.question_group_heading
		join INFORMATION i on b.assessment_Id = i.Id
	end

END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[GetAreasOverall]'
GO
-- =============================================
-- Author:		hansbk
-- Create date: 7/9/2018
-- Description:	Areas for next
-- =============================================
ALTER PROCEDURE [dbo].[GetAreasOverall]		
@Assessment_Id int,
@applicationMode nvarchar(100) = null
AS
BEGIN
	SET NOCOUNT ON;
	
	if((@applicationMode is null) or (@applicationMode = ''))
		exec dbo.GetApplicationModeDefault @assessment_id, @ApplicationMode output
	if(@Assessment_Id is null)  
	begin
		declare @ghq nvarchar(150)
		set @ghq = 'Access Control'
		declare @value float 
		set @value = 1.0001;
		SELECT Question_group_heading=@ghq,Total=0, 
					[Y] = 0,
					[YValue] = @value,
					[N] = 0,
					[NValue] = @value,
					[NA] = 0,
					[NAValue] = @value,
					[A] = 0,
					[AValue] = @value,
					[U] = 0,
					[UValue] = @value,
					Value = @value,
					TotalNoNA = 0 
	end

	
	if(@ApplicationMode = 'Questions Based')	
		SELECT Question_group_heading,isNull(Total,0) as Total, 
						isnull([Y],0) as [Y],
						isnull(cast([Y] as float)/isnull(nullif(Total-[NA],0),1),0) as [YValue],
						isnull([N],0) as [N],
						isnull(cast([N] as float)/isnull(nullif(Total-[NA],0),1),0) as [NValue],
						isnull([NA],0) as [NA],
						isnull(cast([NA] as float)/nullif(Total,1),0) as [NAValue],
						isnull([A],0) as [A],
						isnull(cast([A] as float)/isnull(nullif(Total-[NA],0),1),0) as [AValue],
						isnull([U],0) as [U],
						isnull(cast([U] as float)/isnull(nullif(Total-[NA],0),1),0) as [UValue],
						(cast((isnull([Y],0)+isnull([A],0)) as float)/isnull(nullif(Total-isnull([NA],0),0),1))*100 as Value,
						isnull(cast(isnull(Total-isnull([NA],0),0) as int),0) as TotalNoNA 
			from
			(
				SELECT h.Question_Group_Heading,a.Answer_Text, isnull(count(a.question_or_requirement_id),0) as acount, SUM(count(a.question_or_requirement_id)) OVER(PARTITION BY h.question_group_heading) AS Total  
				  FROM (select * from [ANSWER_Questions] where assessment_id = @Assessment_Id)  a   
				  join (select Question_Or_Requirement_Id from answer_Questions where assessment_Id = @Assessment_Id) b
				   on a.Question_Or_Requirement_Id = b.Question_Or_Requirement_Id
				   join NEW_QUESTION c on a.Question_Or_Requirement_Id=c.Question_Id
				   join vQuestion_Headings h on c.Heading_Pair_Id=h.heading_pair_Id
				   group by Question_Group_Heading, Answer_Text			   
	   ) p
			PIVOT
			(
			sum(acount)
			FOR Answer_Text IN
			( [Y],[N],[NA],[A],[U] )
			) AS pvt
			ORDER BY question_group_heading;
	else
		SELECT Question_group_heading,isNull(Total,0) as Total, 
						isnull([Y],0) as [Y],
						isnull(cast([Y] as float)/isnull(nullif(Total-[NA],0),1),0) as [YValue],
						isnull([N],0) as [N],
						isnull(cast([N] as float)/isnull(nullif(Total-[NA],0),1),0) as [NValue],
						isnull([NA],0) as [NA],
						isnull(cast([NA] as float)/nullif(Total,1),0) as [NAValue],
						isnull([A],0) as [A],
						isnull(cast([A] as float)/isnull(nullif(Total-[NA],0),1),0) as [AValue],
						isnull([U],0) as [U],
						isnull(cast([U] as float)/isnull(nullif(Total-[NA],0),1),0) as [UValue],
						(cast((isnull([Y],0)+isnull([A],0)) as float)/isnull(nullif(Total-isnull([NA],0),0),1))*100 as Value,
						isnull(cast(isnull(Total-isnull([NA],0),0) as int),0) as TotalNoNA 
			FROM 
			(
				SELECT h.Question_Group_Heading,a.Answer_Text, count(a.question_or_requirement_id) as acount, SUM(count(a.question_or_requirement_id)) OVER(PARTITION BY h.question_group_heading) AS Total  
				  FROM (select * from [ANSWER_Requirements] where assessment_id = @Assessment_Id)  a   
				  join (select Question_Or_Requirement_Id from answer_Requirements where assessment_id = @Assessment_Id) b
				   on a.Question_Or_Requirement_Id = b.Question_Or_Requirement_Id
				   join NEW_REQUIREMENT c on a.Question_Or_Requirement_Id=c.Requirement_Id
				   join QUESTION_GROUP_HEADING h on c.Question_Group_Heading_Id=h.Question_Group_Heading_Id
				   group by Question_Group_Heading, Answer_Text			   
	   ) p
			PIVOT
			(
			sum(acount)
			FOR Answer_Text IN
			( [Y],[N],[NA],[A],[U] )
			) AS pvt
			ORDER BY question_group_heading;

END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[convert_sal_short]'
GO
-- =============================================
-- Author:		hansbk
-- Create date: 10/10/2019
-- Description:	function to convert the SAL from 
-- word to letter or vice versa
-- =============================================
ALTER FUNCTION [dbo].[convert_sal_short]
(
	@SAL nvarchar(10)
)
RETURNS nvarchar(10)
AS
BEGIN
	declare @rval nvarchar(10)
	
	select @rval = UNIVERSAL_SAL_LEVEL from UNIVERSAL_SAL_LEVEL where Full_Name_Sal = @SAL;	
	if (@rval is null)
			return @SAL	

	RETURN @rval;

END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[GetCombinedOveralls]'
GO
ALTER PROCEDURE [dbo].[GetCombinedOveralls]	
@Assessment_Id int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	-- Generate temporary tables containing all relevant/in-scope answers for the Assessment	

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

	SELECT a.*
	into #questionAnswers
		FROM Answer_Questions a
		join NEW_QUESTION c on a.Question_Or_Requirement_Id=c.Question_Id				
		join NEW_QUESTION_SETS s on c.Question_Id = s.Question_Id
		join [sets] ms on s.Set_Name = ms.Set_Name
		join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name 								
		join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.New_Question_Set_Id 
		join STANDARD_SELECTION ss on v.Assessment_Id = ss.Assessment_Id
		join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
		where a.Assessment_Id = @assessment_id 
			and v.Selected = 1 
			and v.Assessment_Id = @assessment_id 
			and l.Universal_Sal_Level = ul.Universal_Sal_Level
	
	SELECT ar.*
	into #requirementAnswers
		FROM Answer_Requirements ar
		join NEW_REQUIREMENT r on ar.Question_Or_Requirement_Id = r.Requirement_Id
		join REQUIREMENT_SETS s on r.Requirement_Id = s.Requirement_Id
		join REQUIREMENT_LEVELS l on ar.Question_Or_Requirement_Id = l.Requirement_Id
		join [sets] ms on s.Set_Name = ms.Set_Name
		join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name
		join STANDARD_SELECTION ss on v.Assessment_Id = ss.Assessment_Id
		join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
		where ar.Assessment_Id = @assessment_id 
			and v.Selected = 1 
			and v.Assessment_Id = @assessment_id 
			and l.Standard_Level = ul.Universal_Sal_Level
	
	
	IF OBJECT_ID('tempdb..##componentAnswers') IS NOT NULL DROP TABLE #componentAnswers
	create table #componentAnswers (UniqueKey int, Assessment_Id int, Answer_Id int, Question_Id int, Answer_Text nvarchar(50), Comment nvarchar(2048),
		Alternate_JustificaTion ntext, FeedBack nvarchar(2048), Question_Number int, QuestionText nvarchar(4000), ComponentName nvarchar(200), Symbol_Name nvarchar(100),
		Question_Group_Heading nvarchar(250), GroupHeadingId int, Universal_Sub_Category nvarchar(100), SubCategoryId int, Is_Component bit, Component_Guid uniqueidentifier,
		Layer_Id int, LayerName nvarchar(250),Container_Id int, ZoneName nvarchar(250), SAL nvarchar(20), Mark_For_Review bit, Is_Requirement bit,
		Is_Framework bit, Reviewed bit, Simple_Question nvarchar(4000), Sub_Heading_Question_Description nvarchar(200), heading_pair_id int,
		label nvarchar(200), Component_Symbol_Id int)
	insert into #componentAnswers exec [usp_getExplodedComponent] @assessment_id



	if exists (select * from INFORMATION_SCHEMA.TABLES where TABLE_NAME = '#assessmentAnswers')
		drop table #asessmentAnswers;
	create table #assessmentAnswers (answer_text nvarchar(50), assessment_id int, is_requirement bit, is_component bit, is_framework bit)


	-- Populate #assessmentAnswers from the correct source table
	declare @applicationMode nvarchar(50)
	exec dbo.GetApplicationModeDefault @assessment_id, @ApplicationMode output

	if(@ApplicationMode = 'Questions Based')
	begin		
		insert into #assessmentAnswers 
		select answer_text, assessment_id, is_requirement, is_component, is_framework 
		from #questionAnswers
	end
	else
	begin		
		insert into #assessmentAnswers 
		select answer_text, assessment_id, is_requirement, is_component, is_framework 
		from #requirementAnswers
	end

	-- Include component answers regardless of the application mode
	insert into #assessmentAnswers
		select answer_text, assessment_id, is_requirement, is_component, is_framework 
		from #componentAnswers


    -- Insert statements for procedure here
	SELECT StatType,isNull(Total,0) as Total, 
					cast(IsNull(Round((cast(([Y]) as float)/(isnull(nullif(Total,0),1)))*100,0),0) as int) as [Y],
					cast(IsNull(Round((cast(([N]) as float)/(isnull(nullif(Total,0),1)))*100,0),0) as int) as [N],
					cast(IsNull(Round((cast(([NA]) as float)/(isnull(nullif(Total,0),1)))*100,0),0) as int) as [NA],
					cast(IsNull(Round((cast(([A]) as float)/(isnull(nullif(Total,0),1)))*100,0),0) as int) as [A],
					cast(IsNull(Round((cast(([U]) as float)/(isnull(nullif(Total,0),1)))*100,0),0) as int) as [U],
					[Y] as [YCount],[N] as [NCount],[NA] as [NACount],[A] as [ACount],[U] as [UCount],
					--Value = (IsNull(cast(([Y]+[A]) as float)/((isnull(nullif(Total,0),1)-isnull([NA],0))),0))*100, 					
					Value = (cast(([Y]+[A]) as float)/ isnull(nullif((isnull(Total,0)-isnull([NA],0)),0),1))*100, 					
					
					--Value = cast(1 as float), 					
					TotalNoNA = isnull(Total,0)- isnull(NA,0)
		FROM 
		(
			select [StatType]='Overall', isnull(Acount,0) as Acount, aw.answer_text, SUM(acount) OVER(PARTITION BY aw.t) AS Total  
				from (select t=1, ANSWER_LOOKUP.Answer_Text from ANSWER_LOOKUP) aw left join (select count(answer_text) as Acount, answer_text 
				from #assessmentAnswers  -- !!! 
				where Assessment_Id  = @Assessment_Id
				group by answer_Text) B on aw.Answer_Text=b.Answer_Text 
			union
				select [StatType]='Requirement', isnull(Acount,0) as Acount, aw.answer_text, SUM(acount) OVER(PARTITION BY aw.t) AS Total  		
				from (select t=2, ANSWER_LOOKUP.Answer_Text from ANSWER_LOOKUP) aw left join (select count(answer_text) as Acount, answer_text
				from #assessmentAnswers 
				where Is_Requirement = 1 and assessment_id = @assessment_id
				group by answer_Text) B on aw.Answer_Text=b.Answer_Text 
			union
				select [StatType]='Questions', isnull(Acount,0) as Acount, aw.answer_text, SUM(acount) OVER(PARTITION BY aw.t) AS Total  
				from (select t=3, ANSWER_LOOKUP.Answer_Text from ANSWER_LOOKUP) aw left join (select count(answer_text) as Acount, answer_text
				from #assessmentAnswers 
				where Is_Requirement = 0 and Is_Component = 0 and Assessment_Id = @Assessment_Id
				group by answer_Text) B on aw.Answer_Text=b.Answer_Text 	
			union
				select [StatType]='Components', isnull(Acount,0) as Acount, aw.answer_text, SUM(acount) OVER(PARTITION BY aw.t) AS Total  
				from (select t=4, ANSWER_LOOKUP.Answer_Text from ANSWER_LOOKUP) aw left join (select count(answer_text) as Acount, answer_text
				from #assessmentAnswers 
				where Is_Requirement = 0 and Is_Component = 1 and Assessment_Id = @Assessment_Id
				group by answer_Text) B on aw.Answer_Text=b.Answer_Text 
			union
				select [StatType]='Framework', isnull(Acount,0) as Acount, aw.answer_text, SUM(acount) OVER(PARTITION BY aw.t) AS Total    
				from (select t=5, ANSWER_LOOKUP.Answer_Text from ANSWER_LOOKUP) aw left join (select count(answer_text) as Acount, answer_text
				from #assessmentAnswers 
				where Is_Framework = 1 and Assessment_Id = @Assessment_Id
				group by answer_Text) B on aw.Answer_Text=b.Answer_Text 
		) p
		PIVOT
		(
		sum(acount)
		FOR answer_text IN
		( [Y],[N],[NA],[A],[U] )
		) AS pvt
		ORDER BY pvt.StatType;

END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[GetComparisonAreasFile]'
GO
-- =============================================
-- Author:		hansbk
-- Create date: 7/9/2018
-- Description:	Areas for next
-- =============================================
ALTER PROCEDURE [dbo].[GetComparisonAreasFile]		
@assessment_id int,
@applicationMode nvarchar(100) = null
AS
BEGIN
	SET NOCOUNT ON;
	
	if((@applicationMode is null) or (@applicationMode = ''))
		exec dbo.GetApplicationModeDefault @assessment_id, @ApplicationMode output

	if(@assessment_id is null)  
	begin
		declare @ghq nvarchar(150), @alias nvarchar(255)
		set @ghq = 'Access Control'
		set @alias = 'Test'
		SELECT Alias=@alias,Question_group_heading=@ghq,Total=0, 
					[Y]=cast(1.0000001 as float),
					[N]=cast(1.0000001 as float),
					[NA]=cast(1.0000001 as float),
					[A]=cast(1.0000001 as float),
					[U]=cast(1.0000001 as float),
					Value=cast(1.0000001 as float),
					TotalNoNA=0 
	end

	if(@ApplicationMode = 'Questions Based')
		SELECT Question_group_heading,isNull(Total,0) as Total, 
						cast(IsNull(cast(([Y]) as float)/isnull(nullif(Total,0),1),0) as float) as [Y],
						cast(IsNull(cast(([N]) as float)/isnull(nullif(Total,0),1),0) as float) as [N],
						cast(IsNull(cast(([NA]) as float)/isnull(nullif(Total,0),1),0) as float) as [NA],
						cast(IsNull(cast(([A]) as float)/isnull(nullif(Total,0),1),0) as float) as [A],
						cast(IsNull(cast(([U]) as float)/isnull(nullif(Total,0),1),0) as float) as [U],					
						cast(isnull([Y],0)+isnull([A],0) as float)/cast(isnull(nullif(Total-isnull([NA],0),0),1) as float) as Value, 										
						(Total-isnull([NA],0)) as TotalNoNA 
			FROM 
			(
				SELECT h.Question_Group_Heading,a.Answer_Text, count(a.question_or_requirement_id) as acount, SUM(count(a.question_or_requirement_id)) OVER(PARTITION BY h.question_group_heading) AS Total  
				  FROM (select * from [ANSWER_Questions] where assessment_id = @assessment_id) a   
				  join (select Question_Or_Requirement_Id from answer_questions where assessment_id = @assessment_id) b
				   on a.Question_Or_Requirement_Id = b.Question_Or_Requirement_Id
				   join NEW_QUESTION c on a.Question_Or_Requirement_Id=c.Question_Id
				   join vQuestion_Headings h on c.Heading_Pair_Id=h.heading_pair_id
				   join ASSESSMENTS f on a.assessment_id=f.Assessment_Id
				   group by Question_Group_Heading, Answer_Text
	   ) p
			PIVOT
			(
			sum(acount)
			FOR Answer_Text IN
			( [Y],[N],[NA],[A],[U] )
			) AS pvt
			ORDER BY question_group_heading;
	else--this is requirement and framework
			SELECT Question_group_heading,isNull(Total,0) as Total, 
						cast(IsNull(cast(([Y]) as float)/isnull(nullif(Total,0),1),0) as float) as [Y],
						cast(IsNull(cast(([N]) as float)/isnull(nullif(Total,0),1),0) as float) as [N],
						cast(IsNull(cast(([NA]) as float)/isnull(nullif(Total,0),1),0) as float) as [NA],
						cast(IsNull(cast(([A]) as float)/isnull(nullif(Total,0),1),0) as float) as [A],
						cast(IsNull(cast(([U]) as float)/isnull(nullif(Total,0),1),0) as float) as [U],					
						cast(isnull([Y],0)+isnull([A],0) as float)/cast(isnull(nullif(Total-isnull([NA],0),0),1) as float) as Value, 										
						(Total-isnull([NA],0)) as TotalNoNA 
		FROM 
		(
			SELECT h.Question_Group_Heading,a.Answer_Text, count(a.question_or_requirement_id) as acount, SUM(count(a.question_or_requirement_id)) OVER(PARTITION BY h.question_group_heading) AS Total  
			  FROM (select * from [answer_requirements] where assessment_Id=@assessment_id)  a   
			  join (select Question_Or_Requirement_Id from answer_requirements where assessment_id =@assessment_id) b
			   on a.Question_Or_Requirement_Id = b.Question_Or_Requirement_Id
			   join NEW_REQUIREMENT c on a.Question_Or_Requirement_Id=c.Requirement_id
			   join QUESTION_GROUP_HEADING h on h.Question_Group_Heading_Id = c.Question_Group_Heading_Id
			   join ASSESSMENTS f on a.assessment_id=f.Assessment_Id
			   group by Question_Group_Heading, Answer_Text
   ) p
		PIVOT
		(
		sum(acount)
		FOR Answer_Text IN
		( [Y],[N],[NA],[A],[U] )
		) AS pvt
		ORDER BY question_group_heading;

END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[GetComparisonBestToWorst]'
GO
-- =============================================
-- Author:		hansbk
-- Create date: 7/9/2018
-- Description:	NOTE that this needs to be changed
-- to allow for mulitple asssessments just by 
-- passing mulitple id's 
-- =============================================
ALTER PROCEDURE [dbo].[GetComparisonBestToWorst]	
@assessment_id int,
@applicationMode nvarchar(100) = null
AS
BEGIN
	SET NOCOUNT ON;
	
	if((@applicationMode is null) or (@applicationMode = ''))
		exec dbo.GetApplicationModeDefault @assessment_id, @ApplicationMode output

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

	if(@ApplicationMode = 'Questions Based')
		SELECT assessment_id,
		AssessmentName = Alias,                
		Name = Question_Group_Heading,
		AlternateCount = [A],
		AlternateValue = Round(((cast(([A]) as float)/isnull(nullif(Total,0),1)))*100,2),
		NaCount = [NA],
		NaValue = Round(((cast(([NA]) as float)/isnull(nullif(Total,0),1))*100),2),
		NoCount = [N],
		NoValue = Round(((cast(([N]) as float)/isnull(nullif(Total,0),1)))*100,2),
		TotalCount = Total,
		TotalValue = Total,
		UnansweredCount = [U],
		UnansweredValue = Round(cast([U] as float)/Total*100,2),
		YesCount = [Y],
		YesValue =  Round((cast(([Y]) as float)/isnull(nullif(Total,0),1))*100,2),
		Value = Round(((cast(([Y]+ isnull([A],0)) as float)/isnull(nullif((Total-[NA]),0),1)))*100,2)
		FROM 
		(
			select b.assessment_id, f.Alias, b.Question_Group_Heading, b.Answer_Text, isnull(c.Value,0) as Value, Total = sum(c.Value) over(partition by b.assessment_id,b.question_group_heading)
			from 
			 (select distinct Assessment_Id, Question_Group_Heading, l.answer_Text
			from answer_lookup l, (select * from ANSWER_QUESTIONS where assessment_id = @assessment_id) a 
			join NEW_QUESTION q on a.Question_Or_Requirement_Id = q.Question_Id
			join vQuestion_Headings h on q.Heading_Pair_Id = h.heading_pair_id
			) b left join 
			(select Assessment_Id, Question_Group_Heading, a.Answer_Text, count(a.answer_text) as Value
				from (select * from ANSWER_QUESTIONS where assessment_id = @assessment_id) a 
				join NEW_QUESTION q on a.Question_Or_Requirement_Id = q.Question_Id
				join vQuestion_Headings h on q.Heading_Pair_Id = h.heading_pair_id
			 group by Assessment_Id, Question_Group_Heading, a.Answer_Text) c
			 on b.Assessment_Id = c.Assessment_Id and b.Question_Group_Heading = c.Question_Group_Heading and b.Answer_Text = c.Answer_Text
			 join ASSESSMENTS f on b.Assessment_Id = f.Assessment_Id
		) p
		PIVOT
		(
			sum(value)
		FOR answer_text IN
		( [Y],[N],[NA],[A],[U] )
		) AS pvt
	else-----------------------------------------requirements and framework side
		SELECT Assessment_Id,
		AssessmentName = Alias,                
		Name = Question_Group_Heading,
		AlternateCount = [A],
		AlternateValue = Round(((cast(([A]) as float)/isnull(nullif(Total,0),1)))*100,2),
		NaCount = [NA],
		NaValue = Round(((cast(([NA]) as float)/isnull(nullif(Total,0),1)))*100,2),
		NoCount = [N],
		NoValue = Round(((cast(([N]) as float)/isnull(nullif(Total,0),1)))*100,2),
		TotalCount = Total,
		TotalValue = Total,
		UnansweredCount = [U],
		UnansweredValue = Round(cast([U] as float)/Total*100,2),
		YesCount = [Y],
		YesValue = Round((cast(([Y]) as float)/isnull(nullif(Total,0),1))*100,2),
		Value = Round(((cast(([Y]+ isnull([A],0)) as float)/isnull(nullif((Total-[NA]),0),1)))*100,2)
		FROM 
		(
			select b.Assessment_Id, f.Alias, b.Question_Group_Heading, b.Answer_Text, isnull(c.Value,0) as Value, Total = sum(c.Value) over(partition by b.Assessment_Id, b.question_group_heading)			
			from 
			 (select distinct a.[Assessment_Id], h.Question_Group_Heading, l.answer_Text
			from answer_lookup l, (select * from Answer_Requirements where assessment_id = @assessment_id) a 
			join NEW_REQUIREMENT q on a.Question_Or_Requirement_Id = q.Requirement_Id
			join QUESTION_GROUP_HEADING h on q.Question_Group_Heading_Id = h.Question_Group_Heading_Id
			) b left join 
			(select a.Assessment_Id, Question_Group_Heading, a.Answer_Text, count(a.answer_text) as Value
				from (select * from Answer_Requirements where assessment_id = @assessment_id) a 
				join NEW_REQUIREMENT q on a.Question_Or_Requirement_Id = q.Requirement_Id
				join QUESTION_GROUP_HEADING h on q.Question_Group_Heading_Id = h.Question_Group_Heading_Id
			 group by Assessment_Id, Question_Group_Heading, a.Answer_Text) c
			 on b.Assessment_Id = c.Assessment_Id and b.Question_Group_Heading = c.Question_Group_Heading and b.Answer_Text = c.Answer_Text
			 join ASSESSMENTS f on b.Assessment_Id = f.Assessment_Id
		) p
		PIVOT
		(
			sum(value)
		FOR answer_text IN
		( [Y],[N],[NA],[A],[U] )
		) AS pvt
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[Answer_Maturity]'
GO



ALTER VIEW [dbo].[Answer_Maturity]
AS
SELECT 
	a.Answer_Id, a.Assessment_Id, a.Mark_For_Review, a.Comment, a.Alternate_Justification, 
	a.Is_Requirement, a.Question_Or_Requirement_Id, a.Question_Number, a.Answer_Text, 
	a.Component_Guid, a.Is_Component, a.Is_Framework, a.Is_Maturity,
    a.Custom_Question_Guid, a.Old_Answer_Id, a.Reviewed, a.FeedBack, q.Maturity_Level_Id, q.Question_Text
FROM       [ANSWER] a
LEFT JOIN  [MATURITY_QUESTIONS] q on q.Mat_Question_Id = a.Question_Or_Requirement_Id
LEFT JOIN  [ASSESSMENT_SELECTED_LEVELS] l on l.Assessment_Id = a.Assessment_Id and l.Standard_Specific_Sal_Level = q.Maturity_Level_Id and l.Level_Name = 'Maturity_Level'
WHERE      a.Is_Maturity = 1
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_getAnswerComponentOverrides]'
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[usp_getAnswerComponentOverrides]
	@assessment_id int
AS
BEGIN
	IF OBJECT_ID('tempdb..##componentExploded') IS NOT NULL DROP TABLE #componentExploded
	create table #componentExploded (UniqueKey int, Assessment_Id int, Answer_Id int, Question_Id int, Answer_Text nvarchar(50), Comment nvarchar(2048),
		Alternate_JustificaTion ntext, FeedBack nvarchar(2048), Question_Number int, QuestionText nvarchar(4000), ComponentName nvarchar(200), Symbol_Name nvarchar(100),
		Question_Group_Heading nvarchar(250), GroupHeadingId int, Universal_Sub_Category nvarchar(100), SubCategoryId int, Is_Component bit, Component_Guid uniqueidentifier,
		Layer_Id int, LayerName nvarchar(250),Container_Id int, ZoneName nvarchar(250), SAL nvarchar(20), Mark_For_Review bit, Is_Requirement bit,
		Is_Framework bit, Reviewed bit, Simple_Question nvarchar(4000), Sub_Heading_Question_Description nvarchar(200), heading_pair_id int,
		label nvarchar(200), Component_Symbol_Id int)
	insert into #componentExploded exec [usp_getExplodedComponent] @assessment_id

	SELECT [UniqueKey]
      ,[Assessment_Id]
      ,[Answer_Id]
      ,[Question_Id]
      ,[Answer_Text]
      ,[Comment]
      ,[Alternate_Justification]
      ,[Question_Number]
      ,[QuestionText]
      ,[ComponentName]
      ,[Symbol_Name]
      ,[Question_Group_Heading]
      ,[GroupHeadingId]
      ,[Universal_Sub_Category]
      ,[SubCategoryId]
      ,[Is_Component]
      ,[Component_Guid]
      ,[Layer_Id]
      ,[LayerName]
      ,[Container_Id]
      ,[ZoneName]
      ,[SAL]
      ,[Mark_For_Review]
      ,[Is_Requirement]
      ,[Is_Framework]
      ,[Reviewed]
      ,[Simple_Question]
      ,[Sub_Heading_Question_Description]
      ,[heading_pair_id]
      ,[label]
      ,[Component_Symbol_Id]
	  ,[FeedBack]
  FROM #componentExploded where Answer_Id is not null

END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[changeEmail]'
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[changeEmail]
	@originalEmail nvarchar(200),
	@newEmail nvarchar(200)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	if not exists (select * from users where PrimaryEmail = @newEmail)
		update USERS set PrimaryEmail = @newEmail where PrimaryEmail = @originalEmail
	--if we can't update then we can't update
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[clean_out_requirements_mode]'
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[clean_out_requirements_mode]
	   @standard_name nvarchar(50), @standard_name_with_mode nvarchar(50)
AS
BEGIN	
	SET NOCOUNT ON;

/**
we will do a sheet by sheet clean
select all the q_s_r id's into a temp table
delete out all the corresponding records.

*/


SELECT * INTO #tempSetList FROM dbo.REQUIREMENT_sets WHERE Set_Name = @standard_name_with_mode;

BEGIN TRANSACTION
IF @standard_name = 'ICS'
BEGIN
	delete  [dbo].[Requirement_SETS] where set_name = @standard_name_with_mode
end
ELSE
begin
	DELETE FROM dbo.REQUIREMENT_SOURCE_FILES
	FrOM dbo.REQUIREMENT_SOURCE_FILES a INNER JOIN #tempSetList b ON a.Requirement_Id = b.Requirement_Id
	DELETE FROM dbo.REQUIREMENT_REFERENCES
	FROM dbo.REQUIREMENT_REFERENCES a INNER JOIN #tempSetList b ON a.Requirement_Id=b.Requirement_Id
	DELETE FROM dbo.REQUIREMENT_levels
	FROM dbo.REQUIREMENT_levels a INNER JOIN #tempSetList b ON a.Requirement_Id = b.Requirement_Id
	DELETE FROM dbo.REQUIREMENT_QUESTIONS
	FROM dbo.REQUIREMENT_QUESTIONS a INNER JOIN #tempSetList b ON a.Requirement_Id=b.Requirement_Id
	delete  [dbo].[Requirement_SETS] where set_name = @standard_name_with_mode
end
COMMIT TRANSACTION

DROP TABLE #tempsetlist;


END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[Get_Recommendations]'
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[Get_Recommendations]
	-- Add the parameters for the stored procedure here
	@value int, @industry int, @organization nvarchar(50) ,@assetvalue nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	


select distinct set_name from SECTOR_STANDARD_RECOMMENDATIONS
where Sector_Id = isnull(@value,sector_id) and Industry_Id = isnull(@industry,industry_id) and Organization_Size = isnull(@organization, Organization_Size) and Asset_Value= isnull(@assetvalue,Asset_Value)
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[Answer_Components_Exploded]'
GO





ALTER VIEW [dbo].[Answer_Components_Exploded]
AS

SELECT CONVERT(nvarchar(100), ROW_NUMBER() OVER (ORDER BY a.Question_id)) as UniqueKey,
	a.Assessment_Id, b.Answer_Id, a.Question_Id, isnull(b.Answer_Text, c.Answer_Text) as Answer_Text, 
	CONVERT(nvarchar(1000), b.Comment) AS Comment, CONVERT(nvarchar(1000), b.Alternate_Justification) AS Alternate_Justification, 
	b.FeedBack,
	b.Question_Number, a.Simple_Question AS QuestionText, 	
	a.label AS ComponentName, a.Symbol_Name, 
	a.Question_Group_Heading, a.GroupHeadingId, 
	a.Universal_Sub_Category, a.SubCategoryId, 
	isnull(b.Is_Component,1) as Is_Component, a.Component_Guid, 
	a.Layer_Id, a.LayerName, a.Container_Id, 
	a.ZoneName, dbo.convert_sal(a.SAL) as SAL, 
	b.Mark_For_Review, Is_Requirement=cast(0 as bit), Is_Framework=cast(0 as bit),
	b.Reviewed, a.Simple_Question, a.Sub_Heading_Question_Description, a.heading_pair_id, a.label, a.Component_Symbol_Id
from (
SELECT CONVERT(nvarchar(100), ROW_NUMBER() OVER (ORDER BY q.Question_id)) as UniqueKey,
	adc.Assessment_Id, q.Question_Id, q.Simple_Question,
	adc.label, adc.Component_Symbol_Id, 
	h.Question_Group_Heading, usch.Question_Group_Heading_Id as GroupHeadingId, 
	h.Universal_Sub_Category, usch.Universal_Sub_Category_Id as SubCategoryId,
	adc.Component_Guid, adc.Layer_Id, l.Name AS LayerName, z.Container_Id, 
	z.Name AS ZoneName,  dbo.convert_sal(ISNULL(z.Universal_Sal_Level, ss.Selected_Sal_Level)) AS SAL,
	h.Sub_Heading_Question_Description,h.Heading_Pair_Id, cs.Symbol_Name
from	 dbo.ASSESSMENT_DIAGRAM_COMPONENTS AS adc
			join STANDARD_SELECTION ss on adc.Assessment_Id = ss.Assessment_Id
			join dbo.COMPONENT_QUESTIONS AS cq ON adc.Component_Symbol_Id = cq.Component_Symbol_Id			
			join dbo.COMPONENT_SYMBOLS as cs on adc.Component_Symbol_Id = cs.Component_Symbol_Id
            join dbo.NEW_QUESTION AS q ON cq.Question_Id = q.Question_Id 			
            join dbo.DIAGRAM_CONTAINER AS l ON adc.Layer_Id = l.Container_Id  
            left join dbo.DIAGRAM_CONTAINER AS z ON adc.Zone_Id =z.Container_Id and adc.Assessment_Id=adc.Assessment_Id
			join (select s.*,nql.Universal_Sal_Level from NEW_QUESTION_SETS s
			join NEW_QUESTION_LEVELS nql on s.New_Question_Set_Id = nql.New_Question_Set_Id
			where set_name = 'Components' ) s on q.Question_Id = s.Question_Id and s.Universal_Sal_Level = dbo.convert_sal_short(ISNULL(z.Universal_Sal_Level, ss.Selected_Sal_Level))		
			left join dbo.vQUESTION_HEADINGS h on q.Heading_Pair_Id = h.Heading_Pair_Id
			left join dbo.UNIVERSAL_SUB_CATEGORY_HEADINGS usch on usch.Heading_Pair_Id = h.Heading_Pair_Id
			 
WHERE l.Visible = 1) a left join Answer_Components AS b on a.Question_Id = b.Question_Or_Requirement_Id and a.Assessment_Id = b.Assessment_Id and a.component_guid = b.component_guid
left join (SELECT a.Assessment_Id, q.Question_Id, a.Answer_Text		
from   (SELECT distinct q.question_id,adc.assessment_id
				FROM [dbo].[ASSESSMENT_DIAGRAM_COMPONENTS] adc 			
				join component_questions q on adc.Component_Symbol_Id = q.Component_Symbol_Id
				join STANDARD_SELECTION ss on adc.Assessment_Id = ss.Assessment_Id
				join new_question nq on q.question_id=nq.question_id		
				join new_question_sets qs on nq.question_id=qs.question_id	and qs.Set_Name = 'Components'						
				join NEW_QUESTION_LEVELS nql on qs.New_Question_Set_Id = nql.New_Question_Set_Id 
					and nql.Universal_Sal_Level = dbo.convert_sal(ss.Selected_Sal_Level)) as f  
            join dbo.NEW_QUESTION AS q ON f.Question_Id = q.Question_Id 			
			join Answer_Components AS a on f.Question_Id = a.Question_Or_Requirement_Id and f.assessment_id = a.assessment_id	  
where component_guid = '00000000-0000-0000-0000-000000000000') c on a.Assessment_Id=c.Assessment_Id and a.Question_Id = c.Question_Id




GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_getRankedCategories]'
GO
-- =============================================
-- Author:		barry
-- Create date: 7/20/2018
-- Description:	returns the ranked categories
-- =============================================
ALTER PROCEDURE [dbo].[usp_getRankedCategories]
	@assessment_id int	
AS
BEGIN
	SET NOCOUNT ON;
	-- ranked category calculation is 
	-- sum up the total category risk
	-- for the questions on this assessment
	-- then take the number of questions - the question rank 

/*
TODO this needs to take into account requirements vs questions
get the question set then for all the questions take the total risk (in this set only)
then calculate the total risk in each question_group_heading(category) 
then calculate the actual percentage of the total risk in each category 
order by the total
*/
declare @applicationMode nvarchar(50)

exec dbo.GetApplicationModeDefault @assessment_id, @ApplicationMode output


declare @maxRank int 
if(@ApplicationMode = 'Questions Based')	
begin
	select @maxRank = max(c.Ranking) 
		FROM NEW_QUESTION c 
		join (select distinct question_id,Assessment_Id from NEW_QUESTION_SETS s join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name where v.Selected = 1)
		s on c.Question_Id = s.Question_Id
		where s.Assessment_Id = @assessment_id 
	

	IF OBJECT_ID('tempdb..#Temp') IS NOT NULL DROP TABLE #Temp
	IF OBJECT_ID('tempdb..#TempAnswered') IS NOT NULL DROP TABLE #TempAnswered

	SELECT h.Question_Group_Heading,isnull(count(c.question_id),0) qc,  isnull(SUM(@maxRank-c.Ranking),0) cr, sum(sum(@maxrank - c.Ranking)) OVER() AS Total into #temp
		FROM Answer_Questions a 
		join NEW_QUESTION c on a.Question_Or_Requirement_Id=c.Question_Id
		join vQuestion_Headings h on c.Heading_Pair_Id=h.heading_pair_Id
		
		join (
			select distinct s.question_id from NEW_QUESTION_SETS s 
				join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name 								
				join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.New_Question_Set_Id
				join STANDARD_SELECTION ss on v.Assessment_Id = ss.Assessment_Id
				join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
				where v.Selected = 1 and v.Assessment_Id = @assessment_id and l.Universal_Sal_Level = ul.Universal_Sal_Level
		)
		s on c.Question_Id = s.Question_Id
		where a.Assessment_Id = @assessment_id and a.Answer_Text != 'NA'
		group by Question_Group_Heading
     
	 SELECT h.Question_Group_Heading, isnull(count(c.question_id),0) nuCount, isnull(SUM(@maxRank-c.Ranking),0) cr into #tempAnswered
		FROM Answer_Questions a 
		join NEW_QUESTION c on a.Question_Or_Requirement_Id=c.Question_Id
		join vQuestion_Headings h on c.Heading_Pair_Id=h.heading_pair_Id
		join (
			select distinct s.question_id from NEW_QUESTION_SETS s 
				join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name 								
				join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.New_Question_Set_Id
				join STANDARD_SELECTION ss on v.Assessment_Id = ss.Assessment_Id
				join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
				where v.Selected = 1 and v.Assessment_Id = @assessment_id and l.Universal_Sal_Level = ul.Universal_Sal_Level
		)	s on c.Question_Id = s.Question_Id
		where a.Assessment_Id = @assessment_id and a.Answer_Text in ('N','U')
		group by Question_Group_Heading

	select t.*, isnull(a.nuCount,0) nuCount, isnull(a.cr,0) Actualcr, isnull(cast(a.cr as decimal(18,3))/Total,0)*100 [prc],  isnull(a.nuCount,0)/(cast(qc as decimal(18,3))) as [Percent]
	from #temp t left join #tempAnswered a on t.Question_Group_Heading = a.Question_Group_Heading
	order by prc desc	
end
else 
begin 
	select @maxRank = max(c.Ranking) 
		FROM NEW_REQUIREMENT c 
		join (select distinct requirement_id,Assessment_Id from REQUIREMENT_SETS s join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name where v.Selected = 1)
		s on c.Requirement_Id=s.Requirement_Id
		where s.Assessment_Id = @assessment_id 
	

	IF OBJECT_ID('tempdb..#TempR') IS NOT NULL DROP TABLE #TempR

	SELECT h.Question_Group_Heading,count(c.Requirement_Id) qc,  SUM(@maxRank-c.Ranking) cr, sum(sum(@maxrank - c.Ranking)) OVER() AS Total into #tempR
		FROM Answer_Requirements a 
		join NEW_REQUIREMENT c on a.Question_Or_Requirement_Id=c.Requirement_Id
		join QUESTION_GROUP_HEADING h on c.Question_Group_Heading_Id = h.Question_Group_Heading_Id
		join (select distinct requirement_id from REQUIREMENT_SETS s join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name where v.Selected = 1)
		s on c.Requirement_Id = s.Requirement_Id
		where a.Assessment_Id = @assessment_id 
		group by Question_Group_Heading

	
	select *, isnull(cast(cr as decimal(18,3))/Total, 0) * 100 [prc] from #tempR
	order by prc desc
end
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[RelevantAnswers]'
GO
-- =============================================
-- Author:		Randy Woods
-- Create date: 29-May-2019
-- Description:	This proc is a wrapper for GetRelevantAnswers and returns 
--              everything it comes up with.
-- =============================================
ALTER PROCEDURE [dbo].[RelevantAnswers]
	@assessment_id int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    ------------- get relevant answers ----------------
	IF OBJECT_ID('tempdb..#answers') IS NOT NULL DROP TABLE #answers

	create table #answers (assessment_id int, answer_id int, is_requirement bit, question_or_requirement_id int, mark_for_review bit, 
	comment ntext, alternate_justification ntext, question_number int, answer_text nvarchar(50), 
	component_guid nvarchar(36), is_component bit, custom_question_guid nvarchar(50), is_framework bit, old_answer_id int, reviewed bit)

	insert into #answers exec [GetRelevantAnswers] @assessment_id

----------------------------------------

	
	SELECT a.*
			FROM #answers a 				
			where a.Assessment_Id = @assessment_id 
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_getOverallRankedCategories]'
GO
-- =============================================
-- Author:		hansbk
-- Create date: 8/1/2018
-- Description:	Stub needs completed
-- =============================================
ALTER PROCEDURE [dbo].[usp_getOverallRankedCategories]
	@assessment_id int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	/*
TODO this needs to take into account requirements vs questions
get the question set then for all the questions take the total risk (in this set only)
then calculate the total risk in each question_group_heading(category) 
then calculate the actual percentage of the total risk in each category 
order by the total
*/
declare @applicationMode nvarchar(50)

exec dbo.GetApplicationModeDefault @assessment_id, @ApplicationMode output


declare @maxRank int 
if(@ApplicationMode = 'Questions Based')	
begin
	select @maxRank = max(c.Ranking) 
		FROM NEW_QUESTION c 
		join (select distinct question_id,Assessment_Id from NEW_QUESTION_SETS s join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name where v.Selected = 1)
		s on c.Question_Id = s.Question_Id
		where s.Assessment_Id = @assessment_id 
	

	IF OBJECT_ID('tempdb..#Temp') IS NOT NULL DROP TABLE #Temp
	IF OBJECT_ID('tempdb..#TempAnswered') IS NOT NULL DROP TABLE #TempAnswered

	SELECT h.Question_Group_Heading,
		isnull(count(c.question_id),0) qc,  
		isnull(SUM(@maxRank-c.Ranking),0) cr, 
		sum(sum(@maxrank - c.Ranking)) OVER() AS Total 
		into #temp
		FROM Answer_Questions a 
		join NEW_QUESTION c on a.Question_Or_Requirement_Id=c.Question_Id
		join vQuestion_Headings h on c.Heading_Pair_Id=h.heading_pair_Id
		
		join (
			select distinct s.question_id from NEW_QUESTION_SETS s 
				join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name 								
				join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.New_Question_Set_Id
				join STANDARD_SELECTION ss on v.Assessment_Id = ss.Assessment_Id
				join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
				where v.Selected = 1 and v.Assessment_Id = @assessment_id and l.Universal_Sal_Level = ul.Universal_Sal_Level
		)
		s on c.Question_Id = s.Question_Id
		where a.Assessment_Id = @assessment_id and a.Answer_Text != 'NA'
		group by Question_Group_Heading
     
	 SELECT h.Question_Group_Heading, 
		isnull(count(c.question_id),0) nuCount, 
		isnull(SUM(@maxRank-c.Ranking),0) cr 
		into #tempAnswered
		FROM Answer_Questions a 
		join NEW_QUESTION c on a.Question_Or_Requirement_Id=c.Question_Id
		join vQuestion_Headings h on c.Heading_Pair_Id=h.heading_pair_Id
		join (
			select distinct s.question_id from NEW_QUESTION_SETS s 
				join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name 								
				join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.New_Question_Set_Id
				join STANDARD_SELECTION ss on v.Assessment_Id = ss.Assessment_Id
				join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
				where v.Selected = 1 and v.Assessment_Id = @assessment_id and l.Universal_Sal_Level = ul.Universal_Sal_Level
		)	s on c.Question_Id = s.Question_Id
		where a.Assessment_Id = @assessment_id and a.Answer_Text in ('N','U')
		group by Question_Group_Heading

	select t.*, 
	isnull(a.nuCount,0) nuCount, 
	isnull(a.cr,0) Actualcr, 
	Round(isnull(cast(a.cr as decimal(18,3))/Total,0)*100,2) [prc],  
	isnull(a.nuCount,0)/(cast(qc as decimal(18,3))) as [Percent]
	from #temp t left join #tempAnswered a on t.Question_Group_Heading = a.Question_Group_Heading
	order by prc desc	
end
else 
begin 
	select @maxRank = max(c.Ranking) 
		FROM NEW_REQUIREMENT c 
		join (select distinct requirement_id,Assessment_Id from REQUIREMENT_SETS s join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name where v.Selected = 1)
		s on c.Requirement_Id=s.Requirement_Id
		where s.Assessment_Id = @assessment_id 
	
	IF OBJECT_ID('tempdb..#TempR') IS NOT NULL DROP TABLE #TempR
	IF OBJECT_ID('tempdb..#TempRAnswered') IS NOT NULL DROP TABLE #TempRAnswered

	SELECT h.Question_Group_Heading,
	count(c.Requirement_Id) qc,  
	SUM(@maxRank-c.Ranking) cr, 
	sum(sum(@maxrank - c.Ranking)) OVER() AS Total
	into #tempR
		FROM Answer_Requirements a 
		join NEW_REQUIREMENT c on a.Question_Or_Requirement_Id=c.Requirement_Id
		join QUESTION_GROUP_HEADING h on c.Question_Group_Heading_Id = h.Question_Group_Heading_Id
		join (select distinct requirement_id from REQUIREMENT_SETS s join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name where v.Selected = 1 and v.assessment_id = @assessment_id)
		s on c.Requirement_Id = s.Requirement_Id
		where a.Assessment_Id = @assessment_id and a.Answer_Text != 'NA'
		group by Question_Group_Heading

	SELECT h.Question_Group_Heading,
	isnull(count(c.requirement_id),0) nuCount,
	SUM(@maxRank-c.Ranking) cr
	into #tempRAnswered
		FROM Answer_Requirements a 
		join NEW_REQUIREMENT c on a.Question_Or_Requirement_Id=c.Requirement_Id
		join QUESTION_GROUP_HEADING h on c.Question_Group_Heading_Id = h.Question_Group_Heading_Id
		join (select distinct requirement_id from REQUIREMENT_SETS s join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name where v.Selected = 1 and v.assessment_id = @assessment_id)
		s on c.Requirement_Id = s.Requirement_Id
		where a.Assessment_Id = @assessment_id and a.Answer_Text in ('N','U')
		group by Question_Group_Heading

	select t.*, 
	isnull(a.nuCount,0) nuCount, 
	isnull(a.cr,0) Actualcr, 	
	ROUND(isnull(cast(a.cr as decimal(18,3))/Total,0)*100,2) [prc],  
	isnull(a.nuCount,0)/(cast(qc as decimal(18,3))) as [Percent]
	from #tempR t left join #tempRAnswered a on t.Question_Group_Heading = a.Question_Group_Heading
	order by prc desc	
end
END

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[ASSESSMENT_DETAIL_FILTER_DATA]'
GO
CREATE TABLE [dbo].[ASSESSMENT_DETAIL_FILTER_DATA]
(
[Name] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[CityOrSite] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[State] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Charter] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Model] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
[Detail_Id] [int] NOT NULL IDENTITY(1, 1)
)
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ASSESSMENT_DETAIL_FILTER_DATA] on [dbo].[ASSESSMENT_DETAIL_FILTER_DATA]'
GO
ALTER TABLE [dbo].[ASSESSMENT_DETAIL_FILTER_DATA] ADD CONSTRAINT [PK_ASSESSMENT_DETAIL_FILTER_DATA] PRIMARY KEY CLUSTERED ([Detail_Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[Get_Assess_Detail_Filter_Data]'
GO
CREATE PROCEDURE [dbo].[Get_Assess_Detail_Filter_Data]
   @model nvarchar(100) = ''

AS
BEGIN
	SET NOCOUNT ON;
	
SELECT * FROM ASSESSMENT_DETAIL_FILTER_DATA WHERE Model = @model

END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_GetQuestionsWithFeedBack]'
GO

--exec usp_getQuestionswithFeedback 8
ALTER PROCEDURE [dbo].[usp_GetQuestionsWithFeedBack]
@assessment_id INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--EXECUTE [dbo].[FillEmptyQuestionsForAnalysis]  @Assessment_Id

	-- get the application mode
	declare @applicationMode nvarchar(50)
	exec dbo.GetApplicationModeDefault @assessment_id, @ApplicationMode output

	-- get currently selected sets
	IF OBJECT_ID('tempdb..#mySets') IS NOT NULL DROP TABLE #mySets
	select set_name into #mySets from AVAILABLE_STANDARDS where Assessment_Id = @assessment_Id and Selected = 1
	
	if(@ApplicationMode = 'Questions Based')	
	begin
		Select
			Simple_Question as [QuestionText],
			a.Feedback as [Feedback],
			a.Question_Or_Requirement_Id as [QuestionOrRequirementID],
			a.Answer_Id as [AnswerId],
			s.Short_Name as [ShortName]
		FROM Answer_Questions a 
			join NEW_QUESTION c on a.Question_Or_Requirement_Id = c.Question_Id
			join vQuestion_Headings h on c.Heading_Pair_Id = h.heading_pair_Id		
			join (
				select distinct s.question_id, ns.Short_Name, ns.Set_Name from NEW_QUESTION_SETS s 
					join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name 								
					join [SETS] ns on s.Set_Name = ns.Set_Name
					join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.New_Question_Set_Id
					--join STANDARD_SELECTION ss on v.Assessment_Id = ss.Assessment_Id
					--join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
					where v.Selected = 1 and v.Assessment_Id = @assessment_id --and l.Universal_Sal_Level = ul.Universal_Sal_Level
			)	s on c.Question_Id = s.Question_Id		
		where a.Assessment_Id = @assessment_id 
		and a.Feedback is not null
	end
	else
		begin
				SELECT 
			Requirement_Text as [QuestionText], 
			Answer_Id as [AnswerID],			
			ans.Feedback as [Feedback],			
			s.short_name as [ShortName],
			rs.Requirement_Id as [QuestionOrRequirementID]
			from REQUIREMENT_SETS rs
				left join ANSWER ans on ans.Question_Or_Requirement_Id = rs.Requirement_Id
				left join [SETS] s on rs.Set_Name = s.Set_Name
				left join NEW_REQUIREMENT req on rs.Requirement_Id = req.Requirement_Id
				left join REQUIREMENT_LEVELS rl on rl.Requirement_Id = req.Requirement_Id		
				left join STANDARD_SELECTION ss on ss.Assessment_Id = @assessment_Id
				left join UNIVERSAL_SAL_LEVEL u on u.Full_Name_Sal = ss.Selected_Sal_Level
			where rs.Set_Name in (select set_name from #mySets)
			and ans.Assessment_Id = @assessment_id
			and rl.Standard_Level = u.Universal_Sal_Level
			and ans.feedback is not null
		end	
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[Analytics_Answers]'
GO



ALTER VIEW [dbo].[Analytics_Answers]
AS
SELECT
Assessment_Id,
Question_Or_Requirement_Id,
Question_Type,
CASE WHEN ANSWER.Answer_Text = 'U' OR ANSWER.Answer_Text = 'N' THEN N'N'
WHEN ANSWER.Answer_Text = 'A' OR ANSWER.Answer_Text = 'Y' THEN N'Y' END
AS Answer_Text
FROM [dbo].[ANSWER]
WHERE ANSWER.Answer_Text != 'NA'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_getRankedStandardCategories]'
GO
-- =============================================
-- Author:		barry
-- Create date: 7/31/2018
-- Description:	returns the ranked categories
-- =============================================
ALTER PROCEDURE [dbo].[usp_getRankedStandardCategories]
	@assessment_id int	
AS
BEGIN
	SET NOCOUNT ON;
	-- ranked category calculation is 
	-- sum up the total category risk
	-- for the questions on this assessment
	-- then take the number of questions - the question rank 

/*
TODO this needs to take into account requirements vs questions
get the question set then for all the questions take the total risk (in this set only)
then calculate the total risk in each question_group_heading(category) 
then calculate the actual percentage of the total risk in each category 
order by the total
*/
declare @applicationMode nvarchar(50)

exec dbo.GetApplicationModeDefault @assessment_id, @ApplicationMode output


declare @maxRank int 
if(@ApplicationMode = 'Questions Based')	
begin
	select @maxRank = max(c.Ranking) 
		FROM NEW_QUESTION c 
		join (select distinct question_id,Assessment_Id from NEW_QUESTION_SETS s join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name where v.Selected = 1)
		s on c.Question_Id = s.Question_Id
		where s.Assessment_Id = @assessment_id 
	

	IF OBJECT_ID('tempdb..#Temp') IS NOT NULL DROP TABLE #Temp
	IF OBJECT_ID('tempdb..#TempAnswered') IS NOT NULL DROP TABLE #TempAnswered

	SELECT v.Set_Name, h.Question_Group_Heading,isnull(count(c.question_id),0) qc,  isnull(SUM(@maxRank-c.Ranking),0) cr, sum(sum(@maxrank - c.Ranking)) OVER() AS Total into #temp
		FROM Answer_Questions a 
		join NEW_QUESTION c on a.Question_Or_Requirement_Id=c.Question_Id
		join vQuestion_Headings h on c.Heading_Pair_Id=h.heading_pair_Id
		join NEW_QUESTION_SETS s on c.Question_Id = s.Question_Id
		join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name and a.Assessment_Id = v.Assessment_Id 								
		join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.New_Question_Set_Id
		join STANDARD_SELECTION ss on v.Assessment_Id = ss.Assessment_Id
		join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
		where a.Assessment_Id = @assessment_id and a.Answer_Text != 'NA' and v.Selected = 1 and v.Assessment_Id = @assessment_id 
		group by v.set_name, Question_Group_Heading
     
	 SELECT h.Question_Group_Heading, isnull(count(c.question_id),0) nuCount, isnull(SUM(@maxRank-c.Ranking),0) cr into #tempAnswered
		FROM Answer_Questions a 
		join NEW_QUESTION c on a.Question_Or_Requirement_Id=c.Question_Id
		join vQuestion_Headings h on c.Heading_Pair_Id=h.heading_pair_Id		
		join NEW_QUESTION_SETS s on c.Question_Id = s.Question_Id
		join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name and a.Assessment_Id = v.Assessment_Id 								
		join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.New_Question_Set_Id
		join STANDARD_SELECTION ss on v.Assessment_Id = ss.Assessment_Id
		join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
		where a.Assessment_Id = @assessment_id and a.Answer_Text in ('N','U') and v.Selected = 1 and v.Assessment_Id = @assessment_id 
		group by v.Set_Name, h.Question_Group_Heading

	select t.*, isnull(a.nuCount,0) nuCount, isnull(a.cr,0) Actualcr, isnull(cast(a.cr as decimal(18,3))/Total,0) [prc],  isnull(a.nuCount,0)/(cast(qc as decimal(18,3))) as [Percent]
	from #temp t left join #tempAnswered a on t.Question_Group_Heading = a.Question_Group_Heading
	order by prc desc	
end
else 
begin 
	select @maxRank = max(c.Ranking) 
		FROM NEW_REQUIREMENT c 
		join (select distinct requirement_id,Assessment_Id from REQUIREMENT_SETS s join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name where v.Selected = 1)
		s on c.Requirement_Id=s.Requirement_Id
		where s.Assessment_Id = @assessment_id 
	

	IF OBJECT_ID('tempdb..#TempR') IS NOT NULL DROP TABLE #TempR

	SELECT h.Question_Group_Heading,count(c.Requirement_Id) qc,  SUM(@maxRank-c.Ranking) cr, sum(sum(@maxrank - c.Ranking)) OVER() AS Total into #tempR
		FROM Answer_Questions a 
		join NEW_REQUIREMENT c on a.Question_Or_Requirement_Id=c.Requirement_Id
		join QUESTION_GROUP_HEADING h on c.Question_Group_Heading_Id = h.Question_Group_Heading_Id
		join (select distinct requirement_id from REQUIREMENT_SETS s join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name where v.Selected = 1)
		s on c.Requirement_Id = s.Requirement_Id
		where a.Assessment_Id = @assessment_id 
		group by Question_Group_Heading

	select *, cast(cr as decimal(18,3))/Total prc from #tempR
	order by prc desc
end
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_getStandardsSummary]'
GO
-- =============================================
-- Author:		hansbk
-- Create date: 8/1/2018
-- Description:	Stub needs completed
-- =============================================
ALTER PROCEDURE [dbo].[usp_getStandardsSummary]
	@assessment_id int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	/*
TODO this needs to take into account requirements vs questions
get the question set then for all the questions take the total risk (in this set only)
then calculate the total risk in each question_group_heading(category) 
then calculate the actual percentage of the total risk in each category 
order by the total
*/
declare @applicationMode nvarchar(50)

exec dbo.GetApplicationModeDefault @assessment_id, @ApplicationMode output


declare @maxRank int 
if(@ApplicationMode = 'Questions Based')	
begin	
		select a.Answer_Full_Name, a.Short_Name, a.Answer_Text, 
			isnull(m.qc,0) as [qc],
			isnull(m.Total,0) as [Total], 
			isnull(cast(IsNull(Round((cast((qc) as float)/(isnull(nullif(Total,0),1)))*100,0),0) as int),0) as [Percent] 
		from (select Short_Name,l.Answer_Full_Name,l.Answer_Text from AVAILABLE_STANDARDS a 
		join SETS s on a.Set_Name = s.Set_Name
		, ANSWER_LOOKUP l
		where a.Assessment_Id = @assessment_id) a left join (
		SELECT ms.Short_Name, a.Answer_Text, isnull(count(c.question_id),0) qc, SUM(count(c.question_id)) OVER(PARTITION BY Short_Name) AS Total
				FROM Answer_Questions a 
				join NEW_QUESTION c on a.Question_Or_Requirement_Id = c.Question_Id				
				join NEW_QUESTION_SETS s on c.Question_Id = s.Question_Id
				join [sets] ms on s.Set_Name = ms.Set_Name
				join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name 								
				join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.New_Question_Set_Id 
				join STANDARD_SELECTION ss on v.Assessment_Id = ss.Assessment_Id
				join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
				where a.Assessment_Id = @assessment_id and v.Selected = 1 and v.Assessment_Id = @assessment_id and l.Universal_Sal_Level = ul.Universal_Sal_Level
				group by ms.Short_Name, a.Answer_Text
		) m on a.Answer_Text = m.Answer_Text AND a.Short_Name = m.Short_Name
		order by Short_Name
end
else 
begin 
		select a.Answer_Full_Name, a.Short_Name, a.Answer_Text,
			isnull(m.[qc], 0) as [qc], 
			isnull(m.[Total], 0) as [Total],
			isnull(cast(IsNull(Round((cast((qc) as float)/(isnull(nullif(Total,0),1)))*100,0),0) as int),0) as [Percent] 
		from (select Short_Name,l.Answer_Full_Name,l.Answer_Text from AVAILABLE_STANDARDS a 
		join SETS s on a.Set_Name = s.Set_Name
		, ANSWER_LOOKUP l
		where a.Assessment_Id = @assessment_id) a left join (
		SELECT ms.Short_Name, a.Answer_Text, isnull(count(c.Requirement_Id),0) qc, SUM(count(c.Requirement_Id)) OVER(PARTITION BY Short_Name) AS Total  
				FROM Answer_Requirements a 
				join NEW_REQUIREMENT c on a.Question_Or_Requirement_Id = c.Requirement_Id				
				join REQUIREMENT_SETS s on c.Requirement_Id = s.Requirement_Id		
				join [sets] ms on s.Set_Name = ms.Set_Name		
				join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name 			
				join REQUIREMENT_LEVELS rl on c.Requirement_Id = rl.Requirement_Id									
				join STANDARD_SELECTION ss on v.Assessment_Id = ss.Assessment_Id
				join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
				where a.Assessment_Id = @assessment_id and v.Selected = 1 and v.Assessment_Id = @assessment_id and rl.Standard_Level = ul.Universal_Sal_Level
				group by ms.Short_Name, a.Answer_Text
	   ) m on a.Answer_Text = m.Answer_Text AND a.Short_Name = m.Short_Name
	   order by Short_Name
end
END







GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_MaturityDetailsCalculations]'
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[usp_MaturityDetailsCalculations]
	-- Add the parameters for the stored procedure here
	@Assessment_Id int
AS
BEGIN
	declare @applicationMode nvarchar(50)

	exec dbo.GetApplicationModeDefault @assessment_id, @ApplicationMode output

	SET NOCOUNT ON;
	EXECUTE [dbo].[FillEmptyQuestionsForAnalysis]  @Assessment_Id

	if(@ApplicationMode = 'Questions Based')	
	BEGIN    
	select grouporder, a.Total,Domain,AssessmentFactor,FinComponent,MaturityLevel,b.Answer_Text, isnull(b.acount, 0) as acount,   isnull((cast(b.acount as float)/cast(total as float)),0) as AnswerPercent, CAST(c.complete AS BIT) AS complete from (
			select distinct min(StmtNumber) as grouporder, fd.financialGroupId, Domain,AssessmentFactor,FinComponent,MaturityLevel,count(stmtnumber) Total
			FROM [FINANCIAL_DETAILS] fd 
			JOIN vFinancialGroups g ON fd.financialGroupId = g.financialGroupId			
			GROUP BY fd.financialGroupId,Domain,AssessmentFactor,FinComponent,MaturityLevel				
			) a 
		left join (SELECT  fd.FinancialGroupId , answer_text, count(a.Answer_Text) acount
			FROM       [dbo].[FINANCIAL_QUESTIONS] f
			INNER JOIN [dbo].[NEW_QUESTION] q ON f.[Question_Id] = q.[Question_Id]
			INNER JOIN (select assessment_id,Question_Or_Requirement_Id, is_requirement, case when Answer_Text in ('Y','A','NA') then 'Y'   end as Answer_Text from [dbo].[ANSWER] where Assessment_Id = @Assessment_Id and answer_text not in ('U','N')) a ON F.[Question_Id] = a.[Question_Or_Requirement_Id]
			INNER JOIN [dbo].[FINANCIAL_DETAILS] AS FD ON f.[StmtNumber] = FD.[StmtNumber]    			
			WHERE [Assessment_Id] = @Assessment_Id AND [Is_Requirement] = 0 
			group by fd.FinancialGroupId, Answer_Text
			)  b  on a.financialGroupId = b.FinancialGroupId
    	join (SELECT fd.financialGroupId,  min(case answer_text when 'U' then 0 else 1 end) as Complete
			from (select * from [ANSWER] WHERE assessment_Id=@assessment_id and Is_Requirement = 0) u 
			join [dbo].[FINANCIAL_QUESTIONS] f ON F.[Question_Id] = u.[Question_Or_Requirement_Id]						
			INNER JOIN [dbo].[FINANCIAL_DETAILS] AS FD ON f.[StmtNumber] = FD.[StmtNumber]    
			WHERE assessment_Id=@assessment_id 
			group by fd.financialGroupId) c on a.FinancialGroupId = c.FinancialGroupId
		order by grouporder			
	end 
	else
	begin 	
	select grouporder, a.Total,Domain,AssessmentFactor,FinComponent,MaturityLevel,b.Answer_Text, isnull(b.acount, 0) as acount,   isnull((cast(b.acount as float)/cast(total as float)),0) as AnswerPercent , CAST(c.Complete AS BIT) AS complete FROM (
			select distinct min(StmtNumber) as grouporder, fd.financialGroupId,Domain,AssessmentFactor,FinComponent,MaturityLevel,count(stmtnumber) Total 
			FROM [FINANCIAL_DETAILS] fd 
			JOIN vFinancialGroups g ON fd.financialGroupId = g.financialGroupId	
			group by fd.FinancialGroupId,Domain,AssessmentFactor,FinComponent,MaturityLevel				
			) a 
		left join (SELECT  fd.FinancialGroupId, answer_text, count(a.Answer_Text) acount
			FROM       [dbo].[FINANCIAL_REQUIREMENTS] f
			INNER JOIN [dbo].[NEW_REQUIREMENT] q ON f.[Requirement_Id] = q.[Requirement_Id]
			INNER JOIN (select assessment_id,Question_Or_Requirement_Id, is_requirement, case when Answer_Text in ('Y','A','NA') then 'Y' else 'N' end as Answer_Text from [dbo].[ANSWER] where Assessment_Id = @Assessment_Id and answer_text not in ('U','N')) a ON F.[Requirement_Id] = a.[Question_Or_Requirement_Id]
			INNER JOIN [dbo].[FINANCIAL_DETAILS] AS FD ON f.[StmtNumber] = FD.[StmtNumber]    			
			WHERE [Assessment_Id] = @Assessment_Id AND [Is_Requirement] = 1 
			group by fd.FinancialGroupId, Answer_Text
			) b  on a.FinancialGroupId = b.FinancialGroupId
		join (SELECT fd.financialGroupId,  min(case answer_text when 'U' then 0 else 1 end) as Complete
			from (select * from [ANSWER] WHERE assessment_Id=@assessment_id and Is_Requirement = 1)  u 
			join [dbo].[FINANCIAL_REQUIREMENTS] f ON F.[Requirement_Id] = u.[Question_Or_Requirement_Id]						
			INNER JOIN [dbo].[FINANCIAL_DETAILS] AS FD ON f.[StmtNumber] = FD.[StmtNumber]    
			WHERE assessment_Id=@assessment_id 
			group by fd.financialGroupId) c on a.FinancialGroupId = c.FinancialGroupId
		order by grouporder
	end

				
END

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_StatementsReviewed]'
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[usp_StatementsReviewed]
	@Assessment_Id int	
AS
BEGIN

------------- get relevant answers ----------------
	IF OBJECT_ID('tempdb..#answers') IS NOT NULL DROP TABLE #answers

	create table #answers (assessment_id int, answer_id int, is_requirement bit, question_or_requirement_id int, mark_for_review bit, 
	comment ntext, alternate_justification ntext, question_number int, answer_text nvarchar(50), 
	component_guid nvarchar(36), is_component bit, custom_question_guid nvarchar(50), is_framework bit, old_answer_id int, reviewed bit)

	insert into #answers exec [GetRelevantAnswers] @assessment_id

----------------------------------------

	declare @applicationMode nvarchar(50)

	exec GetApplicationModeDefault @assessment_id, @ApplicationMode output

	SET NOCOUNT ON;

	EXECUTE [FillEmptyQuestionsForAnalysis]  @Assessment_Id

	if(@ApplicationMode = 'Questions Based')	
	BEGIN

		SELECT assessment_id, c.Component, ReviewType, Hours, isnull(ReviewedCount, 0) as ReviewedCount, f.OtherSpecifyValue, c.DomainId, PresentationOrder, grouporder acount
		from FINANCIAL_HOURS f 
			join FINANCIAL_HOURS_COMPONENT c on f.Component = c.Component
			left join (
				select grouporder, a.DomainId, isnull(ReviewedCount, 0) as ReviewedCount
				from (
						select distinct min(StmtNumber) as grouporder, d.Domain, g.DomainId,count(stmtnumber) Total from [FINANCIAL_DETAILS] fd 
						INNER JOIN FINANCIAL_GROUPS G on FD.FinancialGroupId = g.FinancialGroupId		
						INNER JOIN [FINANCIAL_DOMAINS] AS D ON g.[DomainId] = D.[DomainId]						
						group by g.DomainId, d.Domain
						)  a left join (
						SELECT  g.DomainId, isnull(count(ans_rev.answer_id), 0) as ReviewedCount
						FROM       [FINANCIAL_QUESTIONS] f			
						INNER JOIN [NEW_QUESTION] q ON f.[Question_Id] = q.[Question_Id]
						INNER JOIN #answers a ON q.[Question_Id] = a.[Question_Or_Requirement_Id]
						INNER JOIN #answers ans_rev ON q.[Question_Id] = ans_rev.[Question_Or_Requirement_Id]
						INNER JOIN [FINANCIAL_DETAILS] AS FD ON f.[StmtNumber] = FD.[StmtNumber]    
						inner join FINANCIAL_GROUPS G on FD.FinancialGroupId = g.FinancialGroupId
						WHERE ans_rev.Reviewed = 1
						group by g.DomainId
						) b  on a.DomainId = b.DomainId
		) b on c.DomainId = b.DomainId		
		where f.assessment_id = @assessment_id
		order by PresentationOrder

	END 
	ELSE
	BEGIN 

		SELECT Assessment_id, c.Component, ReviewType, Hours, isnull(ReviewedCount, 0) as ReviewedCount, f.OtherSpecifyValue, c.DomainId, PresentationOrder, grouporder acount
		from FINANCIAL_HOURS f 
		join FINANCIAL_HOURS_COMPONENT c on f.Component = c.Component
		left join (
			select grouporder, a.DomainId, isnull(ReviewedCount, 0) as ReviewedCount
			from (
					select distinct min(StmtNumber) as grouporder, d.Domain, g.DomainId, count(stmtnumber) Total from [FINANCIAL_DETAILS] fd 
					INNER JOIN FINANCIAL_GROUPS G on FD.FinancialGroupId = g.FinancialGroupId		
					INNER JOIN [FINANCIAL_DOMAINS] AS D ON g.[DomainId] = D.[DomainId]			
					group by g.DomainId, d.Domain
					)  a left join (
					SELECT  g.DomainId, isnull(count(ans_rev.Answer_Id), 0) as ReviewedCount
					FROM       [FINANCIAL_REQUIREMENTS] f
					INNER JOIN [NEW_REQUIREMENT] q ON f.[Requirement_Id] = q.[Requirement_Id]
					INNER JOIN #answers a ON q.[Requirement_Id] = a.[Question_Or_Requirement_Id]
					INNER JOIN #answers ans_rev ON q.[Requirement_Id] = ans_rev.[Question_Or_Requirement_Id]
					INNER JOIN [FINANCIAL_DETAILS] AS FD ON f.[StmtNumber] = FD.[StmtNumber]    
					inner join FINANCIAL_GROUPS G on FD.FinancialGroupId = g.FinancialGroupId
					WHERE ans_rev.Reviewed = 1
					group by g.DomainId
					) b  on a.DomainId = b.DomainId 		
		) b on c.DomainId = b.DomainId
		where f.assessment_id = @assessment_id
		order by PresentationOrder		
			
	END
	
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_getStandardsResultsByCategory]'
GO
-- =============================================
-- Author:		hansbk
-- Create date: 8/1/2018
-- Description:	Stub needs completed
-- =============================================
ALTER PROCEDURE [dbo].[usp_getStandardsResultsByCategory]
	@assessment_id int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	/*
TODO this needs to take into account requirements vs questions
get the question set then for all the questions take the total risk (in this set only)
then calculate the total risk in each question_group_heading(category) 
then calculate the actual percentage of the total risk in each category 
order by the total
*/
declare @applicationMode nvarchar(50)

exec dbo.GetApplicationModeDefault @assessment_id, @ApplicationMode output


declare @maxRank int 
if(@ApplicationMode = 'Questions Based')	
begin
	

	
	IF OBJECT_ID('tempdb..#Temp') IS NOT NULL DROP TABLE #Temp
	IF OBJECT_ID('tempdb..#TempAnswered') IS NOT NULL DROP TABLE #TempAnswered

	SELECT s.Set_Name,Question_Group_Heading,isnull(count(c.question_id),0) qc into #temp	
		FROM Answer_Questions a 
		join NEW_QUESTION c on a.Question_Or_Requirement_Id=c.Question_Id
		join vQuestion_Headings h on c.Heading_Pair_Id=h.heading_pair_Id		
		join NEW_QUESTION_SETS s on c.Question_Id = s.Question_Id
		join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name 								
		join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.New_Question_Set_Id 
		join STANDARD_SELECTION ss on v.Assessment_Id = ss.Assessment_Id
		join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
		where a.Assessment_Id = @assessment_id and a.Answer_Text != 'NA' and v.Selected = 1 and v.Assessment_Id = @assessment_id and l.Universal_Sal_Level = ul.Universal_Sal_Level
		group by s.Set_Name, Question_Group_Heading

	insert into #temp (Set_Name,Question_Group_Heading, QC) 
	select a.Set_name,a.Question_Group_Heading, qc=0 from 
	(select * from (select distinct question_group_heading from #temp) a, (select distinct set_name from #temp) b) a 
	left join #temp on a.question_group_heading=#temp.question_group_heading and a.set_name = #temp.set_name
	where #temp.set_name is null

	SELECT s.Set_Name,Question_Group_Heading,isnull(count(c.question_id),0) qc into #tempAnswered
		FROM Answer_Questions a 
		join NEW_QUESTION c on a.Question_Or_Requirement_Id=c.Question_Id
		join vQuestion_Headings h on c.Heading_Pair_Id=h.heading_pair_Id		
		join NEW_QUESTION_SETS s on c.Question_Id = s.Question_Id
		join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name 								
		join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.New_Question_Set_Id 
		join STANDARD_SELECTION ss on v.Assessment_Id = ss.Assessment_Id
		join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
		where a.Assessment_Id = @assessment_id and a.Answer_Text in ('Y','A') and v.Selected = 1 and v.Assessment_Id = @assessment_id and l.Universal_Sal_Level = ul.Universal_Sal_Level
		group by s.Set_Name, Question_Group_Heading
     
	select t.Set_Name,
	s.Short_Name,
	t.Question_Group_Heading, 
	isnull(a.qc,0) yaCount, 
	isnull(t.qc,0) Actualcr, 
	round(isnull(cast(a.qc as decimal(18,3))/t.qc,0),5) * 100 [prc]
	from #temp t left join #tempAnswered a on t.Set_Name = a.Set_Name and  t.Question_Group_Heading = a.Question_Group_Heading
	join [SETS] s on t.Set_Name = s.Set_Name
	order by Question_Group_Heading desc	
end
else 
begin 

	IF OBJECT_ID('tempdb..#TempR') IS NOT NULL DROP TABLE #TempR
	IF OBJECT_ID('tempdb..#TempRAnswer') IS NOT NULL DROP TABLE #TempRAnswer

	SELECT s.set_name, h.Question_Group_Heading, isnull(count(c.Requirement_Id),0) qc into #tempR
		FROM Answer_Requirements a 
		join NEW_REQUIREMENT c on a.Question_Or_Requirement_Id=c.Requirement_Id
		join QUESTION_GROUP_HEADING h on c.Question_Group_Heading_Id = h.Question_Group_Heading_Id
		join REQUIREMENT_SETS s on c.Requirement_Id = s.Requirement_Id
		join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name 		
		where a.Assessment_Id = @assessment_id and v.Assessment_Id = a.Assessment_Id and v.Selected = 1 and a.Answer_Text <> 'NA'
		group by s.set_name, Question_Group_Heading

			/**for multiple sets get the unique list of sets and question_group headers
	   take the cross product 
	   left join and fill with zero
	   Essentially fill in the gaps on the categories
	   */


	insert into #tempR (Set_Name,Question_Group_Heading, QC) 
	select a.Set_name,a.Question_Group_Heading, qc=0 from 
	(select * from (select distinct question_group_heading from #tempR) a, (select distinct set_name from #tempR) b) a 
	left join #tempR on a.question_group_heading=#tempR.question_group_heading and a.set_name = #tempR.set_name
	where #tempR.set_name is null

	SELECT s.set_name, h.Question_Group_Heading,count(c.Requirement_Id) qc into #tempRAnswer
		FROM Answer_Requirements a 
		join NEW_REQUIREMENT c on a.Question_Or_Requirement_Id=c.Requirement_Id
		join QUESTION_GROUP_HEADING h on c.Question_Group_Heading_Id = h.Question_Group_Heading_Id
		join REQUIREMENT_SETS s on c.Requirement_Id = s.Requirement_Id
		join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name 		
		where a.Assessment_Id = @assessment_id and v.Assessment_Id = a.Assessment_Id and v.Selected = 1 and a.Answer_Text in ('Y','A')
		group by s.set_name, Question_Group_Heading

	select t.Set_Name, 
	s.Short_Name, 
	t.Question_Group_Heading, 
	isnull(a.qc,0) yaCount, 
	isnull(t.qc,0) Actualcr, 
	--isnull(a.qc,0)/cast(t.qc as decimal(18,3)) * 100 [prc]
	round(isnull(cast(a.qc as decimal(18,3))/t.qc,0),5) * 100 [prc]
	from #tempR t 
	left join #tempRAnswer a on t.Set_Name = a.Set_Name and t.Question_Group_Heading = a.Question_Group_Heading
	join [SETS] s on t.Set_Name = s.Set_Name
	order by Question_Group_Heading desc
end
END



	
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[Answer_Components_Default]'
GO







/**
The default consists of one one question 
joined on the types in the diagram
filtered by level 
left joined by the answers
*/
ALTER VIEW [dbo].[Answer_Components_Default]
AS

SELECT                   
	-- This guarantees a unique column to key on in the model
	Isnull(CONVERT(int,  ROW_NUMBER() OVER (ORDER BY q.Question_id)),0) as UniqueKey,
	a.Assessment_Id, a.Answer_Id, q.Question_Id, a.Answer_Text, 
	CONVERT(nvarchar(1000), a.Comment) AS Comment, CONVERT(nvarchar(1000), a.Alternate_Justification) AS Alternate_Justification, 
	a.Question_Number, q.Simple_Question AS QuestionText, 		
	h.Question_Group_Heading, usch.Question_Group_Heading_Id as GroupHeadingId, 
	h.Universal_Sub_Category, usch.Universal_Sub_Category_Id as SubCategoryId,
	a.FeedBack,
	a.Is_Component, a.Component_Guid, 
	dbo.convert_sal(ss.Selected_Sal_Level) AS SAL, 
	a.Mark_For_Review, a.Is_Requirement, a.Is_Framework,	
	q.heading_pair_id, h.Sub_Heading_Question_Description,
	q.Simple_Question, 
	a.Reviewed, Cast(null as nvarchar) as label, cast(null as nvarchar) as ComponentName, cast(null as nvarchar) as Symbol_Name, Component_Symbol_id = 0
from   STANDARD_SELECTION ss
		 join 
		 (SELECT distinct q.question_id,adc.assessment_id
				FROM [dbo].[ASSESSMENT_DIAGRAM_COMPONENTS] adc 			
				join component_questions q on adc.Component_Symbol_Id = q.Component_Symbol_Id
				join STANDARD_SELECTION ss on adc.Assessment_Id = ss.Assessment_Id
				join new_question nq on q.question_id=nq.question_id		
				join new_question_sets qs on nq.question_id=qs.question_id	and qs.Set_Name = 'Components'		
				join dbo.DIAGRAM_CONTAINER l on adc.Layer_id=l.Container_Id
				left join dbo.DIAGRAM_CONTAINER AS z ON adc.Zone_Id =z.Container_Id
				join NEW_QUESTION_LEVELS nql on qs.New_Question_Set_Id = nql.New_Question_Set_Id 
					and nql.Universal_Sal_Level = dbo.convert_sal(ISNULL(z.Universal_Sal_Level, ss.Selected_Sal_Level))
				where l.visible = 1) as f  on ss.assessment_id=f.assessment_id							
            join dbo.NEW_QUESTION AS q ON f.Question_Id = q.Question_Id 
			join dbo.vQUESTION_HEADINGS h on q.Heading_Pair_Id = h.Heading_Pair_Id	
			join dbo.UNIVERSAL_SUB_CATEGORY_HEADINGS usch on usch.Heading_Pair_Id = h.Heading_Pair_Id		    
			join Answer_Components AS a on f.Question_Id = a.Question_Or_Requirement_Id and f.assessment_id = a.assessment_id	  
where component_guid = '00000000-0000-0000-0000-000000000000'
--order by question_group_heading,universal_sub_category
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_GetTop5Areas]'
GO
-- =============================================
-- Author:		hansbk
-- Create date: 1/27/2020
-- Description:	get the percentages for each area
-- line up the assessments 
-- =============================================
ALTER PROCEDURE [dbo].[usp_GetTop5Areas]
	@Aggregation_id int
AS
BEGIN

	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED

/*
set the sequence based on assessment date
get the last two assessments.   Then compute
the percentages for all areas and take the difference
between the two assessments
once the difference is determined sort the the difference
get the top 5 for most improved and the bottom 5 for least improved.
*/
	SET NOCOUNT ON;
	exec usp_setTrendOrder @aggregation_id
    
	

	declare @assessment1 int, @assessment2 int
	set @assessment1 = null;
	set @assessment2 = null; 
	


	--declare @aggregation_id int
	--set @Aggregation_id = 2

	IF OBJECT_ID('tempdb..#answers') IS NOT NULL DROP TABLE #answers
	IF OBJECT_ID('tempdb..#TopBottomType') IS NOT NULL DROP TABLE #TopBottomType
	
	CREATE TABLE #TopBottomType(
	[Question_Group_Heading] [nvarchar](100) NOT NULL,
	[pdifference] [float] NULL,
	[TopBottomType] [nvarchar](10) NOT NULL
	)

	create table #answers (assessment_id int, answer_id int, is_requirement bit, question_or_requirement_id int, mark_for_review bit, 
	comment ntext, alternate_justification ntext, question_number int, answer_text nvarchar(50), 
	component_guid nvarchar(36), is_component bit, custom_question_guid nvarchar(50), is_framework bit, old_answer_id int, reviewed bit)

	declare sse cursor for select Assessment_Id from AGGREGATION_ASSESSMENT where Aggregation_Id = @Aggregation_id
	order by Sequence desc
	Declare @assessment_id int

	open sse
	fetch next from sse into @assessment_id 
	while(@@FETCH_STATUS = 0)
	begin
		if (@assessment1 is null) set @assessment1 = @assessment_id 

		insert into #answers exec [GetRelevantAnswers] @assessment_id		
		fetch next from sse into @assessment_id 
		if(@assessment2 is null ) set @assessment2 = @assessment_id
	end
	close sse 
	deallocate sse
	
	insert into #TopBottomType(Question_Group_Heading,pdifference,TopBottomType)
	select  
	 assessment1.Question_Group_Heading Question_Group_Heading,
	 assessment1.percentage-assessment2.percentage as pdifference,
	 [TopBottomType] = 'None'
	 from (
	select a.*,b.Total, (isnull(YesCount,0)+isnull(AlternateCount,0))/CAST(Total as float) as percentage  from (
	SELECT Assessment_Id, Question_Group_Heading,
			[Y] as [YesCount],			
			[N] as [NoCount],
			[NA] as [NaCount],
			[A] as [AlternateCount],
			[U] as [UnansweredCount]			
		FROM 
		(
			select Assessment_Id, h.Question_Group_Heading, Answer_Text			 
			from #answers a join NEW_QUESTION q on a.Question_Or_Requirement_Id = q.Question_Id
			join vQUESTION_HEADINGS h on q.Heading_Pair_Id = h.Heading_Pair_Id	
			where answer_text <> 'NA'
			
		) p
		PIVOT
		(
		  count(Answer_Text)
		FOR Answer_Text IN
		( [Y],[N],[NA],[A],[U] )
		) AS pvt 
		where Assessment_Id is not null) a join (
	select Assessment_Id, h.Question_Group_Heading, count(answer_text) Total 	
	from #answers a join NEW_QUESTION q on a.Question_Or_Requirement_Id = q.Question_Id
	join vQUESTION_HEADINGS h on q.Heading_Pair_Id = h.Heading_Pair_Id	
	where answer_text <> 'NA' and assessment_id= @assessment1
	group by  Assessment_Id, h.Question_Group_Heading) b on a.assessment_id = b.assessment_id 
	and a.Question_Group_Heading=b.Question_Group_Heading ) assessment1 join (
	
	select a.*,b.Total, (isnull(YesCount,0)+isnull(AlternateCount,0))/CAST(Total as float) as percentage  from (
	SELECT Assessment_Id, Question_Group_Heading,
			[Y] as [YesCount],			
			[N] as [NoCount],
			[NA] as [NaCount],
			[A] as [AlternateCount],
			[U] as [UnansweredCount]			
		FROM 
		(
			select Assessment_Id, h.Question_Group_Heading, Answer_Text			 
			from #answers a join NEW_QUESTION q on a.Question_Or_Requirement_Id = q.Question_Id
			join vQUESTION_HEADINGS h on q.Heading_Pair_Id = h.Heading_Pair_Id	
			where answer_text <> 'NA'
			
		) p
		PIVOT
		(
		  count(Answer_Text)
		FOR Answer_Text IN
		( [Y],[N],[NA],[A],[U] )
		) AS pvt 
		where Assessment_Id is not null) a join (
	select Assessment_Id, h.Question_Group_Heading, count(answer_text) Total 	
	from #answers a join NEW_QUESTION q on a.Question_Or_Requirement_Id = q.Question_Id
	join vQUESTION_HEADINGS h on q.Heading_Pair_Id = h.Heading_Pair_Id	
	where answer_text <> 'NA' and assessment_id= @assessment2
	group by  Assessment_Id, h.Question_Group_Heading) b on a.assessment_id = b.assessment_id 
	and a.Question_Group_Heading=b.Question_Group_Heading) assessment2 on assessment1.Question_Group_Heading = assessment2.Question_Group_Heading
	order by pdifference desc

	----------------------------------------------------------
	
		
	update #TopBottomType set TopBottomType = 'BOTTOM' from (
	select top 5 Question_Group_Heading from #TopBottomType order by pdifference) a
	where #TopBottomType.Question_Group_Heading = a.Question_Group_Heading

	update #TopBottomType set TopBottomType = 'TOP' from (
	select top 5 Question_Group_Heading from #TopBottomType 
	where pdifference>=0
	order by pdifference desc) a
	where #TopBottomType.Question_Group_Heading = a.Question_Group_Heading


	select a.*,b.Total, ((isnull(YesCount,0)+isnull(AlternateCount,0))/CAST(Total as float))*100 as percentage
	, #TopBottomType.pdifference, TopBottomType , Assessment_Date
	from (
	SELECT Assessment_Id, Question_Group_Heading,
			[Y] as [YesCount],			
			[N] as [NoCount],
			[NA] as [NaCount],
			[A] as [AlternateCount],
			[U] as [UnansweredCount]			
		FROM 
		(
			select Assessment_Id, h.Question_Group_Heading, Answer_Text			 
			from #answers a join NEW_QUESTION q on a.Question_Or_Requirement_Id = q.Question_Id
			join vQUESTION_HEADINGS h on q.Heading_Pair_Id = h.Heading_Pair_Id	
			where answer_text <> 'NA'
			
		) p
		PIVOT
		(
		  count(Answer_Text)
		FOR Answer_Text IN
		( [Y],[N],[NA],[A],[U] )
		) AS pvt 
		where Assessment_Id is not null) a join (
	select Assessment_Id, h.Question_Group_Heading, count(answer_text) Total 	
	from #answers a join NEW_QUESTION q on a.Question_Or_Requirement_Id = q.Question_Id
	join vQUESTION_HEADINGS h on q.Heading_Pair_Id = h.Heading_Pair_Id	
	where answer_text <> 'NA'
	group by  Assessment_Id, h.Question_Group_Heading) b 
	on a.assessment_id = b.assessment_id and a.Question_Group_Heading=b.Question_Group_Heading 
	join #TopBottomType on b.Question_Group_Heading = #TopBottomType.Question_Group_Heading
	join ASSESSMENTS on a.assessment_id = assessments.Assessment_Id
	where #TopBottomType.TopBottomType in ('Top','Bottom')
	order by TopBottomType desc, pdifference desc,Question_Group_Heading, Assessment_Date, Assessment_Id
	
	
	
		
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_Assessments_Completion_For_User]'
GO

ALTER PROCEDURE [dbo].[usp_Assessments_Completion_For_User]
@User_Id int
AS
BEGIN
	SET NOCOUNT ON;

	--This procedure returns the number of answers and total number of available standard, maturity, and diagram questions
	--	available for each of the user's assessments.

	--Creating table variables
	declare @AssessmentCompletedQuestions table(AssessmentId INT, CompletedCount INT)
	declare @AssessmentTotalMaturityQuestionsCount table(AssessmentId INT, TotalMaturityQuestionsCount INT)
	declare @AssessmentTotalStandardQuestionsCount table(AssessmentId INT, TotalStandardQuestionsCount INT)
	declare @AssessmentTotalDiagramQuestionsCount table(AssessmentId INT, TotalDiagramQuestionsCount INT)

	-- I don't like hardcoding in these model ids, but we have to manually declare which models utilize user selected levels to 
	-- filter questions since some maturity models default to ML 1, but also have questions above that level.
	declare @MaturityModelsWithLevels table(ModelId INT)
	declare @MaturityModelsWithoutLevels table (ModelId INT)
	insert into @MaturityModelsWithLevels values (1), (2), (6), (7), (9), (10)
	insert into @MaturityModelsWithoutLevels values (3), (4), (8), (5)

	declare @ParentMatIds table(Id INT)
	insert into @ParentMatIds select Parent_Question_Id from MATURITY_QUESTIONS where Parent_Question_Id is not null

	--Creating temp tables to hold applicable questions for each type of question
	select a.Assessment_Id, mq.Mat_Question_Id into #AvailableMatQuestions
		from MATURITY_QUESTIONS mq
		join AVAILABLE_MATURITY_MODELS amm on amm.model_id = mq.Maturity_Model_Id
			full join ASSESSMENTS a on a.Assessment_Id = amm.Assessment_Id
			join USERS u on a.AssessmentCreatorId = u.UserId
			join ASSESSMENT_CONTACTS c on a.Assessment_Id = c.Assessment_Id and c.UserId = @User_Id
			where u.UserId = @User_Id and a.UseMaturity = 1 and amm.model_id in (select ModelId from @MaturityModelsWithoutLevels)
			and mq.Mat_Question_Id not in (select Id from @ParentMatIds)


	select a.Assessment_Id, mq.Mat_Question_Id, mq.Maturity_Level_Id into #AvailableMatQuestionsWithLevels
		from MATURITY_QUESTIONS mq
			join AVAILABLE_MATURITY_MODELS amm on amm.model_id = mq.Maturity_Model_Id
			full join ASSESSMENTS a on a.Assessment_Id = amm.Assessment_Id
			join USERS u on a.AssessmentCreatorId = u.UserId
			join ASSESSMENT_CONTACTS c on a.Assessment_Id = c.Assessment_Id and c.UserId = @User_Id
			join ASSESSMENT_SELECTED_LEVELS asl on asl.Assessment_Id = a.Assessment_Id
			join MATURITY_LEVELS ml on ml.Maturity_Level_Id = mq.Maturity_Level_Id
			where u.UserId = @User_Id and a.UseMaturity = 1
			and asl.Level_Name = 'Maturity_Level' and asl.Standard_Specific_Sal_Level >= ml.Level and amm.model_id in (select ModelId from @MaturityModelsWithLevels)
			and mq.Mat_Question_Id not in (select Id from @ParentMatIds)


	select a.Assessment_Id, q.question_Id into #AvailableQuestionBasedStandard
		from NEW_QUESTION q
			join NEW_QUESTION_SETS qs on q.Question_Id = qs.Question_Id
			join NEW_QUESTION_LEVELS nql on qs.New_Question_Set_Id = nql.New_Question_Set_Id
			join UNIVERSAL_SUB_CATEGORY_HEADINGS usch on q.Heading_Pair_Id = usch.Heading_Pair_Id
			join AVAILABLE_STANDARDS stand on qs.Set_Name = stand.Set_Name
			join QUESTION_GROUP_HEADING qgh on usch.Question_Group_Heading_Id = qgh.Question_Group_Heading_Id
			join UNIVERSAL_SUB_CATEGORIES usc on usch.Universal_Sub_Category_Id = usc.Universal_Sub_Category_Id
			full join ASSESSMENTS a on a.Assessment_Id = stand.Assessment_Id
			join STANDARD_SELECTION ss on ss.Assessment_Id = stand.Assessment_Id and Application_Mode = 'Questions Based'
			join UNIVERSAL_SAL_LEVEL usl on ss.Selected_Sal_Level = usl.Full_Name_Sal
			join USERS u on a.AssessmentCreatorId = u.UserId
			join ASSESSMENT_CONTACTS c on a.Assessment_Id = c.Assessment_Id and c.UserId = @User_Id
			where u.UserId = @User_Id and a.UseStandard = 1 and stand.Selected = 1 and nql.Universal_Sal_Level = usl.Universal_Sal_Level


	select a.Assessment_Id, r.Requirement_Id into #AvailableRequirementBasedStandard
		from REQUIREMENT_SETS rs
			join AVAILABLE_STANDARDS stand on stand.Set_Name = rs.Set_Name and stand.Selected = 1
			join NEW_REQUIREMENT r on r.Requirement_Id = rs.Requirement_Id
			full join ASSESSMENTS a on a.Assessment_Id = stand.Assessment_Id
			join STANDARD_SELECTION ss on ss.Assessment_Id = a.assessment_Id and Application_Mode = 'Requirements Based'
			join UNIVERSAL_SAL_LEVEL usl on usl.Full_Name_Sal = ss.Selected_Sal_Level
			join REQUIREMENT_LEVELS rl on rl.Requirement_Id = r.Requirement_Id
			join USERS u on a.AssessmentCreatorId = u.UserId
			join ASSESSMENT_CONTACTS c on a.Assessment_Id = c.Assessment_Id and c.UserId = @User_Id
			where u.UserId = @User_Id and a.UseStandard = 1 and rl.Standard_Level = usl.Universal_Sal_Level


	select a.Assessment_Id, q.Question_Id into #AvailableDiagramQuestions
		from STANDARD_SELECTION ss
			join 
			(select q.question_id, adc.assessment_id
				from ASSESSMENT_DIAGRAM_COMPONENTS adc 			
				join component_questions q on adc.Component_Symbol_Id = q.Component_Symbol_Id
				join STANDARD_SELECTION ss on adc.Assessment_Id = ss.Assessment_Id
				join new_question nq on q.question_id = nq.question_id		
				join new_question_sets qs on nq.question_id = qs.question_id	
				join DIAGRAM_CONTAINER l on adc.Layer_id = l.Container_Id
				left join DIAGRAM_CONTAINER z on adc.Zone_Id = z.Container_Id
				join NEW_QUESTION_LEVELS nql on qs.New_Question_Set_Id = nql.New_Question_Set_Id 
				where l.visible = 1) f on ss.assessment_id = f.assessment_id							
			join NEW_QUESTION q on f.Question_Id = q.Question_Id 
			join vQUESTION_HEADINGS h on q.Heading_Pair_Id = h.Heading_Pair_Id	
			join UNIVERSAL_SUB_CATEGORY_HEADINGS usch on usch.Heading_Pair_Id = h.Heading_Pair_Id		    
			join Answer_Components ac on f.Question_Id = ac.Question_Or_Requirement_Id and f.assessment_id = ac.assessment_id
			full join ASSESSMENTS a on a.Assessment_Id = ss.Assessment_Id
			join USERS u on a.AssessmentCreatorId = u.UserId
			join ASSESSMENT_CONTACTS c on a.Assessment_Id = c.Assessment_Id and c.UserId = @User_Id
			where u.UserId = @User_Id and a.UseDiagram = 1


	insert into @AssessmentCompletedQuestions
	select
		AssessmentId = a.Assessment_Id,
		CompletedCount = COUNT(ans.Answer_Id)
		from ASSESSMENTS a 
			join ANSWER ans on ans.Assessment_Id = a.Assessment_Id
			join USERS u on a.AssessmentCreatorId = u.UserId
			join ASSESSMENT_CONTACTS c on a.Assessment_Id = c.Assessment_Id and c.UserId = @User_Id
			where u.UserId = @User_Id and ans.Answer_Text != 'U' 
			and --This ensures the completed question counts are accurate even if users switch assessments types later on
			(ans.Question_Or_Requirement_Id in (select Mat_Question_Id from #AvailableMatQuestions)
			or
			ans.Question_Or_Requirement_Id in (select Mat_Question_Id from #AvailableMatQuestionsWithLevels amql
												join ASSESSMENT_SELECTED_LEVELS asl on asl.Assessment_Id = a.Assessment_Id 
												join MATURITY_LEVELS ml on ml.Maturity_Level_Id = amql.Maturity_Level_Id 
												where asl.Level_Name = 'Maturity_Level' and asl.Standard_Specific_Sal_Level >= ml.Level)
			or
			ans.Question_Or_Requirement_Id in (select Question_Id from #AvailableQuestionBasedStandard)
			or
			ans.Question_Or_Requirement_Id in (select Requirement_Id from #AvailableRequirementBasedStandard)
			or
			ans.Question_Or_Requirement_Id in (select Question_Id from #AvailableDiagramQuestions))
			group by a.Assessment_Id


	--Place 0 in completed questions count for assessments that have no answers yet
	insert into @AssessmentCompletedQuestions
	select
		AssessmentId = Assessment_Id,
		CompletedCount = 0
		from ASSESSMENTS where Assessment_Id 
		not in (select AssessmentId from @AssessmentCompletedQuestions)
		and 
		AssessmentCreatorId = @User_Id
	

	--Maturity questions count (For maturity models with level selection) available to answer
	insert into @AssessmentTotalMaturityQuestionsCount
	select
		AssessmentId = Assessment_Id,
		TotalMaturityQuestionsCount = COUNT(DISTINCT(Mat_Question_Id))
		from #AvailableMatQuestionsWithLevels
		group by Assessment_Id


	--Total Maturity questions count (for maturity models without level selection) available to answer
	insert into @AssessmentTotalMaturityQuestionsCount
	select
		AssessmentId = Assessment_Id,
		TotalMaturityQuestionsCount = COUNT(DISTINCT(Mat_Question_Id))
		from #AvailableMatQuestions
		group by Assessment_Id
	

	--Requirements based questions count
	insert into @AssessmentTotalStandardQuestionsCount
	select
		AssessmentId = Assessment_Id,
		TotalStandardQuestionsCount = COUNT(DISTINCT(Requirement_Id))
		from #AvailableRequirementBasedStandard
		group by Assessment_Id


	--Questions based standards questions count
	insert into @AssessmentTotalStandardQuestionsCount
	select
		AssessmentId = Assessment_Id,
		TotalStandardQuestionsCount = COUNT(DISTINCT(Question_Id))
		from #AvailableQuestionBasedStandard
		group by Assessment_Id
	

		--Total diagram questions count
	insert into @AssessmentTotalDiagramQuestionsCount
	select                  
		AssessmentId = a.Assessment_Id,
		TotalDiagramQuestionsCount = COUNT(ans.Answer_Id)
		from ANSWER ans
			join ASSESSMENTS a on a.Assessment_Id = ans.Assessment_Id
			join USERS u on a.AssessmentCreatorId = u.UserId
			join ASSESSMENT_CONTACTS c on a.Assessment_Id = c.Assessment_Id and c.UserId = @User_Id
			where u.UserId = @User_Id and a.UseDiagram = 1 and ans.Question_Type = 'Component'
			group by a.Assessment_Id
	
	select
		AssessmentId = acq.AssessmentId,
		CompletedCount = acq.CompletedCount,
		TotalMaturityQuestionsCount = atmq.TotalMaturityQuestionsCount,
		TotalStandardQuestionsCount = atsq.TotalStandardQuestionsCount,
		TotalDiagramQuestionsCount = atdq.TotalDiagramQuestionsCount
		from @AssessmentCompletedQuestions acq
			full join @AssessmentTotalMaturityQuestionsCount atmq on atmq.AssessmentId = acq.AssessmentId
			full join @AssessmentTotalStandardQuestionsCount atsq on atsq.AssessmentId = acq.AssessmentId
			full join @AssessmentTotalDiagramQuestionsCount atdq on atdq.AssessmentId = acq.AssessmentId
END	
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_getStandardsRankedCategories]'
GO
-- =============================================
-- Author:		hansbk
-- Create date: 8/1/2018
-- Description:	Stub needs completed
-- =============================================
ALTER PROCEDURE [dbo].[usp_getStandardsRankedCategories]
	@assessment_id int
AS
BEGIN
	SET NOCOUNT ON;
	-- ranked category calculation is 
	-- sum up the total category risk
	-- for the questions on this assessment
	-- then take the number of questions - the question rank 

/*
TODO this needs to take into account requirements vs questions
get the question set then for all the questions take the total risk (in this set only)
then calculate the total risk in each question_group_heading(category) 
then calculate the actual percentage of the total risk in each category 
order by the total
*/
declare @applicationMode nvarchar(50)

exec dbo.GetApplicationModeDefault @assessment_id, @ApplicationMode output


declare @maxRank int 
if(@ApplicationMode = 'Questions Based')	
begin
	select @maxRank = max(c.Ranking) 
		FROM NEW_QUESTION c 
		join (select distinct question_id,Assessment_Id from NEW_QUESTION_SETS s join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name where v.Selected = 1)
		s on c.Question_Id = s.Question_Id
		where s.Assessment_Id = @assessment_id 
	

	IF OBJECT_ID('tempdb..#Temp') IS NOT NULL DROP TABLE #Temp
	IF OBJECT_ID('tempdb..#TempAnswered') IS NOT NULL DROP TABLE #TempAnswered

	SELECT v.Set_Name, h.Question_Group_Heading,isnull(count(c.question_id),0) qc,  isnull(SUM(@maxRank-c.Ranking),0) cr, sum(sum(@maxrank - c.Ranking)) OVER() AS Total into #temp
		FROM Answer_Questions a 
		join NEW_QUESTION c on a.Question_Or_Requirement_Id=c.Question_Id
		join vQuestion_Headings h on c.Heading_Pair_Id=h.heading_pair_Id
		join NEW_QUESTION_SETS s on c.Question_Id = s.Question_Id
		join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name and a.Assessment_Id = v.Assessment_Id 								
		join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.New_Question_Set_Id
		join STANDARD_SELECTION ss on v.Assessment_Id = ss.Assessment_Id
		join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
		where a.Assessment_Id = @assessment_id and a.Answer_Text != 'NA' and v.Selected = 1 and v.Assessment_Id = @assessment_id 
		group by v.set_name, Question_Group_Heading
     
	 SELECT h.Question_Group_Heading, isnull(count(c.question_id),0) nuCount, isnull(SUM(@maxRank-c.Ranking),0) cr into #tempAnswered
		FROM Answer_Questions a 
		join NEW_QUESTION c on a.Question_Or_Requirement_Id=c.Question_Id
		join vQuestion_Headings h on c.Heading_Pair_Id=h.heading_pair_Id		
		join NEW_QUESTION_SETS s on c.Question_Id = s.Question_Id
		join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name and a.Assessment_Id = v.Assessment_Id 								
		join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.New_Question_Set_Id
		join STANDARD_SELECTION ss on v.Assessment_Id = ss.Assessment_Id
		join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
		where a.Assessment_Id = @assessment_id and a.Answer_Text in ('N','U') and v.Selected = 1 and v.Assessment_Id = @assessment_id 
		group by v.Set_Name, h.Question_Group_Heading

	select t.*, isnull(a.nuCount,0) nuCount, isnull(a.cr,0) Actualcr, round(isnull(cast(a.cr as decimal(18,3))/Total,0),4)*100 [prc],  round(isnull(a.nuCount,0)/(cast(qc as decimal(18,3))),4)*100 as [Percent]
	from #temp t left join #tempAnswered a on t.Question_Group_Heading = a.Question_Group_Heading
	order by prc desc	
end
else 
begin 
	select @maxRank = max(c.Ranking) 
		FROM NEW_REQUIREMENT c 
		join (select distinct requirement_id,Assessment_Id from REQUIREMENT_SETS s join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name where v.Selected = 1)
		s on c.Requirement_Id=s.Requirement_Id
		where s.Assessment_Id = @assessment_id 
	

	IF OBJECT_ID('tempdb..#TempR') IS NOT NULL DROP TABLE #TempR

	SELECT h.Question_Group_Heading,count(c.Requirement_Id) qc,  SUM(@maxRank-c.Ranking) cr, sum(sum(@maxrank - c.Ranking)) OVER() AS Total into #tempR
		FROM Answer_Requirements a 
		join NEW_REQUIREMENT c on a.Question_Or_Requirement_Id=c.Requirement_Id
		join QUESTION_GROUP_HEADING h on c.Question_Group_Heading_Id = h.Question_Group_Heading_Id
		join (select distinct requirement_id from REQUIREMENT_SETS s join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name where v.Selected = 1)
		s on c.Requirement_Id = s.Requirement_Id
		where a.Assessment_Id = @assessment_id 
		group by Question_Group_Heading

	select *, cast(cr as decimal(18,3))/Total prc from #tempR
	order by prc desc
end
END

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_getComponentsRankedCategories]'
GO

-- =============================================
-- Author:		hansbk
-- Create date: 8/1/2018
-- Description:	Stub needs completed
-- =============================================
ALTER PROCEDURE [dbo].[usp_getComponentsRankedCategories]
	@assessment_id int
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

/*
TODO this needs to take into account requirements vs questions
get the question set then for all the questions take the total risk (in this set only)
then calculate the total risk in each question_group_heading(category) 
then calculate the actual percentage of the total risk in each category 
order by the total
*/
declare @applicationMode nvarchar(50)

exec dbo.GetApplicationModeDefault @assessment_id, @ApplicationMode output


declare @maxRank int 
begin

	--declare @assessment_id int
	--set @assessment_id = 1041
	select @maxRank = max(c.Ranking) 
		FROM NEW_QUESTION c 
		join (select distinct question_id from NEW_QUESTION_SETS where Set_Name = 'Components')
		s on c.Question_Id = s.Question_Id

	

	IF OBJECT_ID('tempdb..#Temp') IS NOT NULL DROP TABLE #Temp
	IF OBJECT_ID('tempdb..#TempAnswered') IS NOT NULL DROP TABLE #TempAnswered

	SELECT h.Question_Group_Heading, isnull(count(c.question_id), 0) qc, isnull(SUM(@maxRank-c.Ranking),0) cr, sum(sum(@maxrank - c.Ranking)) OVER() AS Total into #temp
		FROM Answer_Components a 
		join NEW_QUESTION c on a.Question_Or_Requirement_Id = c.Question_Id
		join vQuestion_Headings h on c.Heading_Pair_Id = h.heading_pair_Id		
		join (
			select distinct s.question_id from NEW_QUESTION_SETS s 
				join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.New_Question_Set_Id				
				join UNIVERSAL_SAL_LEVEL ul on l.Universal_Sal_Level = ul.Universal_Sal_Level
				where s.Set_Name = 'Components'
		)
		s on c.Question_Id = s.Question_Id
		where a.Assessment_Id = @assessment_id and a.Answer_Text != 'NA'
		group by Question_Group_Heading
     
	 SELECT h.Question_Group_Heading, isnull(count(c.question_id), 0) nuCount, isnull(SUM(@maxRank-c.Ranking),0) cr into #tempAnswered
		FROM Answer_Components a 
		join NEW_QUESTION c on a.Question_Or_Requirement_Id = c.Question_Id
		join vQuestion_Headings h on c.Heading_Pair_Id = h.heading_pair_Id
		join (
			select distinct s.question_id from NEW_QUESTION_SETS s 
				join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.New_Question_Set_Id				
				join UNIVERSAL_SAL_LEVEL ul on l.Universal_Sal_Level = ul.Universal_Sal_Level
				where s.Set_Name = 'Components'
		)	s on c.Question_Id = s.Question_Id
		where a.Assessment_Id = @assessment_id and a.Answer_Text in ('N','U')
		group by Question_Group_Heading

	select t.*, isnull(a.nuCount,0) nuCount, isnull(a.cr,0) Actualcr, isnull(cast(a.cr as decimal(18,3))/Total,0)*100 [prc],  isnull(a.nuCount,0)/(cast(qc as decimal(18,3))) as [Percent]
	from #temp t left join #tempAnswered a on t.Question_Group_Heading = a.Question_Group_Heading
	order by prc desc	
end
END

GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[MATURITY_EXTRA]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_EXTRA] ALTER COLUMN [Question_text] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_EXTRA] ALTER COLUMN [CMMC2_Title] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[AcetAnswerDistribution]'
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[AcetAnswerDistribution]
	@Assessment_Id int,
	@targetLevel int
AS
BEGIN

	SET NOCOUNT ON;

	exec FillEmptyMaturityQuestionsForAnalysis @assessment_id

	declare @model_id int
	select @model_id = (select model_id from AVAILABLE_MATURITY_MODELS where assessment_id = @Assessment_id and selected = 1)


    select a.Answer_Text, count(*) as [Count] from maturity_questions q 
	left join answer a on a.Question_Or_Requirement_Id = q.Mat_Question_Id
	left join maturity_levels l on q.Maturity_Level_Id = l.Maturity_Level_Id
	where a.Question_Type = 'Maturity' and q.Maturity_Model_Id = @model_id
	and l.Level <= @targetLevel
	and a.Assessment_Id = @assessment_id
	group by Answer_Text


END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_CopyIntoSet]'
GO

-- =============================================
-- Author:		Barry Hansen
-- Create date: 2/18/2021
-- Description:	copy a base set into an existing custom set
-- =============================================
ALTER PROCEDURE [dbo].[usp_CopyIntoSet]
	-- Add the parameters for the stored procedure here
	@SourceSetName nvarchar(50),
	@DestinationSetName nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	--check to make sure the destination set is a custom set
	--cannot modify existing standards
	if exists (select * from sets where Set_Name = @DestinationSetName and Is_Custom = 0)
	begin
		raiserror('Destination set is not a custom set.  Standard sets cannot be modified.',18,1);
		return 
	end

    -- Insert statements for procedure here
	insert CUSTOM_STANDARD_BASE_STANDARD (Custom_Questionaire_Name,Base_Standard) values(@DestinationSetName,@SourceSetName)
	--do the headers first
	INSERT INTO [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS]
			   ([Sub_Heading_Question_Description]
			   ,[Question_Group_Heading_Id]
			   ,[Universal_Sub_Category_Id]
			   ,[Set_Name])
	select a.* from
	(select [Sub_Heading_Question_Description]
			   ,[Question_Group_Heading_Id]
			   ,[Universal_Sub_Category_Id]
			   ,@DestinationSetName as [Set_Name] from UNIVERSAL_SUB_CATEGORY_HEADINGS
	where Set_Name = @SourceSetName ) a 
	left join (select [Sub_Heading_Question_Description]
			   ,[Question_Group_Heading_Id]
			   ,[Universal_Sub_Category_Id]
			   ,@DestinationSetName as [Set_Name] from UNIVERSAL_SUB_CATEGORY_HEADINGS
	where Set_Name = @DestinationSetName ) b on a.Question_Group_Heading_Id=b.Question_Group_Heading_Id
	and a.Universal_Sub_Category_Id = b.Universal_Sub_Category_Id
	where b.Question_Group_Heading_Id is not null

	INSERT INTO [dbo].[NEW_REQUIREMENT]
           ([Requirement_Title]
           ,[Requirement_Text]
           ,[Supplemental_Info]
           ,[Standard_Category]
           ,[Standard_Sub_Category]
           ,[Weight]
           ,[Implementation_Recommendations]
           ,[Original_Set_Name]
           ,[NCSF_Cat_Id]
           ,[NCSF_Number]
           ,[Ranking]
           ,[Question_Group_Heading_Id]
           ,[ExaminationApproach]
           ,[Old_Id_For_Copy])
	select 		
		Requirement_Title,
		Requirement_Text,
		Supplemental_Info,
		Standard_Category,
		Standard_Sub_Category,
		Weight,
		Implementation_Recommendations,
		Original_Set_Name = @DestinationSetName,
		NCSF_Cat_Id,
		NCSF_Number,
		Ranking,
		Question_Group_Heading_Id,
		ExaminationApproach,
		r.Requirement_Id as Old_Id_For_Copy
		from REQUIREMENT_SETS s
	join NEW_REQUIREMENT r on s.Requirement_Id=r.Requirement_Id	
	where set_name = @SourceSetName
	order by Requirement_Sequence

	INSERT INTO [dbo].[REQUIREMENT_SETS]
           ([Requirement_Id]
           ,[Set_Name]
           ,[Requirement_Sequence])
	select nr.Requirement_Id,Set_name = @DestinationSetName,ns.Requirement_Sequence from NEW_REQUIREMENT nr 
	join (select s.Requirement_Id,s.Requirement_Sequence,s.Set_Name 
		from NEW_REQUIREMENT r join REQUIREMENT_SETS s on r.Requirement_Id=s.Requirement_Id 
		where s.Set_Name = @SourceSetName) ns on nr.Old_Id_For_Copy=ns.Requirement_Id
	where Original_Set_Name = @DestinationSetName

	insert into REQUIREMENT_LEVELS (Requirement_Id,Level_Type,Standard_Level)
	select a.Requirement_Id,b.Level_Type,b.Standard_Level from (
	select r.* from REQUIREMENT_SETS s join NEW_REQUIREMENT r
	on s.Requirement_Id = r.Requirement_Id
	where s.Set_Name = @DestinationSetName) a join (	
	select l.* from requirement_levels l 
	join REQUIREMENT_SETS s on l.Requirement_Id=s.Requirement_Id	
	where s.Set_Name = @SourceSetName) b on a.Old_Id_For_Copy=b.Requirement_Id


	insert into REQUIREMENT_QUESTIONS_SETS (Question_Id,Requirement_Id,Set_Name)
	select b.Question_Id,b.Requirement_Id,set_name = @DestinationSetName from REQUIREMENT_QUESTIONS_SETS a right join (
	select question_id,r.Requirement_Id
		from REQUIREMENT_QUESTIONS_SETS s
		join (select * from NEW_REQUIREMENT where Original_Set_Name= @DestinationSetName) r on s.Requirement_Id=r.Old_Id_For_Copy
		where set_name = @SourceSetName) b on a.Question_Id=b.Question_Id and a.Set_Name=@DestinationSetName
	where a.Question_Id is null

	insert REQUIREMENT_QUESTIONS (question_id,Requirement_Id)	
	select a.Question_Id,a.Requirement_Id from (
	select question_id,r.Requirement_Id
		from REQUIREMENT_QUESTIONS_SETS s
		join (select * from NEW_REQUIREMENT where Original_Set_Name= @DestinationSetName) r on s.Requirement_Id=r.Old_Id_For_Copy
		where set_name = @SourceSetName) a left join
		REQUIREMENT_QUESTIONS b on a.Question_Id=b.question_id and a.Requirement_Id=b.requirement_id
		where b.Question_Id is null
	
	INSERT INTO [dbo].[NEW_QUESTION_SETS]
           ([Set_Name]
           ,[Question_Id])    
	select a.set_name,a.Question_Id from (
	select set_name = @DestinationSetName,question_id
	from NEW_QUESTION_SETS where Set_Name = @SourceSetName) a 
	left join NEW_QUESTION_SETS b on a.Question_Id=b.Question_Id and a.set_name=b.Set_Name
	where b.Question_Id is null

	--insert the question sets records then join that with the old 
	--question sets records 		
	INSERT INTO [dbo].[NEW_QUESTION_LEVELS] ([New_Question_Set_Id],[Universal_Sal_Level])                
	select distinct b.New_Question_Set_Id,l.Universal_Sal_Level
	from NEW_QUESTION_SETS s
	join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.New_Question_Set_Id
	join (select ss.Question_Id,ss.New_Question_Set_Id 
	from NEW_QUESTION_SETS ss
		left join NEW_QUESTION_LEVELS ls on ss.New_Question_Set_Id=ls.New_Question_Set_Id
		where set_name = @DestinationSetName and ls.New_Question_Set_Id is null) b on s.Question_Id=b.Question_Id 
	where s.Set_Name = @SourceSetName


END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_CopyIntoSet_Delete]'
GO
-- =============================================
-- Author:		Barry Hansen
-- Create date: 2/18/2021
-- Description:	Delete a copied set
-- =============================================
ALTER PROCEDURE [dbo].[usp_CopyIntoSet_Delete]
	-- Add the parameters for the stored procedure here	
	@DestinationSetName nvarchar(50)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	
	--check to make sure the destination set is a custom set
	--cannot modify existing standards
	if exists (select * from sets where Set_Name = @DestinationSetName and Is_Custom = 0)
	begin
		raiserror('Destination set is not a custom set.  Standard sets cannot be modified.',18,1);
		return 
	end
		
	delete [dbo].[REQUIREMENT_SETS] 	where Set_Name = @DestinationSetName

	
	delete REQUIREMENT_QUESTIONS_SETS where set_name = @DestinationSetName
	--do the headers first
	delete UNIVERSAL_SUB_CATEGORY_HEADINGS where Set_Name=@DestinationSetName

	delete NEW_QUESTION_SETS where Set_Name = @DestinationSetName

	
	delete NEW_REQUIREMENT where Original_Set_Name = @destinationSetName

	-- Insert statements for procedure here
	delete CUSTOM_STANDARD_BASE_STANDARD where Custom_Questionaire_Name = @DestinationSetName	
	-- REQUIREMENT_QUESTIONS Should just cascade out
	
	
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[Get_Merge_Conflicts]'
GO
CREATE PROCEDURE [dbo].[Get_Merge_Conflicts]
    -- At least 2 assessments are required to merge
	@id1 int, @id2 int, 

    -- Up to 10 total assessments are allowed
    @id3 int = NULL, @id4 int = NULL, @id5 int = NULL, @id6 int = NULL, 
    @id7 int = NULL, @id8 int = NULL, @id9 int = NULL, @id10 int = NULL

AS
BEGIN
	SET NOCOUNT ON;
	
EXEC FillEmptyMaturityQuestionsForAnalysis @id1
EXEC FillEmptyMaturityQuestionsForAnalysis @id2
EXEC FillEmptyMaturityQuestionsForAnalysis @id3
EXEC FillEmptyMaturityQuestionsForAnalysis @id4
EXEC FillEmptyMaturityQuestionsForAnalysis @id5
EXEC FillEmptyMaturityQuestionsForAnalysis @id6
EXEC FillEmptyMaturityQuestionsForAnalysis @id7
EXEC FillEmptyMaturityQuestionsForAnalysis @id8
EXEC FillEmptyMaturityQuestionsForAnalysis @id9
EXEC FillEmptyMaturityQuestionsForAnalysis @id10

SELECT 
    (SELECT Question_Text FROM MATURITY_QUESTIONS WHERE Mat_Question_Id = a.Question_Or_Requirement_Id) as Question_Text,

    (SELECT Assessment_Name FROM INFORMATION WHERE Id = @id1) as Assessment_Name1,
    (SELECT Charter FROM ASSESSMENTS WHERE Assessment_Id = @id1) as Charter_Number,
    (SELECT Assets FROM ASSESSMENTS WHERE Assessment_Id = @id1) as Asset_Amount,
    a.Assessment_Id as Assessment_id1,
    a.Question_Or_Requirement_Id as Question_Or_Requirement_Id1,
    a.Answer_Text as Answer_Text1,
    a.Comment as Comment1,
    a.Alternate_Justification as Alt_Text1, 
    
    (SELECT Assessment_Name FROM INFORMATION WHERE Id = @id2) as Assessment_Name2,
    b.Assessment_Id as Assessment_id2,
    b.Question_Or_Requirement_Id as Question_Or_Requirement_Id2, 
    b.Answer_Text as Answer_Text2,
    b.Comment as Comment2,
    b.Alternate_Justification as Alt_Text2,

    (SELECT Assessment_Name FROM INFORMATION WHERE Id = @id3) as Assessment_Name3,
    c.Assessment_Id as Assessment_id3,
    c.Question_Or_Requirement_Id as Question_Or_Requirement_Id3, 
    c.Answer_Text as Answer_Text3,
    c.Comment as Comment3,
    c.Alternate_Justification as Alt_Text3,

    (SELECT Assessment_Name FROM INFORMATION WHERE Id = @id4) as Assessment_Name4,
    d.Assessment_Id as Assessment_id4, 
    d.Question_Or_Requirement_Id as Question_Or_Requirement_Id4, 
    d.Answer_Text as Answer_Text4,
    d.Comment as Comment4,
    d.Alternate_Justification as Alt_Text4,

    (SELECT Assessment_Name FROM INFORMATION WHERE Id = @id5) as Assessment_Name5,
    e.Assessment_Id as Assessment_id5, 
    e.Question_Or_Requirement_Id as Question_Or_Requirement_Id5, 
    e.Answer_Text as Answer_Text5,
    e.Comment as Comment5,
    e.Alternate_Justification as Alt_Text5,

    (SELECT Assessment_Name FROM INFORMATION WHERE Id = @id6) as Assessment_Name6,
    f.Assessment_Id as Assessment_id6, 
    f.Question_Or_Requirement_Id as Question_Or_Requirement_Id6, 
    f.Answer_Text as Answer_Text6,
    f.Comment as Comment6,
    f.Alternate_Justification as Alt_Text6,

    g.Assessment_Id as Assessment_id7,
    (SELECT Assessment_Name FROM INFORMATION WHERE Id = @id7) as Assessment_Name7,
    g.Question_Or_Requirement_Id as Question_Or_Requirement_Id7, 
    g.Answer_Text as Answer_Text7,
    g.Comment as Comment7,
    g.Alternate_Justification as Alt_Text7,

    (SELECT Assessment_Name FROM INFORMATION WHERE Id = @id8) as Assessment_Name8,
    h.Assessment_Id as Assessment_id8,
    h.Question_Or_Requirement_Id as Question_Or_Requirement_Id8, 
    h.Answer_Text as Answer_Text8,
    h.Comment as Comment8,
    h.Alternate_Justification as Alt_Text8,

    (SELECT Assessment_Name FROM INFORMATION WHERE Id = @id9) as Assessment_Name9,
    i.Assessment_Id as Assessment_id9,
    i.Question_Or_Requirement_Id as Question_Or_Requirement_Id9, 
    i.Answer_Text as Answer_Text9,
    i.Comment as Comment9,
    i.Alternate_Justification as Alt_Text9,

    (SELECT Assessment_Name FROM INFORMATION WHERE Id = @id10) as Assessment_Name10,
    j.Assessment_Id as Assessment_id10,
    j.Question_Or_Requirement_Id as Question_Or_Requirement_Id10, 
    j.Answer_Text as Answer_Text10,
    j.Comment as Comment10,
    j.Alternate_Justification as Alt_Text10


FROM (SELECT * FROM ANSWER WHERE Assessment_Id = @id1) a

FULL OUTER JOIN (SELECT * FROM ANSWER WHERE Assessment_Id = @id2) b 
ON (a.Question_Or_Requirement_Id = b.Question_Or_Requirement_Id) AND (a.Question_Type = b.Question_Type)

FULL OUTER JOIN (SELECT * FROM ANSWER WHERE Assessment_Id = @id3) c
ON (a.Question_Or_Requirement_Id = c.Question_Or_Requirement_Id) AND (a.Question_Type = c.Question_Type)

FULL OUTER JOIN (SELECT * FROM ANSWER WHERE Assessment_Id = @id4) d
ON (a.Question_Or_Requirement_Id = d.Question_Or_Requirement_Id) AND (a.Question_Type = d.Question_Type)

FULL OUTER JOIN (SELECT * FROM ANSWER WHERE Assessment_Id = @id5) e
ON (a.Question_Or_Requirement_Id = e.Question_Or_Requirement_Id) AND (a.Question_Type = e.Question_Type)

FULL OUTER JOIN (SELECT * FROM ANSWER WHERE Assessment_Id = @id6) f
ON (a.Question_Or_Requirement_Id = f.Question_Or_Requirement_Id) AND (a.Question_Type = f.Question_Type)

FULL OUTER JOIN (SELECT * FROM ANSWER WHERE Assessment_Id = @id7) g
ON (a.Question_Or_Requirement_Id = g.Question_Or_Requirement_Id) AND (a.Question_Type = g.Question_Type)

FULL OUTER JOIN (SELECT * FROM ANSWER WHERE Assessment_Id = @id8) h
ON (a.Question_Or_Requirement_Id = h.Question_Or_Requirement_Id) AND (a.Question_Type = h.Question_Type)

FULL OUTER JOIN (SELECT * FROM ANSWER WHERE Assessment_Id = @id9) i
ON (a.Question_Or_Requirement_Id = i.Question_Or_Requirement_Id) AND (a.Question_Type = i.Question_Type)

FULL OUTER JOIN (SELECT * FROM ANSWER WHERE Assessment_Id = @id10) j
ON (a.Question_Or_Requirement_Id = j.Question_Or_Requirement_Id) AND (a.Question_Type = j.Question_Type)

WHERE 
    -- Compare Exam 1 (a) to all other exams being merged
    ((a.Answer_Text != 'U' AND b.Answer_Text != 'U') AND (a.Answer_Text != b.Answer_Text)) OR
    ((a.Answer_Text != 'U' AND c.Answer_Text != 'U') AND (a.Answer_Text != c.Answer_Text)) OR
    ((a.Answer_Text != 'U' AND d.Answer_Text != 'U') AND (a.Answer_Text != d.Answer_Text)) OR
    ((a.Answer_Text != 'U' AND e.Answer_Text != 'U') AND (a.Answer_Text != e.Answer_Text)) OR
    ((a.Answer_Text != 'U' AND f.Answer_Text != 'U') AND (a.Answer_Text != f.Answer_Text)) OR
    ((a.Answer_Text != 'U' AND g.Answer_Text != 'U') AND (a.Answer_Text != g.Answer_Text)) OR
    ((a.Answer_Text != 'U' AND h.Answer_Text != 'U') AND (a.Answer_Text != h.Answer_Text)) OR
    ((a.Answer_Text != 'U' AND i.Answer_Text != 'U') AND (a.Answer_Text != i.Answer_Text)) OR
    ((a.Answer_Text != 'U' AND j.Answer_Text != 'U') AND (a.Answer_Text != j.Answer_Text)) OR
    (a.Answer_Text = 'A') OR (a.Comment != NULL) OR

    -- Compare Exam 2 (b) to all other exams being merged
    ((b.Answer_Text != 'U' AND c.Answer_Text != 'U') AND (b.Answer_Text != c.Answer_Text)) OR
    ((b.Answer_Text != 'U' AND d.Answer_Text != 'U') AND (b.Answer_Text != d.Answer_Text)) OR
    ((b.Answer_Text != 'U' AND e.Answer_Text != 'U') AND (b.Answer_Text != e.Answer_Text)) OR
    ((b.Answer_Text != 'U' AND f.Answer_Text != 'U') AND (b.Answer_Text != f.Answer_Text)) OR
    ((b.Answer_Text != 'U' AND g.Answer_Text != 'U') AND (b.Answer_Text != g.Answer_Text)) OR
    ((b.Answer_Text != 'U' AND h.Answer_Text != 'U') AND (b.Answer_Text != h.Answer_Text)) OR
    ((b.Answer_Text != 'U' AND i.Answer_Text != 'U') AND (b.Answer_Text != i.Answer_Text)) OR
    ((b.Answer_Text != 'U' AND j.Answer_Text != 'U') AND (b.Answer_Text != j.Answer_Text)) OR
    (b.Answer_Text = 'A') OR (b.Comment != NULL) OR

    -- Compare Exam 3 (c)
    ((c.Answer_Text != 'U' AND d.Answer_Text != 'U') AND (c.Answer_Text != d.Answer_Text)) OR
    ((c.Answer_Text != 'U' AND e.Answer_Text != 'U') AND (c.Answer_Text != e.Answer_Text)) OR
    ((c.Answer_Text != 'U' AND f.Answer_Text != 'U') AND (c.Answer_Text != f.Answer_Text)) OR
    ((c.Answer_Text != 'U' AND g.Answer_Text != 'U') AND (c.Answer_Text != g.Answer_Text)) OR
    ((c.Answer_Text != 'U' AND h.Answer_Text != 'U') AND (c.Answer_Text != h.Answer_Text)) OR
    ((c.Answer_Text != 'U' AND i.Answer_Text != 'U') AND (c.Answer_Text != i.Answer_Text)) OR
    ((c.Answer_Text != 'U' AND j.Answer_Text != 'U') AND (c.Answer_Text != j.Answer_Text)) OR
    (c.Answer_Text = 'A') OR (c.Comment != 'NULL') OR

    -- Compare Exam 4 (d)
    ((d.Answer_Text != 'U' AND e.Answer_Text != 'U') AND (d.Answer_Text != e.Answer_Text)) OR
    ((d.Answer_Text != 'U' AND f.Answer_Text != 'U') AND (d.Answer_Text != f.Answer_Text)) OR
    ((d.Answer_Text != 'U' AND g.Answer_Text != 'U') AND (d.Answer_Text != g.Answer_Text)) OR
    ((d.Answer_Text != 'U' AND h.Answer_Text != 'U') AND (d.Answer_Text != h.Answer_Text)) OR
    ((d.Answer_Text != 'U' AND i.Answer_Text != 'U') AND (d.Answer_Text != i.Answer_Text)) OR
    ((d.Answer_Text != 'U' AND j.Answer_Text != 'U') AND (d.Answer_Text != j.Answer_Text)) OR
    (d.Answer_Text = 'A') OR (d.Comment != 'NULL') OR

    -- Compare Exam 5 (e)
    ((e.Answer_Text != 'U' AND f.Answer_Text != 'U') AND (e.Answer_Text != f.Answer_Text)) OR
    ((e.Answer_Text != 'U' AND g.Answer_Text != 'U') AND (e.Answer_Text != g.Answer_Text)) OR
    ((e.Answer_Text != 'U' AND h.Answer_Text != 'U') AND (e.Answer_Text != h.Answer_Text)) OR
    ((e.Answer_Text != 'U' AND i.Answer_Text != 'U') AND (e.Answer_Text != i.Answer_Text)) OR
    ((e.Answer_Text != 'U' AND j.Answer_Text != 'U') AND (e.Answer_Text != j.Answer_Text)) OR
    (e.Answer_Text = 'A') OR (e.Comment != 'NULL') OR

    -- Compare Exam 6 (f)
    ((f.Answer_Text != 'U' AND g.Answer_Text != 'U') AND (f.Answer_Text != g.Answer_Text)) OR
    ((f.Answer_Text != 'U' AND h.Answer_Text != 'U') AND (f.Answer_Text != h.Answer_Text)) OR
    ((f.Answer_Text != 'U' AND i.Answer_Text != 'U') AND (f.Answer_Text != i.Answer_Text)) OR
    ((f.Answer_Text != 'U' AND j.Answer_Text != 'U') AND (f.Answer_Text != j.Answer_Text)) OR
    (f.Answer_Text = 'A') OR (f.Comment != 'NULL') OR

    -- Compare Exam 7 (g)
    ((g.Answer_Text != 'U' AND g.Answer_Text != 'U') AND (g.Answer_Text != g.Answer_Text)) OR
    ((g.Answer_Text != 'U' AND h.Answer_Text != 'U') AND (g.Answer_Text != h.Answer_Text)) OR
    ((g.Answer_Text != 'U' AND i.Answer_Text != 'U') AND (g.Answer_Text != i.Answer_Text)) OR
    ((g.Answer_Text != 'U' AND j.Answer_Text != 'U') AND (g.Answer_Text != j.Answer_Text)) OR
    (g.Answer_Text = 'A') OR (g.Comment != 'NULL') OR

    -- Compare Exam 8 (h)
    ((h.Answer_Text != 'U' AND i.Answer_Text != 'U') AND (h.Answer_Text != i.Answer_Text)) OR
    ((h.Answer_Text != 'U' AND j.Answer_Text != 'U') AND (h.Answer_Text != j.Answer_Text)) OR
    (h.Answer_Text = 'A') OR (h.Comment != 'NULL') OR

    -- Compare Exam 9 (i)
    ((i.Answer_Text != 'U' AND j.Answer_Text != 'U') AND (i.Answer_Text != j.Answer_Text)) OR
    (i.Answer_Text = 'A') OR (i.Comment != 'NULL')


END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[analytics_Compute_standard_all]'
GO
-- =============================================
-- Author:		Barry H
-- Create date: 4-19-2022
-- =============================================
ALTER PROCEDURE [dbo].[analytics_Compute_standard_all]
	@assessment_id int, --default assessment_id the mode will be pulled from this assessment
	@set_name nvarchar(20), --this is the standard set name key
	@sector_id int,
	@industry_id int	
AS
BEGIN
	SET NOCOUNT ON;
	declare @ApplicationMode nvarchar(20)

	exec dbo.GetApplicationModeDefault @assessment_id, @ApplicationMode output

if(@ApplicationMode = 'Questions Based')	
begin
	
	IF OBJECT_ID('tempdb..#Temp') IS NOT NULL DROP TABLE #Temp
	IF OBJECT_ID('tempdb..#Temp2') IS NOT NULL DROP TABLE #Temp2

	---This is step 1 get the base data
	
	select a.Assessment_Id,Question_Group_Heading, Answer_Text,count(answer_text) qc into #temp
	FROM Analytics_Answers a 
	join NEW_QUESTION c on a.Question_Or_Requirement_Id=c.Question_Id
	join vQuestion_Headings h on c.Heading_Pair_Id=h.heading_pair_Id		
	join NEW_QUESTION_SETS s on c.Question_Id = s.Question_Id			
	join AVAILABLE_STANDARDS avs on a.Assessment_Id=avs.Assessment_Id		
	left join DEMOGRAPHICS d on a.Assessment_Id = d.Assessment_Id
	where a.Answer_Text != 'NA' and a.question_type = 'Question' 												
			and s.Set_Name = @set_name
			and avs.Set_Name = @set_name
		and nullif(@sector_id,sectorid) is null
		and nullif(@industry_id,industryid) is null
	group by a.assessment_id, Question_Group_Heading, Answer_Text 
	order by Question_Group_Heading, Assessment_Id

	insert #temp
	select	assessment_id=@assessment_id,
	a.Question_Group_Heading,Answer_Text='Y',qc=0
	from (
	select Question_Group_Heading	FROM  
	NEW_QUESTION c 
	join vQuestion_Headings h on c.Heading_Pair_Id=h.heading_pair_Id		
	join NEW_QUESTION_SETS s on c.Question_Id = s.Question_Id			
	where  s.Set_Name = @set_name
	group by Question_Group_Heading) A left join #temp b on a.Question_Group_Heading=b.Question_Group_Heading
	where b.Question_Group_Heading is null

	--this is step 2 calculate percentages and group up by assessment id and question group
	select *, cast(qc as float)/cast( ISNULL(nullif(total,0),1) as float) [percentage] into #temp2
	from (		
		select Assessment_Id, Question_Group_Heading, answer_text,qc, sum(qc) over(partition by assessment_id,question_group_heading) as total
		from #temp
		group by Assessment_Id,Question_Group_Heading, answer_text, qc)  a

	--this is step 3 fix the outside cases where the answers are either all no or all yes
	--case 100% No
	--case 100% Yes
	--case mixed yes and no
	insert #temp2
	select assessment_id,QUESTION_GROUP_HEADING,'Y',qc,total, [percentage]=0 from #temp2 where Answer_Text = 'N' and qc=total
	insert #temp2
	select assessment_id,QUESTION_GROUP_HEADING,'Y',qc,total, [percentage] from #temp2 where Answer_Text = 'Y' 


	--finally step 4 give me the answers with the calculated median
	 select a.QUESTION_GROUP_HEADING, a.minimum, a.maximum, a.average, b.median--, b.rown 
          from 
          (
                 select QUESTION_GROUP_HEADING, minimum, maximum, average 
                 from (
                                    select question_group_heading, round((ISNULL(min([percentage]),0) *100),1) minimum, 
                                       round((ISNULL(max(percentage),0) *100),1) maximum, 
                                       round((ISNULL(AVG(percentage),0) *100),1) average
                                       from #Temp2
                                       group by Question_Group_Heading
                 ) qryA
          ) a
          join
          (
                 select QUESTION_GROUP_HEADING, median, rown 
                 from 
                 (
                         select QUESTION_GROUP_HEADING, 
                                    isnull(PERCENTILE_disc(0.5) WITHIN GROUP (ORDER BY [percentage]) OVER (PARTITION BY Question_Group_Heading),0) AS median,
                                    ROW_NUMBER() OVER (PARTITION BY question_group_heading ORDER BY question_group_heading) rown
                         from (
                                           select question_group_heading, 
                                                  round((ISNULL([percentage],0) *100),0) [percentage]
                                              from #Temp2
                         ) qry
                 ) qryB
                 where rown = 1
          ) b ON a.QUESTION_GROUP_HEADING = b.QUESTION_GROUP_HEADING
end
else 
begin 
	IF OBJECT_ID('tempdb..#tempR') IS NOT NULL DROP TABLE #tempR	 
	IF OBJECT_ID('tempdb..#tempR2') IS NOT NULL DROP TABLE #tempR2	 

	
	select a.Assessment_Id,Standard_Category as Question_Group_Heading, Answer_Text
	,count(answer_text) qc into #tempR
	FROM Analytics_Answers a 
	join NEW_REQUIREMENT c on a.Question_Or_Requirement_Id=c.Requirement_Id
	join REQUIREMENT_SETS s on c.Requirement_Id=s.Requirement_Id	
	join AVAILABLE_STANDARDS avs on a.Assessment_Id=avs.Assessment_Id		
	left join DEMOGRAPHICS d on a.Assessment_Id = d.Assessment_Id
	where a.Answer_Text != 'NA' and a.question_type = 'Requirement' 												
			and s.Set_Name = @set_name
			and avs.Set_Name = @set_name
			and nullif(@sector_id,sectorid) is null
			and nullif(@industry_id,industryid) is null
	group by a.assessment_id, Standard_Category, Answer_Text
	order by Question_Group_Heading, Assessment_Id

	insert #tempR
	select	assessment_id=@assessment_id,
	a.Question_Group_Heading,Answer_Text='Y',qc=0
	from (
	select distinct STANDARD_CATEGORY as Question_Group_Heading	FROM  
	NEW_REQUIREMENT c
	join REQUIREMENT_SETS s on c.Requirement_Id=s.Requirement_Id			
	where  s.Set_Name = @set_name
	group by Standard_Category) A left join #tempR b on a.Question_Group_Heading=b.Question_Group_Heading
	where b.Question_Group_Heading is null






	select *, cast(qc as float)/cast( ISNULL(nullif(total,0),1) as float) [percentage] into #tempR2
	from (		
		select Assessment_Id, Question_Group_Heading, answer_text,qc, sum(qc) over(partition by assessment_id,question_group_heading) as total
		from #tempR
		group by Assessment_Id,Question_Group_Heading, answer_text, qc)  a

	--case 100% No
	--case 100% Yes
	--case mixed yes and no
	insert #tempR2
	select assessment_id,QUESTION_GROUP_HEADING,'Y',qc,total, [percentage]=0 from #tempR2 where Answer_Text = 'N' and qc=total
	insert #tempR2
	select assessment_id,QUESTION_GROUP_HEADING,'Y',qc,total, [percentage] from #tempR2 where Answer_Text = 'Y' 


  select a.QUESTION_GROUP_HEADING, a.minimum, a.maximum, a.average, b.median--, b.rown 
          from 
          (
				select question_group_heading, round((ISNULL(min([percentage]),0) *100),1) minimum, 
                round((ISNULL(max(percentage),0) *100),1) maximum, 
                round((ISNULL(AVG(percentage),0) *100),1) average
                from #tempR2
                group by Question_Group_Heading          
          ) a
          left join
          (
                 select QUESTION_GROUP_HEADING, median, rown 
                 from 
                 (
                         select QUESTION_GROUP_HEADING, 
                                    isnull(PERCENTILE_disc(0.5) WITHIN GROUP (ORDER BY [percentage]) OVER (PARTITION BY Question_Group_Heading),0) AS median,
                                    ROW_NUMBER() OVER (PARTITION BY question_group_heading ORDER BY question_group_heading) rown
                         from (
                                           select question_group_heading, 
                                                  round((ISNULL([percentage],0) *100),0) [percentage]
                                              from #tempR2
                         ) qry
                 ) qryB
                 where rown = 1
          ) b ON a.QUESTION_GROUP_HEADING = b.QUESTION_GROUP_HEADING
end
END



GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[DeleteUser]'
GO
-- =============================================
-- Author:		CSET Team
-- Create date: 2021-04-08
-- Description:	Deletes a user from the CSET database.  
--              Supply a user ID argument to delete a single user, or
--              use an argument of -1 to delete all users.
-- =============================================
ALTER PROCEDURE [dbo].[DeleteUser]
	@userid nvarchar(10)

AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    if @userid < 0
		BEGIN
			delete from [ASSESSMENT_CONTACTS];
			delete from [FINDING_CONTACT];
			delete from [USER_SECURITY_QUESTIONS];
			delete from [USERS];
		END
	ELSE
		BEGIN
			select [assessment_contact_id] into #xyz from [ASSESSMENT_CONTACTS] where [userid] = @userid;
			delete from [FINDING_CONTACT] where [Assessment_Contact_Id] in (select [assessment_contact_id] from #xyz);
			delete from [ASSESSMENT_CONTACTS] where [Assessment_Contact_Id] in (select [assessment_contact_id] from #xyz);

			delete from [USER_SECURITY_QUESTIONS] where [userid] = @userid;

			delete from [USERS] where [UserId] = @userid;
		END
END


GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[ANSWER_ORDER]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[ANSWER_ORDER] ALTER COLUMN [Answer_Text] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_ANSWER_ORDER] on [dbo].[ANSWER_ORDER]'
GO
ALTER TABLE [dbo].[ANSWER_ORDER] ADD CONSTRAINT [PK_ANSWER_ORDER] PRIMARY KEY CLUSTERED ([Answer_Text])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_getVADRSummary]'
GO
-- =============================================
-- Author:                   Luke Galloway, Lilianne Cantillo
-- Create date: 5-17-2022
-- Description:             Gets the summary data for VADR report. 
-- =============================================
ALTER PROCEDURE [dbo].[usp_getVADRSummary]
@assessment_id int
AS
BEGIN
                SET NOCOUNT ON;



                
                select a.Answer_Full_Name, a.Level_Name, a.Answer_Text, 
                                isnull(m.qc,0) as [qc],
                                isnull(m.Total,0) as [Total], 
                                IsNull(Cast(IsNull(Round((Cast((qc) as float)/(IsNull(NullIf(Total,0),1)))*100, 2), 0) as float),0) as [Percent] 
                from 
                (select * from MATURITY_LEVELS, ANSWER_LOOKUP 
                                where Maturity_Model_Id = 7 and 
                                answer_text in ('Y','N','A','U') ) a 
                                join 
                                (
                                                                SELECT l.Level_Name, a.Answer_Text, isnull(count(question_or_requirement_id),0) qc , SUM(count(Question_Or_Requirement_Id)) OVER(PARTITION BY Level_Name) AS Total
                                                                FROM Answer_Maturity a 
                                                                join MATURITY_QUESTIONS q on a.Question_Or_Requirement_Id = q.Mat_Question_Id
                                                                join MATURITY_LEVELS l on a.Maturity_Level_Id = l.Maturity_Level_Id
                                                                where q.Parent_Question_Id is null -- don't count child freeform text questions; they aren't answered y,n, etc.
                                                                                and a.Assessment_Id = @assessment_id and Is_Maturity = 1 --@assessment_id 
                                                                group by a.Assessment_Id, l.Maturity_Level_Id, l.Level_Name, a.Answer_Text
                                )m on a.Level_Name=m.Level_Name and a.Answer_Text=m.Answer_Text                         
                JOIN ANSWER_ORDER o on a.Answer_Text=o.answer_text
                order by a.Level,o.answer_order

END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_getVADRSummaryOverall]'
GO
-- =============================================
-- Author:                   Luke Galloway, Lilianne Cantillo
-- Create date: 5-17-2022
-- Description:             Gets the summary overall data for VADR report. 
-- =============================================
ALTER PROCEDURE [dbo].[usp_getVADRSummaryOverall]
@assessment_id int
AS
BEGIN
                SET NOCOUNT ON;

                select a.Answer_Full_Name, a.Answer_Text, 
                                isnull(m.qc,0) as [qc],
                                isnull(m.Total,0) as [Total], 
                                IsNull(Cast(IsNull(Round((Cast((qc) as float)/(IsNull(NullIf(Total,0),1)))*100, 2), 0) as float),0) as [Percent] 
                from 
                (select * from ANSWER_LOOKUP 
                where answer_text in ('Y','N','U','A') ) a left join (
SELECT a.Answer_Text, isnull(count(question_or_requirement_id),0) qc , SUM(count(Question_Or_Requirement_Id)) OVER(PARTITION BY assessment_id) AS Total
                                                FROM Answer_Maturity a 
                                                join MATURITY_LEVELS l on a.Maturity_Level_Id = l.Maturity_Level_Id --VADR uses all Levels, hence Level 1
                                                join MATURITY_QUESTIONS q on a.Question_Or_Requirement_Id = q.Mat_Question_Id
                                                where q.Parent_Question_Id is null -- don't count child freeform text questions; they aren't answered y,n, etc.
                                                                and a.Assessment_Id = @assessment_id and Is_Maturity = 1 
                                                group by a.Assessment_Id, a.Answer_Text)
                                                m on a.Answer_Text=m.Answer_Text                            
                JOIN ANSWER_ORDER o on a.Answer_Text=o.answer_text
                order by o.answer_order

END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[analytics_compute_single_averages_standard]'
GO
-- =============================================
-- Author:		Barry
-- Create date: 4/21/2022
-- Description:	average for maturity model
-- =============================================
ALTER PROCEDURE [dbo].[analytics_compute_single_averages_standard]
	@assessment_id int,
	@set_name nvarchar(20)
AS
BEGIN
SET NOCOUNT ON;
	declare @ApplicationMode nvarchar(20)

	exec dbo.GetApplicationModeDefault @assessment_id, @ApplicationMode output

if(@ApplicationMode = 'Questions Based')	
begin
	IF OBJECT_ID('tempdb..#temp') IS NOT NULL DROP TABLE #temp	 
	
	select a.Assessment_Id,Question_Group_Heading, Answer_Text,count(answer_text) qc into #temp
	FROM Analytics_Answers a 
	join NEW_QUESTION c on a.Question_Or_Requirement_Id=c.Question_Id
	join vQuestion_Headings h on c.Heading_Pair_Id=h.heading_pair_Id		
	join NEW_QUESTION_SETS s on c.Question_Id = s.Question_Id			
	join AVAILABLE_STANDARDS avs on a.Assessment_Id=avs.Assessment_Id		
	left join DEMOGRAPHICS d on a.Assessment_Id = d.Assessment_Id
	where a.Answer_Text != 'NA' and a.question_type = 'Question' 												
			and s.Set_Name = @set_name
			and avs.Set_Name = @set_name
			and a.Assessment_Id = @assessment_id
	group by a.assessment_id, Question_Group_Heading, Answer_Text 
	order by Question_Group_Heading, Assessment_Id

	select 
	all1.Question_Group_Heading,	
	round((ISNULL(all2.percentage,0) *100),0) average 
	from (
	select distinct Question_Group_Heading,[percentage] = 0
	FROM NEW_QUESTION c 
	join vQUESTION_HEADINGS h on c.Heading_Pair_Id=h.Heading_Pair_Id
	join NEW_QUESTION_SETS s on c.Question_Id=s.Question_Id
	where Set_Name = @set_name)
		all1 left join (		
			select *, cast(qc as float)/cast( ISNULL(nullif(total,0),1) as float) [percentage]
			from (		
				select Assessment_Id, Question_Group_Heading, answer_text,qc, sum(qc) over(partition by assessment_id,question_group_heading) as total
				from #temp
				group by Assessment_Id,Question_Group_Heading, answer_text, qc)  a
		where answer_text = 'Y'		
	) all2 on all1.Question_Group_Heading=all2.Question_Group_Heading
end
else 
begin 
	IF OBJECT_ID('tempdb..#tempR') IS NOT NULL DROP TABLE #tempR	 

	
	select a.Assessment_Id,Standard_Category as Question_Group_Heading, Answer_Text
	,count(answer_text) qc into #tempR
	FROM Analytics_Answers a 
	join NEW_REQUIREMENT c on a.Question_Or_Requirement_Id=c.Requirement_Id
	join REQUIREMENT_SETS s on c.Requirement_Id=s.Requirement_Id	
	join AVAILABLE_STANDARDS avs on a.Assessment_Id=avs.Assessment_Id		
	left join DEMOGRAPHICS d on a.Assessment_Id = d.Assessment_Id
	where a.Answer_Text != 'NA' and a.question_type = 'Requirement' 												
			and s.Set_Name = @set_name
			and avs.Set_Name = @set_name			
			and a.assessment_id= @assessment_id
	group by a.assessment_id, Standard_Category, Answer_Text
	order by Question_Group_Heading, Assessment_Id

	select 
	all1.Question_Group_Heading,	
	round((ISNULL(all2.[percentage],0) *100),0) [percentage]
	from (
	select distinct Standard_Category as Question_Group_Heading, [Percentage] = 0
	FROM NEW_REQUIREMENT c 
	join REQUIREMENT_SETS s on c.Requirement_Id=s.Requirement_Id	
	where Set_Name = @set_name)
		all1 left join (		
			select *, cast(qc as float)/cast( ISNULL(nullif(total,0),1) as float) [percentage]
			from (		
				select Assessment_Id, Question_Group_Heading, answer_text,qc, sum(qc) over(partition by assessment_id,question_group_heading) as total
				from #tempR
				group by Assessment_Id,Question_Group_Heading, answer_text, qc)  a
		where answer_text = 'Y')
	 all2 on all1.Question_Group_Heading=all2.Question_Group_Heading
end
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_getRRASummary]'
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[usp_getRRASummary]
@assessment_id int
AS
BEGIN
	SET NOCOUNT ON;

	select a.Answer_Full_Name, a.Level_Name, a.Answer_Text, 
		isnull(m.qc,0) as [qc],
		isnull(m.Total,0) as [Total], 
		IsNull(Cast(IsNull(Round((Cast((qc) as float)/(IsNull(NullIf(Total,0),1)))*100, 2), 0) as float),0) as [Percent] 
	from 
	(select * from MATURITY_LEVELS, ANSWER_LOOKUP 
	where Maturity_Model_Id = 5 and answer_text in ('Y','N','U') ) a left join (
	SELECT l.Level_Name, a.Answer_Text, isnull(count(question_or_requirement_id),0) qc , SUM(count(Question_Or_Requirement_Id)) OVER(PARTITION BY Level_Name) AS Total
			FROM Answer_Maturity a 
			join MATURITY_LEVELS l on a.Maturity_Level_Id = l.Maturity_Level_Id
			where a.Assessment_Id = @assessment_id and Is_Maturity = 1 --@assessment_id 
			group by a.Assessment_Id, l.Maturity_Level_Id, l.Level_Name, a.Answer_Text)
			m on a.Level_Name=m.Level_Name and a.Answer_Text=m.Answer_Text		
	JOIN ANSWER_ORDER o on a.Answer_Text=o.answer_text
	order by a.Level,o.answer_order

END



GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_getRRASummaryOverall]'
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[usp_getRRASummaryOverall]
@assessment_id int
AS
BEGIN
	SET NOCOUNT ON;

	select a.Answer_Full_Name, a.Answer_Text, 
		isnull(m.qc,0) as [qc],
		isnull(m.Total,0) as [Total], 
		IsNull(Cast(IsNull(Round((Cast((qc) as float)/(IsNull(NullIf(Total,0),1)))*100, 2), 0) as float),0) as [Percent] 
	from 
	(select * from ANSWER_LOOKUP 
	where answer_text in ('Y','N','U') ) a left join (
SELECT a.Answer_Text, isnull(count(question_or_requirement_id),0) qc , SUM(count(Question_Or_Requirement_Id)) OVER(PARTITION BY assessment_id) AS Total
			FROM Answer_Maturity a 
			join MATURITY_LEVELS l on a.Maturity_Level_Id = l.Maturity_Level_Id
			where a.Assessment_Id = @assessment_id and Is_Maturity = 1 --@assessment_id 
			group by a.Assessment_Id, a.Answer_Text)
			m on a.Answer_Text=m.Answer_Text		
	JOIN ANSWER_ORDER o on a.Answer_Text=o.answer_text
	order by o.answer_order

END



GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_GetRankedQuestions]'
GO
-- =============================================
-- Author:		Mitch Carroll
-- Create date: 9 Aug 2018
-- Description:	Ranked Questions
-- =============================================
ALTER PROCEDURE [dbo].[usp_GetRankedQuestions]
@assessment_id INT
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
	EXECUTE [dbo].[FillEmptyQuestionsForAnalysis]  @Assessment_Id

	-- get the application mode
	declare @applicationMode nvarchar(50)
	exec dbo.GetApplicationModeDefault @assessment_id, @ApplicationMode output

	-- get currently selected sets
	IF OBJECT_ID('tempdb..#mySets') IS NOT NULL DROP TABLE #mySets
	select set_name into #mySets from AVAILABLE_STANDARDS where Assessment_Id = @assessment_Id and Selected = 1
	

	if(@ApplicationMode = 'Questions Based')	
	begin
		SELECT Short_Name as [Standard], 
			Question_Group_Heading as [Category], 
			ROW_NUMBER() over (order by c.ranking asc) as [Rank], 
			Simple_Question as [QuestionText], 
			a.Answer_ID as [AnswerID],
			Answer_Text as [AnswerText], 
			c.Universal_Sal_Level as [Level], 
			CONVERT(varchar(10), a.Question_Number) as [QuestionRef],
			a.Question_Or_Requirement_Id as [QuestionOrRequirementID]
			FROM Answer_Questions a 
			join NEW_QUESTION c on a.Question_Or_Requirement_Id = c.Question_Id
			join vQuestion_Headings h on c.Heading_Pair_Id = h.heading_pair_Id		
			join (
				select distinct s.question_id, ns.Short_Name from NEW_QUESTION_SETS s 
					join AVAILABLE_STANDARDS v on s.Set_Name = v.Set_Name 								
					join SETS ns on s.Set_Name = ns.Set_Name
					join NEW_QUESTION_LEVELS l on s.New_Question_Set_Id = l.New_Question_Set_Id
					join STANDARD_SELECTION ss on v.Assessment_Id = ss.Assessment_Id
					join UNIVERSAL_SAL_LEVEL ul on ss.Selected_Sal_Level = ul.Full_Name_Sal
					where v.Selected = 1 and v.Assessment_Id = @assessment_id and l.Universal_Sal_Level = ul.Universal_Sal_Level
			)	s on c.Question_Id = s.Question_Id		
			where a.Assessment_Id = @assessment_id and a.Answer_Text in ('N','U')
			order by c.Ranking		
	end
	else
	begin
		SELECT Short_Name [standard], 
			Standard_Category as [Category], 
			ROW_NUMBER() over (order by req.ranking asc) as [Rank], 
			Requirement_Text as [QuestionText], 
			Answer_Id as [AnswerID],
			Answer_Text as [AnswerText], 
			u.Universal_Sal_Level as [Level], 
			requirement_title as [QuestionRef],
			rs.Requirement_Id as [QuestionOrRequirementID]
			from REQUIREMENT_SETS rs
				left join ANSWER ans on ans.Question_Or_Requirement_Id = rs.Requirement_Id
				left join [SETS] s on rs.Set_Name = s.Set_Name
				left join NEW_REQUIREMENT req on rs.Requirement_Id = req.Requirement_Id
				left join REQUIREMENT_LEVELS rl on rl.Requirement_Id = req.Requirement_Id		
				left join STANDARD_SELECTION ss on ss.Assessment_Id = @assessment_Id
				left join UNIVERSAL_SAL_LEVEL u on u.Full_Name_Sal = ss.Selected_Sal_Level
			where rs.Set_Name in (select set_name from #mySets)
			and ans.Assessment_Id = @assessment_id
			and rl.Standard_Level = u.Universal_Sal_Level and ans.Answer_Text in ('N','U')
			order by req.Ranking		
	end
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[Split]'
GO
ALTER FUNCTION [dbo].[Split](@string nvarchar(500))
RETURNS @TableValues TABLE (Value nvarchar(4000),Id bigint identity(1,1))
AS
BEGIN
declare @pos int
declare @piece nvarchar(500)
DECLARE @id INT
SET @id = 1

-- Need to tack a delimiter onto the end of the input string if one doesn’t exist
if right(rtrim(@string),1) <> ','
 set @string = @string  + ','

set @pos =  patindex('%,%' , @string)
while @pos <> 0
begin
 set @piece = left(@string, @pos - 1)
 
 -- You have a piece of data, so insert it, print it, do whatever you want to with it.
 INSERT @TableValues
         ( Value)
 VALUES  ( @piece)
SET @id=@id +1            

 set @string = stuff(@string, 1, @pos, '')
 set @pos =  patindex('%,%' , @string)
END
RETURN 
END 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[COMPONENT_SYMBOLS_GM_TO_CSET]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[COMPONENT_SYMBOLS_GM_TO_CSET] ALTER COLUMN [GM_FingerType] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_COMPONENT_SYMBOLS_GM_TO_CSET] on [dbo].[COMPONENT_SYMBOLS_GM_TO_CSET]'
GO
ALTER TABLE [dbo].[COMPONENT_SYMBOLS_GM_TO_CSET] ADD CONSTRAINT [PK_COMPONENT_SYMBOLS_GM_TO_CSET] PRIMARY KEY CLUSTERED ([GM_FingerType])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[CONFIDENTIAL_TYPE]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CONFIDENTIAL_TYPE] ALTER COLUMN [ConfidentialTypeKey] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[CSET_VERSION]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CSET_VERSION] ALTER COLUMN [Cset_Version] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[CSET_VERSION] ALTER COLUMN [Build_Number] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[DIAGRAM_TEMPLATES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[DIAGRAM_TEMPLATES] ALTER COLUMN [Diagram_Markup] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[EXTRA_ACET_MAPPING]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[EXTRA_ACET_MAPPING] ALTER COLUMN [Set_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_EXTRA_ACET_MAPPING] on [dbo].[EXTRA_ACET_MAPPING]'
GO
ALTER TABLE [dbo].[EXTRA_ACET_MAPPING] ADD CONSTRAINT [PK_EXTRA_ACET_MAPPING] PRIMARY KEY CLUSTERED ([Set_Name], [Question_Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[GLOBAL_PROPERTIES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GLOBAL_PROPERTIES] ALTER COLUMN [Property] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GLOBAL_PROPERTIES] ALTER COLUMN [Property_Value] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_GlobalProperties] on [dbo].[GLOBAL_PROPERTIES]'
GO
ALTER TABLE [dbo].[GLOBAL_PROPERTIES] ADD CONSTRAINT [PK_GlobalProperties] PRIMARY KEY CLUSTERED ([Property])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[GLOSSARY]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GLOSSARY] ALTER COLUMN [Term] [nvarchar] (100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[GLOSSARY] ALTER COLUMN [Definition] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_GLOSSARY] on [dbo].[GLOSSARY]'
GO
ALTER TABLE [dbo].[GLOSSARY] ADD CONSTRAINT [PK_GLOSSARY] PRIMARY KEY CLUSTERED ([Maturity_Model_Id], [Term])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[INSTALLATION]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[INSTALLATION] ALTER COLUMN [JWT_Secret] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[INSTALLATION] ALTER COLUMN [Installation_ID] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_INSTALLATION] on [dbo].[INSTALLATION]'
GO
ALTER TABLE [dbo].[INSTALLATION] ADD CONSTRAINT [PK_INSTALLATION] PRIMARY KEY CLUSTERED ([Installation_ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[JWT]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[JWT] ALTER COLUMN [Secret] [nvarchar] (200) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_JWT] on [dbo].[JWT]'
GO
ALTER TABLE [dbo].[JWT] ADD CONSTRAINT [PK_JWT] PRIMARY KEY CLUSTERED ([Secret])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[LEVEL_BACKUP_ACET]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[LEVEL_BACKUP_ACET] ALTER COLUMN [Standard_Level] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_LEVEL_BACKUP_ACET] on [dbo].[LEVEL_BACKUP_ACET]'
GO
ALTER TABLE [dbo].[LEVEL_BACKUP_ACET] ADD CONSTRAINT [PK_LEVEL_BACKUP_ACET] PRIMARY KEY CLUSTERED ([requirement_id], [Standard_Level])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[LEVEL_BACKUP_ACET_QUESTIONS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[LEVEL_BACKUP_ACET_QUESTIONS] ALTER COLUMN [universal_sal_level] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_LEVEL_BACKUP_ACET_QUESTIONS] on [dbo].[LEVEL_BACKUP_ACET_QUESTIONS]'
GO
ALTER TABLE [dbo].[LEVEL_BACKUP_ACET_QUESTIONS] ADD CONSTRAINT [PK_LEVEL_BACKUP_ACET_QUESTIONS] PRIMARY KEY CLUSTERED ([New_Question_Set_Id], [universal_sal_level])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[MATURITY_POSSIBLE_ANSWERS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[MATURITY_POSSIBLE_ANSWERS] ALTER COLUMN [Maturity_Answer] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_MATURITY_POSSIBLE_ANSWERS] on [dbo].[MATURITY_POSSIBLE_ANSWERS]'
GO
ALTER TABLE [dbo].[MATURITY_POSSIBLE_ANSWERS] ADD CONSTRAINT [PK_MATURITY_POSSIBLE_ANSWERS] PRIMARY KEY CLUSTERED ([Maturity_Model_Id], [Maturity_Answer])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[NAVIGATION_STATE]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NAVIGATION_STATE] ALTER COLUMN [Name] [nvarchar] (450) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_NAVIGATION_STATE] on [dbo].[NAVIGATION_STATE]'
GO
ALTER TABLE [dbo].[NAVIGATION_STATE] ADD CONSTRAINT [PK_NAVIGATION_STATE] PRIMARY KEY CLUSTERED ([Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[NIST_SAL_INFO_TYPES_DEFAULTS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES_DEFAULTS] ALTER COLUMN [Type_Value] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES_DEFAULTS] ALTER COLUMN [Confidentiality_Value] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES_DEFAULTS] ALTER COLUMN [Confidentiality_Special_Factor] [nvarchar] (1500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES_DEFAULTS] ALTER COLUMN [Integrity_Value] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES_DEFAULTS] ALTER COLUMN [Integrity_Special_Factor] [nvarchar] (1500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES_DEFAULTS] ALTER COLUMN [Availability_Value] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES_DEFAULTS] ALTER COLUMN [Availability_Special_Factor] [nvarchar] (1500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES_DEFAULTS] ALTER COLUMN [Area] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES_DEFAULTS] ALTER COLUMN [NIST_Number] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_NIST_SAL_INFO_TYPES_DEFAULTS] on [dbo].[NIST_SAL_INFO_TYPES_DEFAULTS]'
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES_DEFAULTS] ADD CONSTRAINT [PK_NIST_SAL_INFO_TYPES_DEFAULTS] PRIMARY KEY CLUSTERED ([Type_Value])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[QUESTION_GROUP_TYPE]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[QUESTION_GROUP_TYPE] ALTER COLUMN [Group_Name] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[QUESTION_GROUP_TYPE] ALTER COLUMN [Scoring_Group] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[QUESTION_GROUP_TYPE] ALTER COLUMN [Scoring_Type] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[QUESTION_GROUP_TYPE] ALTER COLUMN [Group_Header] [nvarchar] (2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating index [IX_QUESTION_GROUP_TYPE] on [dbo].[QUESTION_GROUP_TYPE]'
GO
CREATE UNIQUE NONCLUSTERED INDEX [IX_QUESTION_GROUP_TYPE] ON [dbo].[QUESTION_GROUP_TYPE] ([Group_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[RECENT_FILES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[RECENT_FILES] ALTER COLUMN [AssessmentName] [nvarchar] (512) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[RECENT_FILES] ALTER COLUMN [Filename] [nvarchar] (900) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[RECENT_FILES] ALTER COLUMN [FilePath] [nvarchar] (1024) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[REQUIREMENT_REFERENCE_TEXT]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[REQUIREMENT_REFERENCE_TEXT] ALTER COLUMN [Reference_Text] [nvarchar] (max) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[SECURITY_QUESTION]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SECURITY_QUESTION] ALTER COLUMN [SecurityQuestion] [nvarchar] (500) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[SHAPE_TYPES]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SHAPE_TYPES] ALTER COLUMN [Diagram_Type_XML] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SHAPE_TYPES] ALTER COLUMN [Telerik_Shape_Type] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SHAPE_TYPES] ALTER COLUMN [Visio_Shape_Type] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SHAPE_TYPES] ALTER COLUMN [DisplayName] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_Shape_Types] on [dbo].[SHAPE_TYPES]'
GO
ALTER TABLE [dbo].[SHAPE_TYPES] ADD CONSTRAINT [PK_Shape_Types] PRIMARY KEY CLUSTERED ([Diagram_Type_XML])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[SP80053_FAMILY_ABBREVIATIONS]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[SP80053_FAMILY_ABBREVIATIONS] ALTER COLUMN [ID] [nvarchar] (50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [PK_NEW_53_FAMILY_ABBREVIATIONS] on [dbo].[SP80053_FAMILY_ABBREVIATIONS]'
GO
ALTER TABLE [dbo].[SP80053_FAMILY_ABBREVIATIONS] ADD CONSTRAINT [PK_NEW_53_FAMILY_ABBREVIATIONS] PRIMARY KEY CLUSTERED ([ID])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[UNIVERSAL_AREA]'
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[UNIVERSAL_AREA] ALTER COLUMN [Universal_Area_Name] [nvarchar] (60) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
ALTER TABLE [dbo].[UNIVERSAL_AREA] ALTER COLUMN [Comments] [nvarchar] (2000) COLLATE SQL_Latin1_General_CP1_CI_AS NULL
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating primary key [UNIVERSAL_AREA_PK] on [dbo].[UNIVERSAL_AREA]'
GO
ALTER TABLE [dbo].[UNIVERSAL_AREA] ADD CONSTRAINT [UNIVERSAL_AREA_PK] PRIMARY KEY CLUSTERED ([Universal_Area_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[CheckHeading]'
GO
-- =============================================
-- Author:		<Author,,Name>
-- Create date: <Create Date,,>
-- Description:	<Description,,>
-- =============================================
ALTER PROCEDURE [dbo].[CheckHeading]
	-- Add the parameters for the stored procedure here
	@Heading nvarchar(250)
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	if not exists (SELECT * from Question_Headings where Question_Group_Heading = @heading)
		insert QUESTION_HEADINGS values(@Heading);
END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[Parse_XML]'
GO
-- =============================================
-- Author:		Scott Cook
-- Create date: 11/10/14
-- Description:	Parses XML string and writes the data to the temporary table.
-- =============================================
ALTER PROCEDURE [dbo].[Parse_XML](
                                   @XMLString nvarchar(MAX),
                                   @strtX BIGINT,
					 			   @endX BIGINT OUTPUT,
								   @DataStr nvarchar(MAX) OUTPUT
								  )
AS
BEGIN
	DECLARE @StartChar CHAR(1)
	DECLARE @endTmp BIGINT

	SET @strtX = CHARINDEX('<', @XMLString, @strtX)
	SET @StartChar = SUBSTRING(@XMLString, @strtX + 1, 1)

	IF @StartChar = '/'
	  SET @endX = CHARINDEX('>', @XMLString, @strtX)
	ELSE
	  BEGIN  
        SET @endTmp = CHARINDEX('>', @XMLString, @strtX)
        IF SUBSTRING(@XMLString, @endTmp - 1, 1) = '/'
          SET @endX = @endTmp
	    ELSE
	      BEGIN
		    SET @endTmp = CHARINDEX('<', @XMLString, @endTmp)
		    IF SUBSTRING(@XMLString, @endTmp + 1, 1) = '/'
              SET @endX = CHARINDEX('>', @XMLString, @endTmp + 1)
		    ELSE
		      SET @endX = @endTmp - 1
	      END
	  END

	SET @DataStr = SUBSTRING(@XMLString, @strtX, (@endX - @strtX) + 1)
	SET @endX = @endX + 1

--select @DataStr
--select @endX

END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[SP_SearchTables]'
GO
ALTER PROCEDURE [dbo].[SP_SearchTables] 
 @Tablenames nvarchar(500) 
,@SearchStr NVARCHAR(60) 
,@GenerateSQLOnly Bit = 0 
AS 
 
/* 
    Parameters and usage 
 
    @Tablenames        -- Provide a single table name or multiple table name with comma seperated.  
                        If left blank , it will check for all the tables in the database 
    @SearchStr        -- Provide the search string. Use the '%' to coin the search.  
                        EX : X%--- will give data staring with X 
                             %X--- will give data ending with X 
                             %X%--- will give data containig  X 
    @GenerateSQLOnly -- Provide 1 if you only want to generate the SQL statements without seraching the database.  
                        By default it is 0 and it will search. 
 
    Samples : 
 
    1. To search data in a table 
 
        EXEC SP_SearchTables @Tablenames = 'T1' 
                         ,@SearchStr  = '%TEST%' 
 
        The above sample searches in table T1 with string containing TEST. 
 
    2. To search in a multiple table 
 
        EXEC SP_SearchTables @Tablenames = 'T2' 
                         ,@SearchStr  = '%TEST%' 
 
        The above sample searches in tables T1 & T2 with string containing TEST. 
     
    3. To search in a all table 
 
        EXEC SP_SearchTables @Tablenames = '%' 
                         ,@SearchStr  = '%TEST%' 
 
        The above sample searches in all table with string containing TEST. 
 
    4. Generate the SQL for the Select statements 
 
        EXEC SP_SearchTables @Tablenames        = 'T1' 
                         ,@SearchStr        = '%TEST%' 
                         ,@GenerateSQLOnly    = 1 
 
*/ 
 
    SET NOCOUNT ON 
 
    DECLARE @MatchFound BIT 
 
    SELECT @MatchFound = 0 
 
    DECLARE @CheckTableNames Table 
    ( 
    Tablename sysname 
    ) 
 
    DECLARE @SQLTbl TABLE 
    ( 
     Tablename        SYSNAME 
    ,WHEREClause    nvarchar(MAX) 
    ,SQLStatement   nvarchar(MAX) 
    ,Execstatus        BIT  
    ) 
 
    DECLARE @SQL nvarchar(MAX) 
    DECLARE @tmpTblname sysname 
    DECLARE @ErrMsg nvarchar(100) 
 
    IF LTRIM(RTRIM(@Tablenames)) IN ('' ,'%') 
    BEGIN 
 
        INSERT INTO @CheckTableNames 
        SELECT Name 
          FROM sys.tables 
    END 
    ELSE 
    BEGIN 
 
        SELECT @SQL = 'SELECT ''' + REPLACE(@Tablenames,',',''' UNION SELECT ''') + '''' 
 
        INSERT INTO @CheckTableNames 
        EXEC(@SQL) 
 
    END 
 
    IF NOT EXISTS(SELECT 1 FROM @CheckTableNames) 
    BEGIN 
         
        SELECT @ErrMsg = 'No tables are found in this database ' + DB_NAME() + ' for the specified filter' 
        PRINT @ErrMsg 
        RETURN 
 
    END 
     
    INSERT INTO @SQLTbl 
    ( Tablename,WHEREClause) 
    SELECT QUOTENAME(SCh.name) + '.' + QUOTENAME(ST.NAME), 
            ( 
                SELECT '[' + SC.Name + ']' + ' LIKE ''' + @SearchStr + ''' OR ' + CHAR(10) 
                  FROM SYS.columns SC 
                  JOIN SYS.types STy 
                    ON STy.system_type_id = SC.system_type_id 
                   AND STy.user_type_id =SC.user_type_id 
                 WHERE STY.name in ('varchar','char','nvarchar','nchar','text') 
                   AND SC.object_id = ST.object_id 
                 ORDER BY SC.name 
                FOR XML PATH('') 
            ) 
      FROM  SYS.tables ST 
      JOIN @CheckTableNames chktbls 
                ON chktbls.Tablename = ST.name  
      JOIN SYS.schemas SCh 
        ON ST.schema_id = SCh.schema_id 
     WHERE ST.name <> 'SearchTMP' 
      GROUP BY ST.object_id, QUOTENAME(SCh.name) + '.' +  QUOTENAME(ST.NAME) ; 
     
 
      UPDATE @SQLTbl 
         SET SQLStatement = 'SELECT * INTO SearchTMP FROM ' + Tablename + ' WHERE ' + substring(WHEREClause,1,len(WHEREClause)-5) 
 
      DELETE FROM @SQLTbl 
       WHERE WHEREClause IS NULL 
     
    WHILE EXISTS (SELECT 1 FROM @SQLTbl WHERE ISNULL(Execstatus ,0) = 0) 
    BEGIN 
 
        SELECT TOP 1 @tmpTblname = Tablename , @SQL = SQLStatement 
          FROM @SQLTbl  
         WHERE ISNULL(Execstatus ,0) = 0 
 
         IF @GenerateSQLOnly = 0 
         BEGIN 
 
            IF OBJECT_ID('SearchTMP','U') IS NOT NULL 
                DROP TABLE SearchTMP 
                 
            EXEC (@SQL) 
 
            IF EXISTS(SELECT 1 FROM SearchTMP) 
            BEGIN 
                SELECT Tablename=@tmpTblname,* FROM SearchTMP 
                SELECT @MatchFound = 1 
            END 
 
         END 
         ELSE 
         BEGIN 
             PRINT REPLICATE('-',100) 
             PRINT @tmpTblname 
             PRINT REPLICATE('-',100) 
             PRINT replace(@SQL,'INTO SearchTMP','') 
         END 
 
         UPDATE @SQLTbl 
            SET Execstatus = 1 
          WHERE Tablename = @tmpTblname 
 
    END 
 
    IF @MatchFound = 0  
    BEGIN 
        SELECT @ErrMsg = 'No Matches are found in this database ' + DB_NAME() + ' for the specified filter' 
        PRINT @ErrMsg 
        RETURN 
    END 
     
    SET NOCOUNT OFF 
 
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Altering [dbo].[usp_AggregationCustomQuestionnaireLoad]'
GO

--drop procedure usp_AggregationCustomQuestionnaireLoad
-- =============================================
-- Author:		hansbk
-- Create date: 6-16-2016
-- Description:	Note that this returns your expected custom control set name it may 
-- not be the same name that went in. 
-- =============================================
ALTER PROCEDURE [dbo].[usp_AggregationCustomQuestionnaireLoad]
	@AssessmentDBName nvarchar(4000),	
	@entity_name nvarchar(50)
AS
BEGIN

	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;
declare @tempEntityName nvarchar(50)
declare @i int
declare @addNew bit
declare @sql nvarchar(max)

Set @addNew = 1

IF (1=0) 
BEGIN 
    SET FMTONLY OFF 
    if @entity_name is null 
        begin
            select cast(null as nvarchar(50)) as [entity_name]            
        END
END   

set @tempEntityName = @entity_name

set @sql = 
'if @entity_name is not null
begin '+
'--copy the entity name to the sets table '+  CHAR(13)+CHAR(10) + 
'--copy all the questions over to new_question_sets '+  CHAR(13)+CHAR(10) + 
'set @tempEntityName = @entity_name '+  CHAR(13)+CHAR(10) +
'set @i =0 '+ CHAR(13)+CHAR(10) + 
'--first get a unique name for the set'+ CHAR(13)+CHAR(10) + 
'	if @addNew = 1'+ CHAR(13)+CHAR(10) + 
'	begin'+ CHAR(13)+CHAR(10) + 
'		while exists (select * from sets where set_name = @tempEntityName)'+ CHAR(13)+CHAR(10) + 
'		begin'+ CHAR(13)+CHAR(10) + 
'			set @i = @i+1'+ CHAR(13)+CHAR(10) + 
'			set @tempEntityName = @entity_name +convert(varchar,@i)'+CHAR(13)+CHAR(10) + 
'		end'+CHAR(13)+CHAR(10) + 
'	end'+CHAR(13)+CHAR(10) + 
'	INSERT INTO [SETS]'+CHAR(13)+CHAR(10) + 
'			   ([Set_Name],[Full_Name],[Short_Name],[Is_Displayed],[Is_Pass_Fail],[Old_Std_Name],[Set_Category_Id],[Order_In_Category],[Report_Order_Section_Number],[Aggregation_Standard_Number],[Is_Question],[Is_Requirement],[Order_Framework_Standards],[Standard_ToolTip],[Is_Deprecated],[Upgrade_Set_Name],[Is_Custom],[Date],[IsEncryptedModule],[IsEncryptedModuleOpen])'+CHAR(13)+CHAR(10) + 
'		 VALUES(@tempEntityName,@entity_name,@entity_name,1,1,null,1,1,35,35,1,0,35,null,0,null,1,getdate(),0,0)'+CHAR(13)+CHAR(10) + 
'	INSERT INTO [NEW_QUESTION_SETS] ([Set_Name],[Question_Id])     '+CHAR(13)+CHAR(10) + 
'		SELECT [Custom_Questionaire_Name]=@tempEntityName'+CHAR(13)+CHAR(10) + 
'			  ,[Question_Id]'+CHAR(13)+CHAR(10) + 
'		FROM ['+@AssessmentDBName+'].[CUSTOM_QUESTIONAIRE_QUESTIONS]'+CHAR(13)+CHAR(10) + 
'end';

print @sql

EXECUTE sp_executesql   
          @sql, 
		  N'@entity_name nvarchar(50), @tempEntityName nvarchar(50) output, @i int, @addNew bit',
          @entity_name,
		  @tempEntityName out,
		  @i,
		  @addNew;

		  set @entity_name = @tempEntityName;

select [entity_name] = @entity_name 

END
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating [dbo].[spEXECsp_RECOMPILE]'
GO
CREATE PROCEDURE [dbo].[spEXECsp_RECOMPILE] AS 

SET NOCOUNT ON 

-- 1 - Declaration statements for all variables
DECLARE @TableName varchar(128)
DECLARE @OwnerName varchar(128)
DECLARE @CMD1 varchar(8000)
DECLARE @TableListLoop int
DECLARE @TableListTable table
(UIDTableList int IDENTITY (1,1),
OwnerName varchar(128),
TableName varchar(128))

-- 2 - Outer loop for populating the database names
INSERT INTO @TableListTable(OwnerName, TableName)
SELECT u.[Name], o.[Name]
FROM sys.objects o
INNER JOIN sys.schemas u
 ON o.schema_id  = u.schema_id
WHERE o.Type = 'V'
ORDER BY o.[Name]



-- 3 - Determine the highest UIDDatabaseList to loop through the records
SELECT @TableListLoop = MAX(UIDTableList) FROM @TableListTable

-- 4 - While condition for looping through the database records
WHILE @TableListLoop > 0
 BEGIN

 -- 5 - Set the @DatabaseName parameter
 SELECT @TableName = TableName,
 @OwnerName = OwnerName
 FROM @TableListTable
 WHERE UIDTableList = @TableListLoop

 -- 6 - String together the final backup command
 SELECT @CMD1 = 'EXEC sp_recompile ' + '[' + @OwnerName + '.' + @TableName + ']' + char(13)

 -- 7 - Execute the final string to complete the backups
 SELECT @CMD1
 --EXEC (@CMD1)
 end
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[ASSESSMENTS_REQUIRED_DOCUMENTATION]'
GO
ALTER TABLE [dbo].[ASSESSMENTS_REQUIRED_DOCUMENTATION] ADD CONSTRAINT [CK_ASSESSMENTS_REQUIRED_DOCUMENTATION] CHECK (([Answer]='NA' OR [Answer]='N' OR [Answer]='Y' OR [Answer]='U'))
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding constraints to [dbo].[NIST_SAL_QUESTION_ANSWERS]'
GO
ALTER TABLE [dbo].[NIST_SAL_QUESTION_ANSWERS] ADD CONSTRAINT [CK_NIST_SAL_QUESTION_ANSWERS] CHECK (([Question_Answer]='No' OR [Question_Answer]='Yes'))
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ANSWER]'
GO
ALTER TABLE [dbo].[ANSWER] WITH NOCHECK  ADD CONSTRAINT [FK_ANSWER_Answer_Lookup] FOREIGN KEY ([Answer_Text]) REFERENCES [dbo].[ANSWER_LOOKUP] ([Answer_Text]) ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[SUB_CATEGORY_ANSWERS]'
GO
ALTER TABLE [dbo].[SUB_CATEGORY_ANSWERS] WITH NOCHECK  ADD CONSTRAINT [FK_SUB_CATEGORY_ANSWERS_Answer_Lookup] FOREIGN KEY ([Answer_Text]) REFERENCES [dbo].[ANSWER_LOOKUP] ([Answer_Text]) ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[CUSTOM_STANDARD_BASE_STANDARD]'
GO
ALTER TABLE [dbo].[CUSTOM_STANDARD_BASE_STANDARD] WITH NOCHECK  ADD CONSTRAINT [FK_CUSTOM_STANDARD_BASE_STANDARD_SETS1] FOREIGN KEY ([Custom_Questionaire_Name]) REFERENCES [dbo].[SETS] ([Set_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[CUSTOM_STANDARD_BASE_STANDARD] WITH NOCHECK  ADD CONSTRAINT [FK_CUSTOM_STANDARD_BASE_STANDARD_SETS] FOREIGN KEY ([Base_Standard]) REFERENCES [dbo].[SETS] ([Set_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[VISIO_MAPPING]'
GO
ALTER TABLE [dbo].[VISIO_MAPPING] WITH NOCHECK  ADD CONSTRAINT [FK_VISIO_MAPPING_DIAGRAM_TYPES] FOREIGN KEY ([Specific_Type]) REFERENCES [dbo].[DIAGRAM_TYPES] ([Specific_Type]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[STANDARD_SOURCE_FILE]'
GO
ALTER TABLE [dbo].[STANDARD_SOURCE_FILE] WITH NOCHECK  ADD CONSTRAINT [FK_Standard_Source_File_FILE_REF_KEYS] FOREIGN KEY ([Doc_Num]) REFERENCES [dbo].[FILE_REF_KEYS] ([Doc_Num]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[STANDARD_SOURCE_FILE] WITH NOCHECK  ADD CONSTRAINT [FK_Standard_Source_File_SETS] FOREIGN KEY ([Set_Name]) REFERENCES [dbo].[SETS] ([Set_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[MATURITY_QUESTIONS]'
GO
ALTER TABLE [dbo].[MATURITY_QUESTIONS] WITH NOCHECK  ADD CONSTRAINT [FK__MATURITY___Matur__5B638405] FOREIGN KEY ([Maturity_Level_Id]) REFERENCES [dbo].[MATURITY_LEVELS] ([Maturity_Level_Id])
GO
ALTER TABLE [dbo].[MATURITY_QUESTIONS] WITH NOCHECK  ADD CONSTRAINT [FK_MATURITY_QUESTIONS_MATURITY_MODELS] FOREIGN KEY ([Maturity_Model_Id]) REFERENCES [dbo].[MATURITY_MODELS] ([Maturity_Model_Id]) ON DELETE CASCADE
GO
ALTER TABLE [dbo].[MATURITY_QUESTIONS] WITH NOCHECK  ADD CONSTRAINT [FK_MATURITY_QUESTIONS_MATURITY_QUESTIONS] FOREIGN KEY ([Parent_Question_Id]) REFERENCES [dbo].[MATURITY_QUESTIONS] ([Mat_Question_Id]) NOT FOR REPLICATION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[MATURITY_REFERENCES]'
GO
ALTER TABLE [dbo].[MATURITY_REFERENCES] WITH NOCHECK  ADD CONSTRAINT [FK_MATURITY_REFERENCES_MATURITY_QUESTIONS] FOREIGN KEY ([Mat_Question_Id]) REFERENCES [dbo].[MATURITY_QUESTIONS] ([Mat_Question_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[MATURITY_REFERENCES] WITH NOCHECK  ADD CONSTRAINT [FK_MATURITY_REFERENCES_GEN_FILE] FOREIGN KEY ([Gen_File_Id]) REFERENCES [dbo].[GEN_FILE] ([Gen_File_Id]) ON DELETE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[MATURITY_SOURCE_FILES]'
GO
ALTER TABLE [dbo].[MATURITY_SOURCE_FILES] WITH NOCHECK  ADD CONSTRAINT [FK_MATURITY_SOURCE_FILES_MATURITY_QUESTIONS] FOREIGN KEY ([Mat_Question_Id]) REFERENCES [dbo].[MATURITY_QUESTIONS] ([Mat_Question_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[MATURITY_SOURCE_FILES] WITH NOCHECK  ADD CONSTRAINT [FK_MATURITY_SOURCE_FILES_GEN_FILE] FOREIGN KEY ([Gen_File_Id]) REFERENCES [dbo].[GEN_FILE] ([Gen_File_Id]) ON DELETE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[NEW_QUESTION]'
GO
ALTER TABLE [dbo].[NEW_QUESTION] WITH NOCHECK  ADD CONSTRAINT [FK_NEW_QUESTION_SETS] FOREIGN KEY ([Original_Set_Name]) REFERENCES [dbo].[SETS] ([Set_Name])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[COMPONENT_QUESTIONS]'
GO
ALTER TABLE [dbo].[COMPONENT_QUESTIONS] WITH NOCHECK  ADD CONSTRAINT [FK_Component_Questions_NEW_QUESTION] FOREIGN KEY ([Question_Id]) REFERENCES [dbo].[NEW_QUESTION] ([Question_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[NERC_RISK_RANKING]'
GO
ALTER TABLE [dbo].[NERC_RISK_RANKING] WITH NOCHECK  ADD CONSTRAINT [FK_NERC_RISK_RANKING_NEW_QUESTION] FOREIGN KEY ([Question_id]) REFERENCES [dbo].[NEW_QUESTION] ([Question_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[NERC_RISK_RANKING] WITH NOCHECK  ADD CONSTRAINT [FK_NERC_RISK_RANKING_NEW_REQUIREMENT] FOREIGN KEY ([Requirement_Id]) REFERENCES [dbo].[NEW_REQUIREMENT] ([Requirement_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[NEW_QUESTION_SETS]'
GO
ALTER TABLE [dbo].[NEW_QUESTION_SETS] WITH NOCHECK  ADD CONSTRAINT [FK_NEW_QUESTION_SETS_NEW_QUESTION] FOREIGN KEY ([Question_Id]) REFERENCES [dbo].[NEW_QUESTION] ([Question_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[NEW_QUESTION_SETS] WITH NOCHECK  ADD CONSTRAINT [FK_NEW_QUESTION_SETS_SETS] FOREIGN KEY ([Set_Name]) REFERENCES [dbo].[SETS] ([Set_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[NEW_QUESTION_LEVELS]'
GO
ALTER TABLE [dbo].[NEW_QUESTION_LEVELS] WITH NOCHECK  ADD CONSTRAINT [FK_NEW_QUESTION_LEVELS_UNIVERSAL_SAL_LEVEL] FOREIGN KEY ([Universal_Sal_Level]) REFERENCES [dbo].[UNIVERSAL_SAL_LEVEL] ([Universal_Sal_Level])
GO
ALTER TABLE [dbo].[NEW_QUESTION_LEVELS] WITH NOCHECK  ADD CONSTRAINT [FK_NEW_QUESTION_LEVELS_NEW_QUESTION_SETS] FOREIGN KEY ([New_Question_Set_Id]) REFERENCES [dbo].[NEW_QUESTION_SETS] ([New_Question_Set_Id]) ON DELETE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[NEW_REQUIREMENT]'
GO
ALTER TABLE [dbo].[NEW_REQUIREMENT] WITH NOCHECK  ADD CONSTRAINT [FK_NEW_REQUIREMENT_NCSF_Category] FOREIGN KEY ([NCSF_Cat_Id]) REFERENCES [dbo].[NCSF_CATEGORY] ([NCSF_Cat_Id])
GO
ALTER TABLE [dbo].[NEW_REQUIREMENT] WITH NOCHECK  ADD CONSTRAINT [FK_NEW_REQUIREMENT_SETS] FOREIGN KEY ([Original_Set_Name]) REFERENCES [dbo].[SETS] ([Set_Name]) NOT FOR REPLICATION
GO
ALTER TABLE [dbo].[NEW_REQUIREMENT] WITH NOCHECK  ADD CONSTRAINT [FK_NEW_REQUIREMENT_STANDARD_CATEGORY] FOREIGN KEY ([Standard_Category]) REFERENCES [dbo].[STANDARD_CATEGORY] ([Standard_Category]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[REQUIREMENT_LEVELS]'
GO
ALTER TABLE [dbo].[REQUIREMENT_LEVELS] WITH NOCHECK  ADD CONSTRAINT [FK_REQUIREMENT_LEVELS_NEW_REQUIREMENT] FOREIGN KEY ([Requirement_Id]) REFERENCES [dbo].[NEW_REQUIREMENT] ([Requirement_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[REQUIREMENT_LEVELS] WITH NOCHECK  ADD CONSTRAINT [FK_REQUIREMENT_LEVELS_STANDARD_SPECIFIC_LEVEL] FOREIGN KEY ([Standard_Level]) REFERENCES [dbo].[STANDARD_SPECIFIC_LEVEL] ([Standard_Level]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[REQUIREMENT_REFERENCES]'
GO
ALTER TABLE [dbo].[REQUIREMENT_REFERENCES] WITH NOCHECK  ADD CONSTRAINT [FK_REQUIREMENT_REFERENCES_NEW_REQUIREMENT] FOREIGN KEY ([Requirement_Id]) REFERENCES [dbo].[NEW_REQUIREMENT] ([Requirement_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[REQUIREMENT_REFERENCES] WITH NOCHECK  ADD CONSTRAINT [FK_REQUIREMENT_REFERENCES_GEN_FILE] FOREIGN KEY ([Gen_File_Id]) REFERENCES [dbo].[GEN_FILE] ([Gen_File_Id]) ON DELETE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[REQUIREMENT_SETS]'
GO
ALTER TABLE [dbo].[REQUIREMENT_SETS] WITH NOCHECK  ADD CONSTRAINT [FK_REQUIREMENT_SETS_NEW_REQUIREMENT] FOREIGN KEY ([Requirement_Id]) REFERENCES [dbo].[NEW_REQUIREMENT] ([Requirement_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[REQUIREMENT_SETS] WITH NOCHECK  ADD CONSTRAINT [FK_QUESTION_SETS_SETS] FOREIGN KEY ([Set_Name]) REFERENCES [dbo].[SETS] ([Set_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[REQUIREMENT_SOURCE_FILES]'
GO
ALTER TABLE [dbo].[REQUIREMENT_SOURCE_FILES] WITH NOCHECK  ADD CONSTRAINT [FK_REQUIREMENT_SOURCE_FILES_NEW_REQUIREMENT] FOREIGN KEY ([Requirement_Id]) REFERENCES [dbo].[NEW_REQUIREMENT] ([Requirement_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[REQUIREMENT_SOURCE_FILES] WITH NOCHECK  ADD CONSTRAINT [FK_REQUIREMENT_SOURCE_FILES_GEN_FILE] FOREIGN KEY ([Gen_File_Id]) REFERENCES [dbo].[GEN_FILE] ([Gen_File_Id]) ON DELETE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[SECTOR_STANDARD_RECOMMENDATIONS]'
GO
ALTER TABLE [dbo].[SECTOR_STANDARD_RECOMMENDATIONS] WITH NOCHECK  ADD CONSTRAINT [FK_SECTOR_STANDARD_RECOMMENDATIONS_SETS] FOREIGN KEY ([Set_Name]) REFERENCES [dbo].[SETS] ([Set_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[STANDARD_CATEGORY_SEQUENCE]'
GO
ALTER TABLE [dbo].[STANDARD_CATEGORY_SEQUENCE] WITH NOCHECK  ADD CONSTRAINT [FK_STANDARD_CATEGORY_SEQUENCE_SETS] FOREIGN KEY ([Set_Name]) REFERENCES [dbo].[SETS] ([Set_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[FILE_KEYWORDS]'
GO
ALTER TABLE [dbo].[FILE_KEYWORDS] WITH NOCHECK  ADD CONSTRAINT [FILE_KEYWORDS_GEN_FILE_FK] FOREIGN KEY ([Gen_File_Id]) REFERENCES [dbo].[GEN_FILE] ([Gen_File_Id]) ON DELETE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[REQUIREMENT_QUESTIONS]'
GO
ALTER TABLE [dbo].[REQUIREMENT_QUESTIONS] WITH NOCHECK  ADD CONSTRAINT [FK_REQUIREMENT_QUESTIONS_NEW_QUESTION1] FOREIGN KEY ([Question_Id]) REFERENCES [dbo].[NEW_QUESTION] ([Question_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[REQUIREMENT_QUESTIONS] WITH NOCHECK  ADD CONSTRAINT [FK_REQUIREMENT_QUESTIONS_NEW_REQUIREMENT] FOREIGN KEY ([Requirement_Id]) REFERENCES [dbo].[NEW_REQUIREMENT] ([Requirement_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[PARAMETER_REQUIREMENTS]'
GO
ALTER TABLE [dbo].[PARAMETER_REQUIREMENTS] WITH NOCHECK  ADD CONSTRAINT [FK_Parameter_Requirements_NEW_REQUIREMENT] FOREIGN KEY ([Requirement_Id]) REFERENCES [dbo].[NEW_REQUIREMENT] ([Requirement_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[NIST_SAL_INFO_TYPES]'
GO
ALTER TABLE [dbo].[NIST_SAL_INFO_TYPES] WITH NOCHECK  ADD CONSTRAINT [FK_NIST_SAL_STANDARD_SELECTION] FOREIGN KEY ([Assessment_Id]) REFERENCES [dbo].[STANDARD_SELECTION] ([Assessment_Id]) ON DELETE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[AGGREGATION_INFORMATION]'
GO
ALTER TABLE [dbo].[AGGREGATION_INFORMATION] ADD CONSTRAINT [FK_AGGREGATION_INFORMATION_AGGREGATION_TYPES] FOREIGN KEY ([Aggregation_Mode]) REFERENCES [dbo].[AGGREGATION_TYPES] ([Aggregation_Mode])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[DEMOGRAPHICS_ASSET_VALUES]'
GO
ALTER TABLE [dbo].[DEMOGRAPHICS_ASSET_VALUES] ADD CONSTRAINT [FK_DEMOGRAPHICS_ASSET_VALUES_APP_CODE] FOREIGN KEY ([AppCode]) REFERENCES [dbo].[APP_CODE] ([AppCode]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[MODES_SETS_MATURITY_MODELS]'
GO
ALTER TABLE [dbo].[MODES_SETS_MATURITY_MODELS] ADD CONSTRAINT [FK_MODES_MATURITY_MODELS_APP_CODE] FOREIGN KEY ([AppCode]) REFERENCES [dbo].[APP_CODE] ([AppCode]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[MODES_SETS_MATURITY_MODELS] ADD CONSTRAINT [FK_MODES_SETS_MATURITY_MODELS_MATURITY_MODELS] FOREIGN KEY ([Model_Name]) REFERENCES [dbo].[MATURITY_MODELS] ([Model_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[MODES_SETS_MATURITY_MODELS] ADD CONSTRAINT [FK_MODES_MATURITY_MODELS_SETS] FOREIGN KEY ([Set_Name]) REFERENCES [dbo].[SETS] ([Set_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ASSESSMENT_SELECTED_LEVELS]'
GO
ALTER TABLE [dbo].[ASSESSMENT_SELECTED_LEVELS] ADD CONSTRAINT [FK_ASSESSMENT_SELECTED_LEVELS_LEVEL_NAMES] FOREIGN KEY ([Level_Name]) REFERENCES [dbo].[LEVEL_NAMES] ([Level_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[ASSESSMENT_SELECTED_LEVELS] ADD CONSTRAINT [FK_ASSESSMENT_SELECTED_LEVELS_STANDARD_SELECTION] FOREIGN KEY ([Assessment_Id]) REFERENCES [dbo].[STANDARD_SELECTION] ([Assessment_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[AVAILABLE_STANDARDS]'
GO
ALTER TABLE [dbo].[AVAILABLE_STANDARDS] ADD CONSTRAINT [FK_AVAILABLE_STANDARDS_SETS] FOREIGN KEY ([Set_Name]) REFERENCES [dbo].[SETS] ([Set_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[AVAILABLE_STANDARDS] ADD CONSTRAINT [FK_AVAILABLE_STANDARDS_ASSESSMENTS] FOREIGN KEY ([Assessment_Id]) REFERENCES [dbo].[ASSESSMENTS] ([Assessment_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS]'
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] ADD CONSTRAINT [FK_CIS_CSI_SERVICE_DEMOGRAPHICS_CIS_CSI_BUDGET_BASES] FOREIGN KEY ([Budget_Basis]) REFERENCES [dbo].[CIS_CSI_BUDGET_BASES] ([Budget_Basis]) ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] ADD CONSTRAINT [FK_CIS_CSI_SERVICE_DEMOGRAPHICS_CIS_CSI_CUSTOMER_COUNTS] FOREIGN KEY ([Customers_Count]) REFERENCES [dbo].[CIS_CSI_CUSTOMER_COUNTS] ([Customer_Count]) ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] ADD CONSTRAINT [FK_CIS_CSI_SERVICE_DEMOGRAPHICS_CIS_CSI_USER_COUNTS] FOREIGN KEY ([Authorized_Non_Organizational_User_Count]) REFERENCES [dbo].[CIS_CSI_USER_COUNTS] ([User_Count]) ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] ADD CONSTRAINT [FK_CIS_CSI_SERVICE_DEMOGRAPHICS_CIS_CSI_STAFF_COUNTS] FOREIGN KEY ([IT_ICS_Staff_Count]) REFERENCES [dbo].[CIS_CSI_STAFF_COUNTS] ([Staff_Count]) ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[CIS_CSI_SERVICE_DEMOGRAPHICS] ADD CONSTRAINT [FK_CIS_CSI_SERVICE_DEMOGRAPHICS_CIS_CSI_STAFF_COUNTS_2] FOREIGN KEY ([Cybersecurity_IT_ICS_Staff_Count]) REFERENCES [dbo].[CIS_CSI_STAFF_COUNTS] ([Staff_Count])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS]'
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] ADD CONSTRAINT [FK_CIS_CSI_ORGANIZATION_DEMOGRAPHICS_CIS_CSI_STAFF_COUNTS_2] FOREIGN KEY ([IT_ICS_Staff_Count]) REFERENCES [dbo].[CIS_CSI_STAFF_COUNTS] ([Staff_Count])
GO
ALTER TABLE [dbo].[CIS_CSI_ORGANIZATION_DEMOGRAPHICS] ADD CONSTRAINT [FK_CIS_CSI_ORGANIZATION_DEMOGRAPHICS_CIS_CSI_STAFF_COUNTS] FOREIGN KEY ([Cybersecurity_IT_ICS_Staff_Count]) REFERENCES [dbo].[CIS_CSI_STAFF_COUNTS] ([Staff_Count]) ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[CNSS_CIA_JUSTIFICATIONS]'
GO
ALTER TABLE [dbo].[CNSS_CIA_JUSTIFICATIONS] ADD CONSTRAINT [FK_CNSS_CIA_JUSTIFICATIONS_CNSS_CIA_TYPES] FOREIGN KEY ([CIA_Type]) REFERENCES [dbo].[CNSS_CIA_TYPES] ([CIA_Type]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[CNSS_CIA_JUSTIFICATIONS] ADD CONSTRAINT [FK_CNSS_CIA_JUSTIFICATIONS_ASSESSMENTS] FOREIGN KEY ([Assessment_Id]) REFERENCES [dbo].[ASSESSMENTS] ([Assessment_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[COMPONENT_SYMBOLS]'
GO
ALTER TABLE [dbo].[COMPONENT_SYMBOLS] ADD CONSTRAINT [FK_COMPONENT_SYMBOLS_COMPONENT_FAMILY] FOREIGN KEY ([Component_Family_Name]) REFERENCES [dbo].[COMPONENT_FAMILY] ([Component_Family_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[CUSTOM_BASE_STANDARDS]'
GO
ALTER TABLE [dbo].[CUSTOM_BASE_STANDARDS] ADD CONSTRAINT [FK_CUSTOM_BASE_STANDARD_CUSTOM_QUESTIONAIRES] FOREIGN KEY ([Custom_Questionaire_Name]) REFERENCES [dbo].[CUSTOM_QUESTIONAIRES] ([Custom_Questionaire_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[CUSTOM_QUESTIONAIRE_QUESTIONS]'
GO
ALTER TABLE [dbo].[CUSTOM_QUESTIONAIRE_QUESTIONS] ADD CONSTRAINT [FK_CUSTON_QUESTIONAIRE_QUESTIONS_CUSTOM_QUESTIONAIRES] FOREIGN KEY ([Custom_Questionaire_Name]) REFERENCES [dbo].[CUSTOM_QUESTIONAIRES] ([Custom_Questionaire_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[DEMOGRAPHICS]'
GO
ALTER TABLE [dbo].[DEMOGRAPHICS] ADD CONSTRAINT [FK_DEMOGRAPHICS_DEMOGRAPHICS_SIZE] FOREIGN KEY ([Size]) REFERENCES [dbo].[DEMOGRAPHICS_SIZE] ([Size]) ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[DEMOGRAPHICS] ADD CONSTRAINT [FK_DEMOGRAPHICS_DEMOGRAPHICS_ASSET_VALUES] FOREIGN KEY ([AssetValue]) REFERENCES [dbo].[DEMOGRAPHICS_ASSET_VALUES] ([AssetValue]) ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[DIAGRAM_CONTAINER]'
GO
ALTER TABLE [dbo].[DIAGRAM_CONTAINER] ADD CONSTRAINT [FK_DIAGRAM_CONTAINER_DIAGRAM_CONTAINER_TYPES] FOREIGN KEY ([ContainerType]) REFERENCES [dbo].[DIAGRAM_CONTAINER_TYPES] ([ContainerType]) ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[DIAGRAM_TYPES]'
GO
ALTER TABLE [dbo].[DIAGRAM_TYPES] ADD CONSTRAINT [FK_DIAGRAM_TYPES_DIAGRAM_OBJECT_TYPES] FOREIGN KEY ([Object_Type]) REFERENCES [dbo].[DIAGRAM_OBJECT_TYPES] ([Object_Type])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[GEN_FILE]'
GO
ALTER TABLE [dbo].[GEN_FILE] ADD CONSTRAINT [FK_GEN_FILE_FILE_REF_KEYS] FOREIGN KEY ([Doc_Num]) REFERENCES [dbo].[FILE_REF_KEYS] ([Doc_Num]) ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[FINANCIAL_ASSESSMENT_VALUES]'
GO
ALTER TABLE [dbo].[FINANCIAL_ASSESSMENT_VALUES] ADD CONSTRAINT [FK_FINANCIAL_ASSESSMENT_VALUES_FINANCIAL_ATTRIBUTES] FOREIGN KEY ([AttributeName]) REFERENCES [dbo].[FINANCIAL_ATTRIBUTES] ([AttributeName]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[FINANCIAL_ASSESSMENT_VALUES] ADD CONSTRAINT [FK_FINANCIAL_ASSESSMENT_VALUES_ASSESSMENTS] FOREIGN KEY ([Assessment_Id]) REFERENCES [dbo].[ASSESSMENTS] ([Assessment_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[FINANCIAL_HOURS]'
GO
ALTER TABLE [dbo].[FINANCIAL_HOURS] ADD CONSTRAINT [FK_FINANCIAL_HOURS_FINANCIAL_HOURS_COMPONENT] FOREIGN KEY ([Component]) REFERENCES [dbo].[FINANCIAL_HOURS_COMPONENT] ([Component]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[FINANCIAL_HOURS] ADD CONSTRAINT [FK_FINANCIAL_HOURS_FINANCIAL_REVIEWTYPE] FOREIGN KEY ([ReviewType]) REFERENCES [dbo].[FINANCIAL_REVIEWTYPE] ([ReviewType]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[FINANCIAL_HOURS] ADD CONSTRAINT [FK_FINANCIAL_HOURS_ASSESSMENTS] FOREIGN KEY ([Assessment_Id]) REFERENCES [dbo].[ASSESSMENTS] ([Assessment_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[FINDING]'
GO
ALTER TABLE [dbo].[FINDING] ADD CONSTRAINT [FK_FINDING_SUB_RISK_AREA] FOREIGN KEY ([Sub_Risk_Area_Id]) REFERENCES [dbo].[RISK_SUB_RISK_AREA] ([Sub_Risk_Area_Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[FRAMEWORK_TIER_DEFINITIONS]'
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_DEFINITIONS] ADD CONSTRAINT [FK_FRAMEWORK_TIER_DEFINITIONS_FRAMEWORK_TIERS] FOREIGN KEY ([Tier]) REFERENCES [dbo].[FRAMEWORK_TIERS] ([Tier]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[FRAMEWORK_TIER_TYPE_ANSWER]'
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_TYPE_ANSWER] ADD CONSTRAINT [FK_FRAMEWORK_TIER_TYPE_ANSWER_FRAMEWORK_TIERS] FOREIGN KEY ([Tier]) REFERENCES [dbo].[FRAMEWORK_TIERS] ([Tier])
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_TYPE_ANSWER] ADD CONSTRAINT [FK_FRAMEWORK_TIER_TYPE_ANSWER_FRAMEWORK_TIER_TYPE] FOREIGN KEY ([TierType]) REFERENCES [dbo].[FRAMEWORK_TIER_TYPE] ([TierType]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[FRAMEWORK_TIER_TYPE_ANSWER] ADD CONSTRAINT [FK_FRAMEWORK_TIER_TYPE_ANSWER_ASSESSMENTS] FOREIGN KEY ([Assessment_Id]) REFERENCES [dbo].[ASSESSMENTS] ([Assessment_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[GALLERY_GROUP_DETAILS]'
GO
ALTER TABLE [dbo].[GALLERY_GROUP_DETAILS] ADD CONSTRAINT [FK_GALLERY_GROUP_DETAILS_GALLERY_GROUP] FOREIGN KEY ([Group_Id]) REFERENCES [dbo].[GALLERY_GROUP] ([Group_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[GALLERY_GROUP_DETAILS] ADD CONSTRAINT [FK_GALLERY_GROUP_DETAILS_GALLERY_ITEM] FOREIGN KEY ([Gallery_Item_Id]) REFERENCES [dbo].[GALLERY_ITEM] ([Gallery_Item_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[GALLERY_ROWS]'
GO
ALTER TABLE [dbo].[GALLERY_ROWS] ADD CONSTRAINT [FK_GALLERY_ROWS_GALLERY_GROUP] FOREIGN KEY ([Group_Id]) REFERENCES [dbo].[GALLERY_GROUP] ([Group_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[GALLERY_ROWS] ADD CONSTRAINT [FK_GALLERY_ROWS_GALLERY_LAYOUT] FOREIGN KEY ([Layout_Name]) REFERENCES [dbo].[GALLERY_LAYOUT] ([Layout_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[GENERAL_SAL]'
GO
ALTER TABLE [dbo].[GENERAL_SAL] ADD CONSTRAINT [FK_GENERAL_SAL_GEN_SAL_NAMES] FOREIGN KEY ([Sal_Name]) REFERENCES [dbo].[GEN_SAL_NAMES] ([Sal_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[GENERAL_SAL] ADD CONSTRAINT [FK_GENERAL_SAL_ASSESSMENTS] FOREIGN KEY ([Assessment_Id]) REFERENCES [dbo].[ASSESSMENTS] ([Assessment_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[GEN_SAL_WEIGHTS]'
GO
ALTER TABLE [dbo].[GEN_SAL_WEIGHTS] ADD CONSTRAINT [FK_GEN_SAL_WEIGHTS_GENERAL_SAL_DESCRIPTIONS] FOREIGN KEY ([Sal_Name]) REFERENCES [dbo].[GENERAL_SAL_DESCRIPTIONS] ([Sal_Name]) ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[GEN_SAL_WEIGHTS] ADD CONSTRAINT [FK_GEN_SAL_WEIGHTS_GEN_SAL_NAMES] FOREIGN KEY ([Sal_Name]) REFERENCES [dbo].[GEN_SAL_NAMES] ([Sal_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[MATURITY_ANSWER_OPTIONS_INTEGRITY_CHECK]'
GO
ALTER TABLE [dbo].[MATURITY_ANSWER_OPTIONS_INTEGRITY_CHECK] ADD CONSTRAINT [FK_MATURITY_ANSWER_OPTIONS_INTEGRITY_CHECK_MATURITY_ANSWER_OPTIONS] FOREIGN KEY ([Mat_Option_Id_1]) REFERENCES [dbo].[MATURITY_ANSWER_OPTIONS] ([Mat_Option_Id])
GO
ALTER TABLE [dbo].[MATURITY_ANSWER_OPTIONS_INTEGRITY_CHECK] ADD CONSTRAINT [FK_MATURITY_ANSWER_OPTIONS_INTEGRITY_CHECK_MATURITY_ANSWER_OPTIONS2] FOREIGN KEY ([Mat_Option_Id_2]) REFERENCES [dbo].[MATURITY_ANSWER_OPTIONS] ([Mat_Option_Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[MATURITY_QUESTIONS]'
GO
ALTER TABLE [dbo].[MATURITY_QUESTIONS] ADD CONSTRAINT [FK_MATURITY_QUESTIONS_MATURITY_GROUPINGS] FOREIGN KEY ([Grouping_Id]) REFERENCES [dbo].[MATURITY_GROUPINGS] ([Grouping_Id])
GO
ALTER TABLE [dbo].[MATURITY_QUESTIONS] ADD CONSTRAINT [FK_MATURITY_QUESTIONS_MATURITY_LEVELS] FOREIGN KEY ([Maturity_Level_Id]) REFERENCES [dbo].[MATURITY_LEVELS] ([Maturity_Level_Id])
GO
ALTER TABLE [dbo].[MATURITY_QUESTIONS] ADD CONSTRAINT [FK_MATURITY_QUESTIONS_MATURITY_OPTIONS] FOREIGN KEY ([Parent_Option_Id]) REFERENCES [dbo].[MATURITY_ANSWER_OPTIONS] ([Mat_Option_Id])
GO
ALTER TABLE [dbo].[MATURITY_QUESTIONS] ADD CONSTRAINT [FK_MATURITY_QUESTIONS_MATURITY_QUESTION_TYPES] FOREIGN KEY ([Mat_Question_Type]) REFERENCES [dbo].[MATURITY_QUESTION_TYPES] ([Mat_Question_Type]) ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[MATURITY_ANSWER_OPTIONS]'
GO
ALTER TABLE [dbo].[MATURITY_ANSWER_OPTIONS] ADD CONSTRAINT [FK_MATURITY_ANSWER_OPTIONS_MATURITY_QUESTIONS1] FOREIGN KEY ([Mat_Question_Id]) REFERENCES [dbo].[MATURITY_QUESTIONS] ([Mat_Question_Id]) ON DELETE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[MATURITY_REFERENCE_TEXT]'
GO
ALTER TABLE [dbo].[MATURITY_REFERENCE_TEXT] ADD CONSTRAINT [FK_MATURITY_REFERENCE_TEXT_MATURITY_QUESTIONS] FOREIGN KEY ([Mat_Question_Id]) REFERENCES [dbo].[MATURITY_QUESTIONS] ([Mat_Question_Id]) ON DELETE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[NCSF_CATEGORY]'
GO
ALTER TABLE [dbo].[NCSF_CATEGORY] ADD CONSTRAINT [FK_NCSF_Category_NCSF_FUNCTIONS] FOREIGN KEY ([NCSF_Function_Id]) REFERENCES [dbo].[NCSF_FUNCTIONS] ([NCSF_Function_ID]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[NEW_QUESTION]'
GO
ALTER TABLE [dbo].[NEW_QUESTION] ADD CONSTRAINT [FK_NEW_QUESTION_UNIVERSAL_SAL_LEVEL] FOREIGN KEY ([Universal_Sal_Level]) REFERENCES [dbo].[UNIVERSAL_SAL_LEVEL] ([Universal_Sal_Level]) ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[NEW_QUESTION] ADD CONSTRAINT [FK_NEW_QUESTION_UNIVERSAL_SUB_CATEGORY_HEADINGS] FOREIGN KEY ([Heading_Pair_Id]) REFERENCES [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS] ([Heading_Pair_Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[REQUIREMENT_QUESTIONS_SETS]'
GO
ALTER TABLE [dbo].[REQUIREMENT_QUESTIONS_SETS] ADD CONSTRAINT [FK_REQUIREMENT_QUESTIONS_SETS_NEW_QUESTION] FOREIGN KEY ([Question_Id]) REFERENCES [dbo].[NEW_QUESTION] ([Question_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[REQUIREMENT_QUESTIONS_SETS] ADD CONSTRAINT [FK_REQUIREMENT_QUESTIONS_SETS_NEW_REQUIREMENT] FOREIGN KEY ([Requirement_Id]) REFERENCES [dbo].[NEW_REQUIREMENT] ([Requirement_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[REQUIREMENT_QUESTIONS_SETS] ADD CONSTRAINT [FK_REQUIREMENT_QUESTIONS_SETS_SETS] FOREIGN KEY ([Set_Name]) REFERENCES [dbo].[SETS] ([Set_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[NEW_REQUIREMENT]'
GO
ALTER TABLE [dbo].[NEW_REQUIREMENT] ADD CONSTRAINT [FK_NEW_REQUIREMENT_QUESTION_GROUP_HEADING] FOREIGN KEY ([Question_Group_Heading_Id]) REFERENCES [dbo].[QUESTION_GROUP_HEADING] ([Question_Group_Heading_Id]) ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[REPORT_STANDARDS_SELECTION]'
GO
ALTER TABLE [dbo].[REPORT_STANDARDS_SELECTION] ADD CONSTRAINT [FK_REPORT_STANDARDS_SELECTION_SETS] FOREIGN KEY ([Report_Set_Entity_Name]) REFERENCES [dbo].[SETS] ([Set_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[REPORT_STANDARDS_SELECTION] ADD CONSTRAINT [FK_REPORT_STANDARDS_SELECTION_ASSESSMENTS] FOREIGN KEY ([Assesment_Id]) REFERENCES [dbo].[ASSESSMENTS] ([Assessment_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[REQUIREMENT_LEVELS]'
GO
ALTER TABLE [dbo].[REQUIREMENT_LEVELS] ADD CONSTRAINT [FK_REQUIREMENT_LEVELS_REQUIREMENT_LEVEL_TYPE] FOREIGN KEY ([Level_Type]) REFERENCES [dbo].[REQUIREMENT_LEVEL_TYPE] ([Level_Type]) ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[RISK_SUB_RISK_AREA]'
GO
ALTER TABLE [dbo].[RISK_SUB_RISK_AREA] ADD CONSTRAINT [FK_RISK_SUB_RISK_AREA_RISK_AREA] FOREIGN KEY ([Risk_Area]) REFERENCES [dbo].[RISK_AREA] ([Risk_Area]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[STANDARD_SELECTION]'
GO
ALTER TABLE [dbo].[STANDARD_SELECTION] ADD CONSTRAINT [FK_STANDARD_SELECTION_SAL_DETERMINATION_TYPES] FOREIGN KEY ([Last_Sal_Determination_Type]) REFERENCES [dbo].[SAL_DETERMINATION_TYPES] ([Sal_Determination_Type]) ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[STANDARD_SELECTION] ADD CONSTRAINT [FK_STANDARD_SELECTION_UNIVERSAL_SAL_LEVEL] FOREIGN KEY ([Selected_Sal_Level]) REFERENCES [dbo].[UNIVERSAL_SAL_LEVEL] ([Full_Name_Sal]) ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[SET_FILES]'
GO
ALTER TABLE [dbo].[SET_FILES] ADD CONSTRAINT [FK_SET_FILES_SETS] FOREIGN KEY ([SetName]) REFERENCES [dbo].[SETS] ([Set_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[SET_FILES] ADD CONSTRAINT [FK_SET_FILES_GEN_FILE] FOREIGN KEY ([Gen_File_Id]) REFERENCES [dbo].[GEN_FILE] ([Gen_File_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS]'
GO
ALTER TABLE [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS] ADD CONSTRAINT [FK_UNIVERSAL_SUB_CATEGORY_HEADINGS_SETS] FOREIGN KEY ([Set_Name]) REFERENCES [dbo].[SETS] ([Set_Name]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS] ADD CONSTRAINT [FK_UNIVERSAL_SUB_CATEGORY_HEADINGS_QUESTION_GROUP_HEADING] FOREIGN KEY ([Question_Group_Heading_Id]) REFERENCES [dbo].[QUESTION_GROUP_HEADING] ([Question_Group_Heading_Id]) ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS] ADD CONSTRAINT [FK_UNIVERSAL_SUB_CATEGORY_HEADINGS_UNIVERSAL_SUB_CATEGORIES] FOREIGN KEY ([Universal_Sub_Category_Id]) REFERENCES [dbo].[UNIVERSAL_SUB_CATEGORIES] ([Universal_Sub_Category_Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[STANDARD_CATEGORY_SEQUENCE]'
GO
ALTER TABLE [dbo].[STANDARD_CATEGORY_SEQUENCE] ADD CONSTRAINT [FK_STANDARD_CATEGORY_SEQUENCE_STANDARD_CATEGORY] FOREIGN KEY ([Standard_Category]) REFERENCES [dbo].[STANDARD_CATEGORY] ([Standard_Category]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[STANDARD_TO_UNIVERSAL_MAP]'
GO
ALTER TABLE [dbo].[STANDARD_TO_UNIVERSAL_MAP] ADD CONSTRAINT [FK_STANDARD_TO_UNIVERSAL_MAP_STANDARD_SPECIFIC_LEVEL] FOREIGN KEY ([Standard_Level]) REFERENCES [dbo].[STANDARD_SPECIFIC_LEVEL] ([Standard_Level]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[STANDARD_TO_UNIVERSAL_MAP] ADD CONSTRAINT [FK_STANDARD_TO_UNIVERSAL_MAP_UNIVERSAL_SAL_LEVEL] FOREIGN KEY ([Universal_Sal_Level]) REFERENCES [dbo].[UNIVERSAL_SAL_LEVEL] ([Universal_Sal_Level]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ADDRESS]'
GO
ALTER TABLE [dbo].[ADDRESS] ADD CONSTRAINT [FK_ADDRESS_USER_DETAIL_INFORMATION1] FOREIGN KEY ([Id]) REFERENCES [dbo].[USER_DETAIL_INFORMATION] ([Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[ANALYTICS_MATURITY_GROUPINGS]'
GO
ALTER TABLE [dbo].[ANALYTICS_MATURITY_GROUPINGS] ADD CONSTRAINT [FK_ANALYTICS_MATURITY_GROUPINGS_MATURITY_MODELS] FOREIGN KEY ([Maturity_Model_Id]) REFERENCES [dbo].[MATURITY_MODELS] ([Maturity_Model_Id])
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[FINANCIAL_QUESTIONS]'
GO
ALTER TABLE [dbo].[FINANCIAL_QUESTIONS] ADD CONSTRAINT [FK_FINANCIAL_QUESTIONS_NEW_QUESTION] FOREIGN KEY ([Question_Id]) REFERENCES [dbo].[NEW_QUESTION] ([Question_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[FINANCIAL_REQUIREMENTS]'
GO
ALTER TABLE [dbo].[FINANCIAL_REQUIREMENTS] ADD CONSTRAINT [FK_FINANCIAL_REQUIREMENTS_NEW_REQUIREMENT] FOREIGN KEY ([Requirement_Id]) REFERENCES [dbo].[NEW_REQUIREMENT] ([Requirement_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[SECTOR_STANDARD_RECOMMENDATIONS]'
GO
ALTER TABLE [dbo].[SECTOR_STANDARD_RECOMMENDATIONS] ADD CONSTRAINT [FK_SECTOR_STANDARD_RECOMMENDATIONS_SECTOR] FOREIGN KEY ([Sector_Id]) REFERENCES [dbo].[SECTOR] ([SectorId]) ON DELETE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Adding foreign keys to [dbo].[SUB_CATEGORY_ANSWERS]'
GO
ALTER TABLE [dbo].[SUB_CATEGORY_ANSWERS] ADD CONSTRAINT [FK_SUB_CATEGORY_ANSWERS_ASSESSMENTS] FOREIGN KEY ([Assessement_Id]) REFERENCES [dbo].[ASSESSMENTS] ([Assessment_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[SUB_CATEGORY_ANSWERS] ADD CONSTRAINT [FK_SUB_CATEGORY_ANSWERS_UNIVERSAL_SUB_CATEGORY_HEADINGS] FOREIGN KEY ([Heading_Pair_Id]) REFERENCES [dbo].[UNIVERSAL_SUB_CATEGORY_HEADINGS] ([Heading_Pair_Id]) ON DELETE CASCADE ON UPDATE CASCADE
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Disabling constraints on [dbo].[MATURITY_QUESTIONS]'
GO
ALTER TABLE [dbo].[MATURITY_QUESTIONS] NOCHECK CONSTRAINT [FK_MATURITY_QUESTIONS_MATURITY_QUESTIONS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Disabling constraints on [dbo].[NEW_QUESTION]'
GO
ALTER TABLE [dbo].[NEW_QUESTION] NOCHECK CONSTRAINT [FK_NEW_QUESTION_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Disabling constraints on [dbo].[NEW_QUESTION_LEVELS]'
GO
ALTER TABLE [dbo].[NEW_QUESTION_LEVELS] NOCHECK CONSTRAINT [FK_NEW_QUESTION_LEVELS_UNIVERSAL_SAL_LEVEL]
GO
ALTER TABLE [dbo].[NEW_QUESTION_LEVELS] NOCHECK CONSTRAINT [FK_NEW_QUESTION_LEVELS_NEW_QUESTION_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Disabling constraints on [dbo].[NEW_REQUIREMENT]'
GO
ALTER TABLE [dbo].[NEW_REQUIREMENT] NOCHECK CONSTRAINT [FK_NEW_REQUIREMENT_SETS]
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
PRINT N'Creating extended properties'
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'A collection of MATURITY_QUESTIONS records', 'SCHEMA', N'dbo', 'TABLE', N'MATURITY_QUESTIONS', NULL, NULL
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'BELONGS_IN_EA', 'YES', 'SCHEMA', N'dbo', 'TABLE', N'NEW_QUESTION', NULL, NULL
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'A collection of NEW_QUESTION records', 'SCHEMA', N'dbo', 'TABLE', N'NEW_QUESTION', NULL, NULL
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
BEGIN TRY
	EXEC sp_addextendedproperty N'MS_Description', N'A collection of NEW_REQUIREMENT records', 'SCHEMA', N'dbo', 'TABLE', N'NEW_REQUIREMENT', NULL, NULL
END TRY
BEGIN CATCH
	DECLARE @msg nvarchar(max);
	DECLARE @severity int;
	DECLARE @state int;
	SELECT @msg = ERROR_MESSAGE(), @severity = ERROR_SEVERITY(), @state = ERROR_STATE();
	RAISERROR(@msg, @severity, @state);

	SET NOEXEC ON
END CATCH
GO
COMMIT TRANSACTION
GO
IF @@ERROR <> 0 SET NOEXEC ON
GO
-- This statement writes to the SQL Server Log so SQL Monitor can show this deployment.
IF HAS_PERMS_BY_NAME(N'sys.xp_logevent', N'OBJECT', N'EXECUTE') = 1
BEGIN
    DECLARE @databaseName AS nvarchar(2048), @eventMessage AS nvarchar(2048)
    SET @databaseName = REPLACE(REPLACE(DB_NAME(), N'\', N'\\'), N'"', N'\"')
    SET @eventMessage = N'Redgate SQL Compare: { "deployment": { "description": "Redgate SQL Compare deployed to ' + @databaseName + N'", "database": "' + @databaseName + N'" }}'
    EXECUTE sys.xp_logevent 55000, @eventMessage
END
GO
DECLARE @Success AS BIT
SET @Success = 1
SET NOEXEC OFF
IF (@Success = 1) PRINT 'The database update succeeded'
ELSE BEGIN
	IF @@TRANCOUNT > 0 ROLLBACK TRANSACTION
	PRINT 'The database update failed'
END
GO
